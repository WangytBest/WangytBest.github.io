<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>王小贱</title>
  
  <subtitle>Write the Code Change the World.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wangytbest.github.io/"/>
  <updated>2019-04-11T09:01:22.656Z</updated>
  <id>http://wangytbest.github.io/</id>
  
  <author>
    <name>Wangyutao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>css中position属性深入探讨</title>
    <link href="http://wangytbest.github.io/2019/04/11/css%E4%B8%ADposition%E5%B1%9E%E6%80%A7%E6%B7%B1%E5%85%A5%E6%8E%A2%E8%AE%A8/"/>
    <id>http://wangytbest.github.io/2019/04/11/css中position属性深入探讨/</id>
    <published>2019-04-11T02:58:22.000Z</published>
    <updated>2019-04-11T09:01:22.656Z</updated>
    
    <content type="html"><![CDATA[<p>对于 <code>position</code> 属性可以说是平时开发中使用频率非常高的 <code>CSS</code> 属性，本文主要对 <code>position</code> 做个总结。</p><p><code>position</code> 属性能够很好的体现 HTML 的普通流的特征。设置 <code>position</code> 属性之后主要关注<strong>是否脱离文档流</strong>和<strong>改变 <code>display</code> 属性</strong></p><blockquote><p><code>position</code>: <code>static</code> | <code>relative</code> | <code>absolute</code> | <code>sticky</code></p></blockquote><a id="more"></a><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><p>所有元素在默认情况下 <code>position</code> 属性值都为 <code>static</code> ，此时设置<code>top</code>、<code>left</code>、<code>bottom</code>和 <code>right</code> 在 <code>position</code> 为 <code>static</code> 的情况下无效。<br>用法：在改变了元素的 <code>position</code> 属性后可以将其元素重置为 <code>static</code> ，让其回归到正常的普通文档流中。</p><h2 id="relative"><a href="#relative" class="headerlink" title="relative"></a>relative</h2><p>相对定位: 指给元素设置相对于原本位置的定位，元素并不脱离文档流，因此元素原本的位置会被保留，其他的元素位置不会受到影响。</p><p>每个元素在页面中的普通流中都会占用一个位置（元素默认文档流位置），设置为相对定位后，将元素偏离元素的默认位置，但是普通文档流中依然保持着原有的默认位置，并没有脱离普通文档流。</p><h3 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h3><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-undefined">  div&#123; </span></span><br><span class="line"><span class="hljs-undefined">    width: 100px; </span></span><br><span class="line"><span class="hljs-undefined">    height: 50px; </span></span><br><span class="line"><span class="hljs-undefined">    line-height: 50px; </span></span><br><span class="line"><span class="hljs-undefined">    text-align: center; </span></span><br><span class="line"><span class="hljs-css">    <span class="hljs-selector-tag">color</span>: <span class="hljs-selector-id">#fff</span>; </span></span><br><span class="line"><span class="hljs-undefined">  &#125;</span></span><br><span class="line"><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-css">  <span class="hljs-selector-tag">div</span> <span class="hljs-selector-class">.A</span> &#123;</span></span><br><span class="line"><span class="hljs-undefined">    background: blue;</span></span><br><span class="line"><span class="hljs-undefined">  &#125;</span></span><br><span class="line"><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-css">  <span class="hljs-selector-tag">div</span> <span class="hljs-selector-class">.B</span> &#123;</span></span><br><span class="line"><span class="hljs-undefined">    background: red; </span></span><br><span class="line"><span class="hljs-undefined">    position: relative; </span></span><br><span class="line"><span class="hljs-undefined">    top: 20px; </span></span><br><span class="line"><span class="hljs-undefined">    left: 20px;</span></span><br><span class="line"><span class="hljs-undefined">  &#125;</span></span><br><span class="line"><span class="hljs-css">  <span class="hljs-selector-tag">div</span> <span class="hljs-selector-class">.C</span> &#123;</span></span><br><span class="line"><span class="hljs-undefined">    background: green;</span></span><br><span class="line"><span class="hljs-undefined">  &#125;</span></span><br><span class="line"><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"A"</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"B"</span>&gt;</span>B<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"C"</span>&gt;</span>C<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="http://blog.cloud.xuww.wang/position-relative-block.png" alt="相对定位"></p><p>在右图中的黑色虚线部分为B块的默认文档流位置，当B块设置为相对定位 <code>relative</code> 之后，则相对于<strong>默认位置</strong>进行偏移。C块依然保留在原位，并没有因为B块发生了偏移而随之变化。</p><h3 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h3><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-undefined">  strong &#123; </span></span><br><span class="line"><span class="hljs-css">    <span class="hljs-selector-tag">background</span>: <span class="hljs-selector-id">#808080</span>; </span></span><br><span class="line"><span class="hljs-undefined">  &#125;</span></span><br><span class="line"><span class="hljs-undefined">  em &#123; </span></span><br><span class="line"><span class="hljs-css">    <span class="hljs-selector-tag">background</span>: <span class="hljs-selector-id">#ffd800</span>; </span></span><br><span class="line"><span class="hljs-undefined">  &#125;</span></span><br><span class="line"><span class="hljs-undefined">  span &#123; </span></span><br><span class="line"><span class="hljs-css">    <span class="hljs-selector-tag">background</span>: <span class="hljs-selector-id">#b6ff00</span>; </span></span><br><span class="line"><span class="hljs-undefined">    position: relative; </span></span><br><span class="line"><span class="hljs-undefined">    top: 10px; </span></span><br><span class="line"><span class="hljs-undefined">    left: 10px; </span></span><br><span class="line"><span class="hljs-undefined">    width: 100px;</span></span><br><span class="line"><span class="hljs-undefined">  &#125;</span></span><br><span class="line"><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>strong<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>em<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="http://blog.cloud.xuww.wang/position-relative-inline.png.png" alt="行内元素-相对定位"></p><p>行内元素在设置 <code>relative</code> 之后，依然是内联元素， <code>widht</code> 属性未生效，并<strong>没有改变行内元素的display属性</strong>（这是与 <code>absolute</code> 的一个重要的区别）。</p><h2 id="absolute"><a href="#absolute" class="headerlink" title="absolute"></a>absolute</h2><p>绝对定位: 是指给元素设置绝对的定位，相对定位的对象可以分为两种情况：</p><ol><li>设置了 <code>absolute</code> 的元素如果存在有祖先元素设置了 <code>position</code> 属性为 <code>relative</code> 或者 <code>absolute</code> ，则这时元素的定位对象为此已设置 <code>position</code> 属性的祖先元素。</li><li>如果并没有设置了 <code>position</code> 属性的祖先元素，则此时相对于 <code>body</code> 进行定位。</li></ol><p><code>position: absolute</code>相对于第一个不是 <code>static</code> 的父级元素进行定位。如果在其节点中所有的父级祖先元素都没有设置 <code>position</code> 属性为 <code>relative</code> 或 <code>absolute</code> 则该元素最终将对 <code>body</code> 进行位置偏移。</p><blockquote><p>设置绝对定位的元素会<strong>脱离普通的文档流</strong>并且<strong>改变diaplay属性</strong>。</p></blockquote><p>结论：</p><ul><li>块级元素在设置为absolute绝对定位之后，会将width设置为auto（收到父元素的影响）</li><li>行内元素在设置为absolute绝对定位之后，如果没有设置其top、left、bottom和right属性的话，浏览器会设置成auto，auto的值则是该元素的默认位置。</li></ul><h2 id="relative-absolute-点"><a href="#relative-absolute-点" class="headerlink" title="relative|absolute 点"></a>relative|absolute 点</h2><ol><li>应用了<code>position: relative | absolute</code>的元素，<code>margin</code>属性依然生效，尽量不要设置<code>margin</code>，减少干扰、不精确。</li><li><code>position: absolute</code> 将会忽略根元素的padding。</li><li>行内元素使用了<code>position: absolute</code>之后会改变<code>display</code>属性，<code>inline-block</code>。</li><li>设置<code>position: relative | absolute</code>之后，会覆盖其他非定位的元素，如果不想覆盖其他元素，也可以将其<code>z-index: -1</code>。</li></ol><h2 id="fixed"><a href="#fixed" class="headerlink" title="fixed"></a>fixed</h2><p>绝对定位。</p><ul><li>改变行内元素的<code>display</code>属性，使其<code>display</code>属性变更为<code>block</code>。</li><li>会让元素脱硫文档流，不占据空间</li><li>覆盖在非定位元素</li></ul><p><code>fixed</code> 和 <code>absolute</code> 的区别： <code>absolute</code> 根据第一个不是 <code>static</code> 的父元素进行定位， <code>fixed</code> 是根据浏览器窗口定位。</p><h2 id="sticky"><a href="#sticky" class="headerlink" title="sticky"></a>sticky</h2><p>粘性定位: <code>sticky</code> 的元素，在屏幕范围（<code>viewport</code>）时该元素的位置并不受到定位影响（设置是 <code>top</code> 、 <code>left</code> 等属性无效），当该元素的位置将要移出偏移范围时，定位又会变成 <code>fixed</code> ，根据设置的 <code>left</code> 、 <code>top</code> 等属性成固定位置的效果。</p><p>可以知道sticky属性有以下几个特点：</p><ul><li>该元素并不脱离文档流，仍然保留元素原本在文档流中的位置。</li><li>当元素在容器中被滚动超过指定的偏移值时，元素在容器内固定在指定位置。亦即如果你设置了top: 50px，那么在sticky元素到达距离相对定位的元素顶部50px的位置时固定，不再向上移动。</li><li>元素固定的相对偏移是相对于离它最近的具有滚动框的祖先元素，如果祖先元素都不可以滚动，那么是相对于viewport来计算元素的偏移量</li></ul><h2 id="position和float"><a href="#position和float" class="headerlink" title="position和float"></a>position和float</h2><ol><li>当元素同时设置 <code>position: relative</code> 和 <code>float: left</code> ，则元素先浮动到相应的位置，然后在根据 <code>top/ left / bottom / right</code> 来发生偏移。</li><li>当元素同时设置 <code>position: absolute</code> 和 <code>float: left</code> ，则 <code>float</code> 失效。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于 &lt;code&gt;position&lt;/code&gt; 属性可以说是平时开发中使用频率非常高的 &lt;code&gt;CSS&lt;/code&gt; 属性，本文主要对 &lt;code&gt;position&lt;/code&gt; 做个总结。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;position&lt;/code&gt; 属性能够很好的体现 HTML 的普通流的特征。设置 &lt;code&gt;position&lt;/code&gt; 属性之后主要关注&lt;strong&gt;是否脱离文档流&lt;/strong&gt;和&lt;strong&gt;改变 &lt;code&gt;display&lt;/code&gt; 属性&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;position&lt;/code&gt;: &lt;code&gt;static&lt;/code&gt; | &lt;code&gt;relative&lt;/code&gt; | &lt;code&gt;absolute&lt;/code&gt; | &lt;code&gt;sticky&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://wangytbest.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://wangytbest.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Vue双向绑定</title>
    <link href="http://wangytbest.github.io/2019/04/09/Vue%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/"/>
    <id>http://wangytbest.github.io/2019/04/09/Vue双向绑定/</id>
    <published>2019-04-09T08:03:43.000Z</published>
    <updated>2019-04-10T02:04:15.318Z</updated>
    
    <content type="html"><![CDATA[<h3 id="双向绑定"><a href="#双向绑定" class="headerlink" title="双向绑定"></a>双向绑定</h3><p>MVVM：数据变化更新试图，视图变化更新数据。</p><ul><li>Model</li><li>View</li><li>ViewModel</li></ul><h3 id="双向绑定实现"><a href="#双向绑定实现" class="headerlink" title="双向绑定实现"></a>双向绑定实现</h3><ul><li><p>vue: 数据劫持<br>vue数据实现双向绑定是通过数据劫持结合发布者-订阅者模式实现的。</p></li><li><p>angular: 脏检查机制<br>当触发了指定事件后会进入脏数据检测，这时会调用 <code>$digest</code> 循环遍历所有的数据观察者，判断当前值是否和先前的值有区别，如果检测到变化的话，会调用 <code>$watch</code> 函数，然后再次调用 <code>$digest</code> 循环直到发现没有变化。循环至少为二次 ，至多为十次。</p></li></ul><a id="more"></a><h3 id="vue实现"><a href="#vue实现" class="headerlink" title="vue实现"></a>vue实现</h3><p>实现数据的双向绑定，首先要对数据进行劫持监听，设置一个<code>监听器Observer</code>，用来监听所有属性。如果属性发上变化了，就需要告诉<code>订阅者Watcher</code>看是否需要更新。因为订阅者是有很多个，所以我们需要有一个<code>消息订阅器Dep</code>来专门收集这些订阅者，然后在监听器Observer和订阅者Watcher之间进行统一管理。接着，我们还需要有一个<code>指令解析器Compile</code>，对每个节点元素进行扫描和解析，将相关指令对应初始化成一个订阅者Watcher，并替换模板数据或者绑定相应的函数，此时当订阅者Watcher接收到相应属性的变化，就会执行对应的更新函数，从而更新视图。</p><h4 id="1-实现一个监听器Observer，用来劫持并监听所有属性，如果有变动，就通知订阅者。"><a href="#1-实现一个监听器Observer，用来劫持并监听所有属性，如果有变动，就通知订阅者。" class="headerlink" title="1. 实现一个监听器Observer，用来劫持并监听所有属性，如果有变动，就通知订阅者。"></a>1. 实现一个<code>监听器Observer</code>，用来劫持并监听所有属性，如果有变动，就通知订阅者。</h4><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">defineReactive</span>(<span class="hljs-params">data, key, value</span>) </span>&#123;</span><br><span class="line">    observe(val); <span class="hljs-comment">// 递归遍历所有子属性</span></span><br><span class="line">    <span class="hljs-keyword">var</span> dep = <span class="hljs-keyword">new</span> Dep();</span><br><span class="line">    <span class="hljs-built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">        enumerable: <span class="hljs-literal">true</span>,</span><br><span class="line">        configurable: <span class="hljs-literal">true</span>,</span><br><span class="line">        <span class="hljs-keyword">set</span>: function(newVal) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>( val === newVal ) &#123;</span><br><span class="line">                <span class="hljs-keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            value = newVal;</span><br><span class="line">            dep.notify(); <span class="hljs-comment">// 如果数据变化，通知所有订阅者</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="hljs-keyword">get</span>: function() &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>(Dep.target) &#123; <span class="hljs-comment">// 判断是否需要添加订阅者</span></span><br><span class="line">                dep.addSub(Dep.target); <span class="hljs-comment">// 添加订阅者</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">observe</span>(<span class="hljs-params">data</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(!data || <span class="hljs-keyword">typeof</span> data !== <span class="hljs-string">'object'</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-built_in">Object</span>.keys(data).forEach(<span class="hljs-function"><span class="hljs-params">key</span> =&gt;</span> &#123;</span><br><span class="line">        defineReactive(data, key, data[key]);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-实现一个消息订阅器Dep，主要负责收集订阅者，然后在属性变化的时候执行对应订阅者的更新函数。"><a href="#2-实现一个消息订阅器Dep，主要负责收集订阅者，然后在属性变化的时候执行对应订阅者的更新函数。" class="headerlink" title="2. 实现一个消息订阅器Dep，主要负责收集订阅者，然后在属性变化的时候执行对应订阅者的更新函数。"></a>2. 实现一个<code>消息订阅器Dep</code>，主要负责收集订阅者，然后在属性变化的时候执行对应订阅者的更新函数。</h4><blockquote><p>创建一个可以容纳订阅者的消息订阅起Dep。</p></blockquote><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Dep</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.subs = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Dep.property.addSub = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">sub</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.subs.push(sub);</span><br><span class="line">&#125;</span><br><span class="line">Dep.property.notify = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.subs.forEach(<span class="hljs-function"><span class="hljs-params">sub</span> =&gt;</span> &#123;</span><br><span class="line">        sub.update();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Dep.target = <span class="hljs-literal">null</span>;</span><br></pre></td></tr></table></figure><p>我们将订阅器Dep添加一个订阅者设计在getter里面，这是为了让Watcher初始化进行触发，因此需要判断是否要添加订阅者，至于具体设计方案，下文会详细说明的。在setter函数里面，如果数据变化，就会去通知所有订阅者，订阅者们就会去执行对应的更新的函数。到此为止，一个比较完整Observer已经实现了，接下来我们开始设计Watcher。</p><h4 id="3-实现一个订阅者Watcher，可以收到属性的变化通知并执行相应的函数，从而更新视图。"><a href="#3-实现一个订阅者Watcher，可以收到属性的变化通知并执行相应的函数，从而更新视图。" class="headerlink" title="3. 实现一个订阅者Watcher，可以收到属性的变化通知并执行相应的函数，从而更新视图。"></a>3. 实现一个订阅者<code>Watcher</code>，可以收到属性的变化通知并执行相应的函数，从而更新视图。</h4><blockquote><p><code>监听器Observer</code>是在<code>get函数</code>执行了添加<code>订阅者Watcher</code>的操作，所以在<code>订阅者Watcher</code>初始化的时候触发对应的<code>get</code>函数去执行添加订阅者操作。注意只在<code>订阅者Watcher</code>初始化的时候才需要添加订阅者。</p></blockquote><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Watcher</span>(<span class="hljs-params">vm, exp, cb</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.cb = cb;</span><br><span class="line">    <span class="hljs-keyword">this</span>.vm = vm;</span><br><span class="line">    <span class="hljs-keyword">this</span>.exp = exp;</span><br><span class="line">    <span class="hljs-keyword">this</span>.value = <span class="hljs-keyword">this</span>.get();  <span class="hljs-comment">// 将自己添加到订阅器的操作</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">Watcher.prototype = &#123;</span><br><span class="line">    update: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.run();</span><br><span class="line">    &#125;,</span><br><span class="line">    run: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">var</span> value = <span class="hljs-keyword">this</span>.vm.data[<span class="hljs-keyword">this</span>.exp];</span><br><span class="line">        <span class="hljs-keyword">var</span> oldVal = <span class="hljs-keyword">this</span>.value;</span><br><span class="line">        <span class="hljs-keyword">if</span> (value !== oldVal) &#123;</span><br><span class="line">            <span class="hljs-keyword">this</span>.value = value;</span><br><span class="line">            <span class="hljs-keyword">this</span>.cb.call(<span class="hljs-keyword">this</span>.vm, value, oldVal);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="hljs-keyword">get</span>: function() &#123;</span><br><span class="line">        Dep.target = <span class="hljs-keyword">this</span>;  <span class="hljs-comment">// 缓存自己</span></span><br><span class="line">        <span class="hljs-keyword">var</span> value = <span class="hljs-keyword">this</span>.vm.data[<span class="hljs-keyword">this</span>.exp]  <span class="hljs-comment">// 强制执行监听器里的get函数</span></span><br><span class="line">        Dep.target = <span class="hljs-literal">null</span>;  <span class="hljs-comment">// 释放自己</span></span><br><span class="line">        <span class="hljs-keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="关联Wathcher和Observer"><a href="#关联Wathcher和Observer" class="headerlink" title="关联Wathcher和Observer"></a>关联Wathcher和Observer</h4><p>到此为止，简单版的Watcher设计完毕，这时候我们只要将Observer和Watcher关联起来，就可以实现一个简单的双向绑定数据了。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"name"</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Observer和Watcher关联起来</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SelfVue</span> (<span class="hljs-params">data, el, exp</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.data = data;</span><br><span class="line">    observe(data);</span><br><span class="line">    el.innerHTML = <span class="hljs-keyword">this</span>.data[exp];  <span class="hljs-comment">// 初始化模板数据的值</span></span><br><span class="line">    <span class="hljs-keyword">new</span> Watcher(<span class="hljs-keyword">this</span>, exp, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) </span>&#123;</span><br><span class="line">        el.innerHTML = value;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> ele = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#name'</span>);</span><br><span class="line"><span class="hljs-keyword">var</span> selfVue = <span class="hljs-keyword">new</span> SelfVue(&#123;</span><br><span class="line">    name: <span class="hljs-string">'hello world'</span></span><br><span class="line">&#125;, ele, <span class="hljs-string">'name'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">window</span>.setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'name值改变了'</span>);</span><br><span class="line">    selfVue.data.name = <span class="hljs-string">'canfoo'</span>;</span><br><span class="line">&#125;, <span class="hljs-number">2000</span>);</span><br></pre></td></tr></table></figure><h4 id="4-实现一个解析器Compile，可以扫描和解析每个节点的相关指令，并根据初始化模板数据以及初始化相应的订阅器。"><a href="#4-实现一个解析器Compile，可以扫描和解析每个节点的相关指令，并根据初始化模板数据以及初始化相应的订阅器。" class="headerlink" title="4. 实现一个解析器Compile，可以扫描和解析每个节点的相关指令，并根据初始化模板数据以及初始化相应的订阅器。"></a>4. 实现一个解析器<code>Compile</code>，可以扫描和解析每个节点的相关指令，并根据初始化模板数据以及初始化相应的订阅器。</h4><h4 id="数据劫持"><a href="#数据劫持" class="headerlink" title="数据劫持"></a>数据劫持</h4><p><code>Object.defineProperty()</code>方法实现数据劫持，<code>Object.defineProperty()</code>用来控制对象属性，比如读写权限、是否可枚举、描述属性<code>get</code>和<code>set</code>等。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;双向绑定&quot;&gt;&lt;a href=&quot;#双向绑定&quot; class=&quot;headerlink&quot; title=&quot;双向绑定&quot;&gt;&lt;/a&gt;双向绑定&lt;/h3&gt;&lt;p&gt;MVVM：数据变化更新试图，视图变化更新数据。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Model&lt;/li&gt;
&lt;li&gt;View&lt;/li&gt;
&lt;li&gt;ViewModel&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;双向绑定实现&quot;&gt;&lt;a href=&quot;#双向绑定实现&quot; class=&quot;headerlink&quot; title=&quot;双向绑定实现&quot;&gt;&lt;/a&gt;双向绑定实现&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;vue: 数据劫持&lt;br&gt;vue数据实现双向绑定是通过数据劫持结合发布者-订阅者模式实现的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;angular: 脏检查机制&lt;br&gt;当触发了指定事件后会进入脏数据检测，这时会调用 &lt;code&gt;$digest&lt;/code&gt; 循环遍历所有的数据观察者，判断当前值是否和先前的值有区别，如果检测到变化的话，会调用 &lt;code&gt;$watch&lt;/code&gt; 函数，然后再次调用 &lt;code&gt;$digest&lt;/code&gt; 循环直到发现没有变化。循环至少为二次 ，至多为十次。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://wangytbest.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://wangytbest.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Loadsh库模块化引入</title>
    <link href="http://wangytbest.github.io/2019/04/09/Loadsh%E5%BA%93%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%95%E5%85%A5/"/>
    <id>http://wangytbest.github.io/2019/04/09/Loadsh库模块化引入/</id>
    <published>2019-04-09T08:02:53.000Z</published>
    <updated>2019-04-09T08:03:19.603Z</updated>
    
    <content type="html"><![CDATA[<h2 id="loadsh提供模块按需加载"><a href="#loadsh提供模块按需加载" class="headerlink" title="loadsh提供模块按需加载"></a>loadsh提供模块按需加载</h2><blockquote><p>loadsh本身提供模块化引入，可按需引入</p></blockquote><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// </span></span><br><span class="line"><span class="hljs-keyword">import</span> &#123; debounce &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'loadsh'</span></span><br><span class="line"><span class="hljs-keyword">import</span> &#123; throttle &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'loadsh'</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 按需引入</span></span><br><span class="line"><span class="hljs-keyword">import</span> &#123; debounce &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'loadsh/debounce'</span></span><br><span class="line"><span class="hljs-keyword">import</span> &#123; throttle &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'loadsh/throttle'</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="webpack-plugin-配置"><a href="#webpack-plugin-配置" class="headerlink" title="webpack plugin 配置"></a>webpack plugin 配置</h2><blockquote><p>通过<code>webpack</code>配置，按需加载所需要的模块</p></blockquote><ul><li><code>loadsh-webpack-plugin</code></li><li><code>babel-plugin-loadsh</code></li></ul><p>结合使用，将全路径引用的<code>loadsh</code>自动转变为模块化按需引用</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// @/util/loadsh.js 统一引入需要的loadsh方法</span></span><br><span class="line"><span class="hljs-keyword">import</span> _ <span class="hljs-keyword">from</span> <span class="hljs-string">'loadsh'</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="line">    cloneDeep: _.cloneDeep,</span><br><span class="line">    debounce: _.debounce,</span><br><span class="line">    throttle: _.throttle,</span><br><span class="line">    isEmpty: _.isEmpty</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 注入全局 main.js</span></span><br><span class="line"><span class="hljs-keyword">import</span> _ <span class="hljs-keyword">from</span> <span class="hljs-string">'@/util/loadsh.js'</span></span><br><span class="line">Vue.prototype.$_ = _</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 组件使用</span></span><br><span class="line"><span class="hljs-keyword">this</span>.$_.debounce()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;loadsh提供模块按需加载&quot;&gt;&lt;a href=&quot;#loadsh提供模块按需加载&quot; class=&quot;headerlink&quot; title=&quot;loadsh提供模块按需加载&quot;&gt;&lt;/a&gt;loadsh提供模块按需加载&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;loadsh本身提供模块化引入，可按需引入&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &amp;#123; debounce &amp;#125; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;loadsh&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &amp;#123; throttle &amp;#125; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;loadsh&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 按需引入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &amp;#123; debounce &amp;#125; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;loadsh/debounce&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &amp;#123; throttle &amp;#125; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;loadsh/throttle&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="webpack" scheme="http://wangytbest.github.io/categories/webpack/"/>
    
    
      <category term="webpack" scheme="http://wangytbest.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack-spritesmith雪碧图</title>
    <link href="http://wangytbest.github.io/2019/04/09/webpack-spritesmith%E9%9B%AA%E7%A2%A7%E5%9B%BE/"/>
    <id>http://wangytbest.github.io/2019/04/09/webpack-spritesmith雪碧图/</id>
    <published>2019-04-09T08:02:00.000Z</published>
    <updated>2019-04-09T09:56:32.601Z</updated>
    
    <content type="html"><![CDATA[<p>项目开发设计师没有提供svg或者icon-font，只能使用图片，过多的小图片造成资源浪费，解决方案：webpack打包将多个图标合成雪碧图</p><p><strong>需要同时配置开发环境和线上环境的webpack配置</strong></p><ul><li><code>webpack-spritesmith</code> 合成雪碧图插件</li><li><code>file-loader</code></li></ul><a id="more"></a><hr><pre><code>| build|      ||      |--utils.js|      |--webpack.base.config.js|      |--webpack.dev.config.js|      |--webpack.pro.config.js||src|   ||   |--assets|   |        ||   |        |--css|   |        |--incons|   ||   |-sprites</code></pre><h3 id="1-修改webpack-base-config-js"><a href="#1-修改webpack-base-config-js" class="headerlink" title="1. 修改webpack.base.config.js"></a>1. 修改<code>webpack.base.config.js</code></h3><blockquote><ul><li>resolve</li><li>modules<blockquote><p>添加resolve和处理雪碧图资源的loader</p></blockquote></li></ul></blockquote><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">    modules: [</span><br><span class="line">        <span class="hljs-string">'node_modules'</span>,</span><br><span class="line">        <span class="hljs-string">'src/sprites'</span> <span class="hljs-comment">// 合成sprite图片地址</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">modules: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">        ...</span><br><span class="line">        <span class="hljs-comment">// 对需要合成雪碧图的资源不进行base64转换</span></span><br><span class="line">        &#123;</span><br><span class="line">            test: <span class="hljs-regexp">/\.(png|jpe?g|gif|svg)(\?.*)?$/</span>,</span><br><span class="line">            exclude: path.join(__dirname, <span class="hljs-string">'src/assets/icons'</span>),</span><br><span class="line">            loader: <span class="hljs-string">'url-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">                limit: <span class="hljs-number">10000</span>,</span><br><span class="line">                name: utils.assetsPath(<span class="hljs-string">'img/[name].[hash:7].[ext]'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="hljs-comment">// 对图标单独设置，以便生成雪碧图</span></span><br><span class="line">        &#123;</span><br><span class="line">            test: <span class="hljs-regexp">/\.(png|jpe?g|gif|svg)(\?.*)?$/</span>,</span><br><span class="line">            include: path.join(__dirname, <span class="hljs-string">'src/assets/icons'</span>),</span><br><span class="line">            loaders: [</span><br><span class="line">                <span class="hljs-string">'file-loader?name=i/[hash].[ext]'</span> <span class="hljs-comment">// 使用file-loader 对 png 图标进行设置</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-修改webpack-dev-config-js"><a href="#2-修改webpack-dev-config-js" class="headerlink" title="2. 修改webpack.dev.config.js"></a>2. 修改<code>webpack.dev.config.js</code></h3><blockquote><p>添加plugin</p></blockquote><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> utils = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./utils'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> SpritesmithPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">'webpack-spritesmith'</span>)</span><br><span class="line"></span><br><span class="line">plugins: [</span><br><span class="line">    <span class="hljs-comment">// 雪碧图设置</span></span><br><span class="line">    <span class="hljs-keyword">new</span> SpritesmithPlugin(&#123;</span><br><span class="line">      src: &#123;</span><br><span class="line">        cwd: path.resolve(__dirname, <span class="hljs-string">'../src/assets/icons'</span>), <span class="hljs-comment">// 图标根路径</span></span><br><span class="line">        glob: <span class="hljs-string">'*.png'</span> <span class="hljs-comment">// 匹配任意 png 图标</span></span><br><span class="line">      &#125;,</span><br><span class="line">      target: &#123;</span><br><span class="line">        image: path.resolve(__dirname, <span class="hljs-string">'../src/sprites/sprites.png'</span>), <span class="hljs-comment">// 生成雪碧图目标路径与名称</span></span><br><span class="line">        <span class="hljs-comment">// 设置生成CSS背景及其定位的文件或方式</span></span><br><span class="line">        css: [</span><br><span class="line">          [</span><br><span class="line">            path.resolve(__dirname, <span class="hljs-string">'../src/sprites/sprites.css'</span>),</span><br><span class="line">            &#123; <span class="hljs-attr">format</span>: <span class="hljs-string">'function_based_template'</span> &#125;</span><br><span class="line">          ],</span><br><span class="line">          [</span><br><span class="line">            path.resolve(__dirname, <span class="hljs-string">'../src/sprites/_sprites.scss'</span>),</span><br><span class="line">            &#123; <span class="hljs-attr">format</span>: <span class="hljs-string">'handlebars_based_template'</span> &#125;</span><br><span class="line">          ],</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      customTemplates: &#123;</span><br><span class="line">        <span class="hljs-string">'function_based_template'</span>: utils.cssTemplateFunction,</span><br><span class="line">        <span class="hljs-string">'handlebars_based_template'</span>: utils.scssTemplateFunction</span><br><span class="line">      &#125;,</span><br><span class="line">      apiOptions: &#123;</span><br><span class="line">        cssImageRef: <span class="hljs-string">"~sprites.png"</span>, <span class="hljs-comment">// css文件中引用雪碧图的相对位置路径配置</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="hljs-comment">// retina: '@2x',</span></span><br><span class="line">      spritesmithOptions: &#123;</span><br><span class="line">        padding: <span class="hljs-number">8</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="hljs-comment">// When set to true will console.log list of created files.</span></span><br><span class="line">      logCreatedFiles: <span class="hljs-literal">true</span></span><br><span class="line">    &#125;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="3-修改utils-js"><a href="#3-修改utils-js" class="headerlink" title="3.修改utils.js"></a>3.修改<code>utils.js</code></h3><blockquote><p>打包中使用<code>webpack-spritesmith</code>插件使用自定义生成css/scss文件的模版方法</p></blockquote><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">exports.cssTemplateFunction = <span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> shared = <span class="hljs-string">'.icon &#123; background-image: url(I); &#125;'</span></span><br><span class="line">      .replace(<span class="hljs-string">'I'</span>, data.sprites[<span class="hljs-number">0</span>].image);</span><br><span class="line">  <span class="hljs-comment">// 注意：此处默认图标使用的是二倍图</span></span><br><span class="line">  <span class="hljs-keyword">const</span> perSprite = data.sprites.map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">sprite</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-comment">// background-size: SWpx SHpx;</span></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-string">'.icon-N &#123; width: Wpx; height: Hpx; background-position: Xpx Ypx;&#125;'</span></span><br><span class="line">    <span class="hljs-comment">// return '.icon-N &#123; width: SWpx; height: SHpx; background-position: Xpx Ypx;&#125;\n.icon-N .icon, .icon-N.icon &#123; width: Wpx; height: Hpx; background-position: Xpx Ypx; &#125; '</span></span><br><span class="line">      .replace(<span class="hljs-regexp">/N/g</span>, sprite.name)</span><br><span class="line">      .replace(<span class="hljs-regexp">/SW/g</span>, sprite.width / <span class="hljs-number">2</span>)</span><br><span class="line">      .replace(<span class="hljs-regexp">/SH/g</span>, sprite.height / <span class="hljs-number">2</span>)</span><br><span class="line">      .replace(<span class="hljs-regexp">/W/g</span>, sprite.width)</span><br><span class="line">      .replace(<span class="hljs-regexp">/H/g</span>, sprite.height)</span><br><span class="line">      .replace(<span class="hljs-regexp">/X/g</span>, sprite.offset_x)</span><br><span class="line">      .replace(<span class="hljs-regexp">/Y/g</span>, sprite.offset_y);</span><br><span class="line">  &#125;).join(<span class="hljs-string">'\n'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> shared + <span class="hljs-string">'\n'</span> + perSprite;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">exports.scssTemplateFunction = <span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-comment">// console.log(data, '==========', data.spritesheet)</span></span><br><span class="line">  <span class="hljs-keyword">const</span> mixs = <span class="hljs-string">`$screen:750;</span></span><br><span class="line"><span class="hljs-string">                @function px2rem($px) &#123;</span></span><br><span class="line"><span class="hljs-string">                  @return #&#123;$px/($screen/10)&#125;rem</span></span><br><span class="line"><span class="hljs-string">                &#125;`</span></span><br><span class="line">  <span class="hljs-keyword">const</span> shared = <span class="hljs-string">'.icon &#123; background-image: url(I); background-size: px2rem\(W\) px2rem\(H\);&#125;'</span></span><br><span class="line">      .replace(<span class="hljs-string">'I'</span>, data.sprites[<span class="hljs-number">0</span>].image)</span><br><span class="line">      .replace(<span class="hljs-regexp">/W/g</span>, data.spritesheet.width)</span><br><span class="line">      .replace(<span class="hljs-regexp">/H/g</span>, data.spritesheet.height)</span><br><span class="line">  <span class="hljs-comment">// 注意：此处默认图标使用的是二倍图</span></span><br><span class="line">  <span class="hljs-keyword">const</span> perSprite = data.sprites.map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">sprite</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-string">'.icon-N &#123; width: px2rem\(W\); height: px2rem\(H\); background-position: px2rem\(X\) px2rem\(Y\);&#125; '</span></span><br><span class="line">      .replace(<span class="hljs-regexp">/N/g</span>, sprite.name)</span><br><span class="line">      .replace(<span class="hljs-regexp">/SW/g</span>, sprite.width / <span class="hljs-number">2</span>)</span><br><span class="line">      .replace(<span class="hljs-regexp">/SH/g</span>, sprite.height / <span class="hljs-number">2</span>)</span><br><span class="line">      .replace(<span class="hljs-regexp">/W/g</span>, sprite.width)</span><br><span class="line">      .replace(<span class="hljs-regexp">/H/g</span>, sprite.height)</span><br><span class="line">      .replace(<span class="hljs-regexp">/X/g</span>, sprite.offset_x)</span><br><span class="line">      .replace(<span class="hljs-regexp">/Y/g</span>, sprite.offset_y);</span><br><span class="line">  &#125;).join(<span class="hljs-string">'\n'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> mixs + <span class="hljs-string">'\n'</span> + shared + <span class="hljs-string">'\n'</span> + perSprite;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>参考</p><ul><li><a href="https://github.com/HaoyCn/postcss-sprite-property" target="_blank" rel="noopener">雪碧图处理工具</a></li><li><a href="https://github.com/mixtur/webpack-spritesmith" target="_blank" rel="noopener">webpack-spritesmith github</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目开发设计师没有提供svg或者icon-font，只能使用图片，过多的小图片造成资源浪费，解决方案：webpack打包将多个图标合成雪碧图&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;需要同时配置开发环境和线上环境的webpack配置&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;webpack-spritesmith&lt;/code&gt; 合成雪碧图插件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file-loader&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="webpack" scheme="http://wangytbest.github.io/categories/webpack/"/>
    
    
      <category term="webpack" scheme="http://wangytbest.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>externals外部扩展理解</title>
    <link href="http://wangytbest.github.io/2019/04/09/externals%E5%A4%96%E9%83%A8%E6%89%A9%E5%B1%95%E7%90%86%E8%A7%A3/"/>
    <id>http://wangytbest.github.io/2019/04/09/externals外部扩展理解/</id>
    <published>2019-04-09T08:00:44.000Z</published>
    <updated>2019-04-09T08:01:31.290Z</updated>
    
    <content type="html"><![CDATA[<p>如果我们想引用一个库，但是又不想让webpack打包，并且又不影响我们在程序中以CMD、AMD或者window/global全局等方式进行使用，那就可以通过配置externals。</p><a id="more"></a><p><code>externals</code> 配置选项提供从输出的<code>bundle</code>中排除依赖</p><blockquote><ul><li><p>可以解决<code>npm run build</code>打包后<code>vender.js</code>文件过大的问题</p></li><li><p>防止将某些<code>import</code>的包（package）打包到bundle（vue-cli2默认输出文件名为<code>vender.js</code>）中，而是运行时再从外部获取这些扩展依赖（external dependencies）,如第三方类库。</p></li></ul></blockquote><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><blockquote><p><code>string</code> <code>array</code> <code>object</code> <code>function</code> <code>regex</code></p></blockquote><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><blockquote><p>配置externals，这样就剥离了那些不需要改动的依赖，不再把这些类库一起打包</p></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// webpack.config.js</span><br><span class="line">modules.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">    externals: &#123;</span><br><span class="line">        &apos;jquery&apos;: &apos;jQuery&apos;,</span><br><span class="line">        &apos;vue&apos;: &apos;Vue&apos;,</span><br><span class="line">        &apos;vue-router&apos;: &apos;VueRouter&apos;,</span><br><span class="line">        &apos;vuex&apos;: &apos;Vuex&apos;,</span><br><span class="line">        lodash : &#123;</span><br><span class="line">            commonjs: &apos;lodash&apos;,</span><br><span class="line">            amd: &apos;lodash&apos;,</span><br><span class="line">            root: &apos;_&apos; // 指向全局变量</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种方式描述了外部library所有可用的访问方式。这里<code>loadsh</code>这个外部的library可以在<code>AMD</code>和<code>CommonJS</code>模块系统中通过<code>loadsh</code>访问。但在<code>全局变量</code>形式下用<code>_</code>访问。</p><p>剥离第三方依赖，需要在<code>index.html</code>中引入<br><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"http://storage.jd.com/campus-inviting/vue.min.js"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"http://storage.jd.com/campus-inviting/vue-router.min.js"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"http://storage.jd.com/campus-inviting/vuex.min.js"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><a href="https://segmentfault.com/a/1190000012113011" target="_blank" rel="noopener">webpack externals 深入理解</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果我们想引用一个库，但是又不想让webpack打包，并且又不影响我们在程序中以CMD、AMD或者window/global全局等方式进行使用，那就可以通过配置externals。&lt;/p&gt;
    
    </summary>
    
      <category term="webpack" scheme="http://wangytbest.github.io/categories/webpack/"/>
    
    
      <category term="webpack" scheme="http://wangytbest.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>头条前端面试</title>
    <link href="http://wangytbest.github.io/2019/04/09/%E5%A4%B4%E6%9D%A1%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
    <id>http://wangytbest.github.io/2019/04/09/头条前端面试/</id>
    <published>2019-04-09T07:55:05.000Z</published>
    <updated>2019-04-09T10:32:45.875Z</updated>
    
    <content type="html"><![CDATA[<h2 id="头条前端面试题"><a href="#头条前端面试题" class="headerlink" title="头条前端面试题"></a>头条前端面试题</h2><p>前两天收到头条的面试邀请，抱着试试看的心态面了一次，才发现自己水平有多差。面完后回忆起大部分面试问题，供大家参考一下</p><a id="more"></a><h2 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h2><ol><li><p><code>line-height</code>，区别，rem</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">line-height</span><span class="hljs-selector-pseudo">:26px</span>;</span><br><span class="line"><span class="hljs-selector-tag">line-height</span><span class="hljs-selector-pseudo">:1.5</span>;</span><br><span class="line"><span class="hljs-selector-tag">line-height</span><span class="hljs-selector-pseudo">:150</span>%;</span><br><span class="line"><span class="hljs-selector-tag">line-height</span><span class="hljs-selector-pseudo">:1.5rem</span>;</span><br></pre></td></tr></table></figure></li><li><p><code>setTimeout</code>, <code>requestAnimationFrame</code> 区别，<code>setTimeout</code>没有设置时间的区别</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)</span><br><span class="line">    &#125;, <span class="hljs-number">100</span>);</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);</span><br><span class="line">    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>)</span><br><span class="line">    &#125;, <span class="hljs-number">0</span>)</span><br><span class="line">&#125;, <span class="hljs-number">0</span>)</span><br><span class="line">setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">4</span>)</span><br><span class="line">&#125;, <span class="hljs-number">100</span>);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">5</span>)</span><br></pre></td></tr></table></figure></li><li><p>实现String duplicate</p></li><li>transform: translateZ(0);</li><li><p>输出</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1</span></span><br><span class="line"><span class="hljs-built_in">window</span>.name = <span class="hljs-string">'ByteDance'</span>;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">constructor</span>() &#123;</span><br><span class="line">      <span class="hljs-keyword">this</span>.name = <span class="hljs-number">123</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    getA() &#123; </span><br><span class="line">      <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>);</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.name + <span class="hljs-number">1</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">let</span> a = <span class="hljs-keyword">new</span> A();</span><br><span class="line"><span class="hljs-keyword">let</span> funcA = a.getA;</span><br><span class="line">funcA();</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 2</span></span><br><span class="line"><span class="hljs-keyword">var</span> length = <span class="hljs-number">10</span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="hljs-keyword">this</span>.length);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> obj = &#123;</span><br><span class="line">    length: <span class="hljs-number">5</span>,</span><br><span class="line">    method: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">fn</span>) </span>&#123;</span><br><span class="line">        fn();           <span class="hljs-comment">//?</span></span><br><span class="line">        <span class="hljs-built_in">arguments</span>[<span class="hljs-number">0</span>](); <span class="hljs-comment">//?</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.method(fn);</span><br></pre></td></tr></table></figure></li><li><p>柯理化实现</p></li><li>前端渲染模版实现</li><li>http头部，浏览器怎么判断请求结束<code>content-length</code></li><li>TCP协议介绍</li><li>BFC实现、作用</li><li><code>position</code>的新增属性<figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-number">10</span>:<span class="hljs-number">28</span>:<span class="hljs-number">04</span> 系统: 面试官已经进入<span class="hljs-number">173666</span>号房间</span><br><span class="line"><span class="hljs-number">10</span>:<span class="hljs-number">28</span>:<span class="hljs-number">16</span> 系统: 当前通话配置：高清模式 + 标准通道</span><br><span class="line"><span class="hljs-number">11</span>:<span class="hljs-number">17</span>:<span class="hljs-number">25</span> 系统: 面试官已经离开<span class="hljs-number">173666</span>号房间</span><br></pre></td></tr></table></figure></li></ol><h2 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h2><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><ul><li>window.onload和document.ready的区别</li><li>iframe，如何在页面中改变另一个iframe的样式</li><li>尽可能多的方法隐藏一个html元素</li></ul><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><ul><li>盒模型,IE盒模型和标准盒模型，如何改变</li><li>选择器优先级（内联样式在何处）</li><li>LESS和SCSS的好处</li></ul><h3 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h3><ul><li><p>请为所有数组对象添加一个findDuplicate(n)方法，用于返回该数组中出现频率&gt;=n的元素列表</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>].findDuplicate(<span class="hljs-number">2</span>) =&gt; [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]</span><br><span class="line">[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>].findDuplicate(<span class="hljs-number">5</span>) =&gt; []</span><br><span class="line">[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>].findDuplicate(<span class="hljs-number">-1</span>) =&gt; [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]</span><br></pre></td></tr></table></figure></li><li><p>箭头函数的好处</p></li><li>判断数组</li><li>原型链中prototype和–proto–分别指什么</li><li>require和import的区别</li><li>class实现原理</li><li>async和await实现原理</li><li>node中事件队列模型</li><li>fetch api</li><li>HTTP和HTTPS的区别，如何升级成HTTPS</li><li>如何让网页离线后还能访问</li><li>强缓存和协商缓存</li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>vue中用到的设计模式</li><li>常见的loader和plugin，loader和plugin的区别</li><li>你的简历中有什么亮点，介绍一下</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;头条前端面试题&quot;&gt;&lt;a href=&quot;#头条前端面试题&quot; class=&quot;headerlink&quot; title=&quot;头条前端面试题&quot;&gt;&lt;/a&gt;头条前端面试题&lt;/h2&gt;&lt;p&gt;前两天收到头条的面试邀请，抱着试试看的心态面了一次，才发现自己水平有多差。面完后回忆起大部分面试问题，供大家参考一下&lt;/p&gt;
    
    </summary>
    
      <category term="面试" scheme="http://wangytbest.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="面试" scheme="http://wangytbest.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>cache-control缓存</title>
    <link href="http://wangytbest.github.io/2019/04/09/cache-control%E7%BC%93%E5%AD%98/"/>
    <id>http://wangytbest.github.io/2019/04/09/cache-control缓存/</id>
    <published>2019-04-09T07:53:46.000Z</published>
    <updated>2019-04-09T07:54:19.603Z</updated>
    
    <content type="html"><![CDATA[<p><code>Cache-Control</code>指定了请求和响应遵循的缓存机制。好的缓存机制可以减少对网络带宽的占用，可以提高访问速度，提高用户的体验，还可以减轻服务器的负担。</p><a id="more"></a><h3 id="Cache-Control值类型"><a href="#Cache-Control值类型" class="headerlink" title="Cache-Control值类型"></a>Cache-Control值类型</h3><h4 id="1-请求Request："><a href="#1-请求Request：" class="headerlink" title="(1) 请求Request："></a>(1) 请求Request：</h4><ul><li><code>no-cache</code> 不要读取缓存中的文件，要求向WEB服务器重新请求</li><li><code>no-store</code> 请求和响应都禁止被缓存</li><li><code>max-age</code> 表示当访问此网页后的<code>max-age</code>秒内再次访问不会去服务器请求，其功能与<code>Expires</code>类似，只是<code>Expires</code>是根据某个特定日期值做比较。一但缓存者自身的时间不准确.则结果可能就是错误的，而<code>max-age</code>显然无此问题。<blockquote><p>Max-age的优先级也是高于Expires的。</p></blockquote></li><li><code>max-stale</code> 允许读取过期时间必须小于<code>max-stale</code>值的缓存对象。</li><li><code>min-fresh</code> 接受其<code>max-age</code>生命期大于其当前时间跟<code>min-fresh</code>值之和的缓存对象<code>only-if-cached</code>告知缓存者,我希望内容来自缓存，我并不关心被缓存响应,是否是新鲜的.</li><li><code>no-transform</code> 告知代理,不要更改媒体类型,比如jpg,被你改成png.</li></ul><h4 id="2-响应Response："><a href="#2-响应Response：" class="headerlink" title="(2) 响应Response："></a>(2) 响应Response：</h4><ul><li><code>public</code> 数据内容皆被储存起来，就连有密码保护的网页也储存，安全性很低</li><li><code>private</code> 数据内容只能被储存到私有的cache，仅对某个用户有效，不能共享</li><li><code>no-cache</code> 可以缓存，但是只有在跟WEB服务器验证了其有效后，才能返回给客户端</li><li><code>no-store</code> 请求和响应都禁止被缓存</li><li><code>max-age</code> 本响应包含的对象的过期时间</li><li><code>Must-revalidate</code> 如果缓存过期了，会再次和原来的服务器确定是否为最新数据，而不是和中间的proxy</li><li><code>max-stale</code> 允许读取过期时间必须小于max-stale 值的缓存对象。</li><li><code>proxy-revalidate</code>与Must-revalidate类似，区别在于：proxy-revalidate要排除掉用户代理的缓存的。即其规则并不应用于用户代理的本地缓存上。<br>-maxage 与max-age的唯一区别是,s-maxage仅仅应用于共享缓存.而不应用于用户代理的本地缓存等针对单用户的缓存. 另外,s-maxage的优先级要高于max-age.</li><li><code>no-transform</code> 告知代理,不要更改媒体类型,比如jpg,被你改成png.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Cache-Control&lt;/code&gt;指定了请求和响应遵循的缓存机制。好的缓存机制可以减少对网络带宽的占用，可以提高访问速度，提高用户的体验，还可以减轻服务器的负担。&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://wangytbest.github.io/categories/Javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>圣杯布局（双飞翼布局）</title>
    <link href="http://wangytbest.github.io/2019/04/09/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80%EF%BC%88%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80%EF%BC%89/"/>
    <id>http://wangytbest.github.io/2019/04/09/圣杯布局（双飞翼布局）/</id>
    <published>2019-04-09T07:52:50.000Z</published>
    <updated>2019-04-09T10:07:25.638Z</updated>
    
    <content type="html"><![CDATA[<h2 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h2><p>圣杯布局与双飞翼布局针对的都是三列左右栏固定中间栏边框自适应的网页布局</p><ul><li>三列布局，两边固定宽度，中间自适应</li><li>中间栏要在浏览器优先渲染<br>  <strong>main元素必须是container的第一个元素</strong></li><li>允许任意列的高度最高</li></ul><a id="more"></a><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span></span><br><span class="line">    <span class="hljs-comment">&lt;!--中间栏需要优先渲染--&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"main"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"left"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"right"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1、相对布局"><a href="#1、相对布局" class="headerlink" title="1、相对布局"></a>1、相对布局</h3><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.container</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="line">    <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="hljs-attribute">min-height</span>: <span class="hljs-number">300px</span>;</span><br><span class="line">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">60px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.container</span> &gt; <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">position</span>: relative;</span><br><span class="line">    <span class="hljs-attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.left</span>, <span class="hljs-selector-class">.right</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">width</span>: <span class="hljs-number">60px</span>;</span><br><span class="line">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.left</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">left</span>: -<span class="hljs-number">60px</span>;</span><br><span class="line">    <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.right</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-attribute">margin-right</span>: -<span class="hljs-number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.main</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="line">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、flex布局"><a href="#2、flex布局" class="headerlink" title="2、flex布局"></a>2、flex布局</h3><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.container</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="line">    <span class="hljs-attribute">min-height</span>: <span class="hljs-number">300px</span>;</span><br><span class="line">    <span class="hljs-attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-class">.main</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">flex-grow</span>: <span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-class">.left</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">order</span>: -<span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-attribute">flex-basis</span>: <span class="hljs-number">60px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-class">.right</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">flex-basis</span>: <span class="hljs-number">60px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、绝对布局"><a href="#3、绝对布局" class="headerlink" title="3、绝对布局"></a>3、绝对布局</h3><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.container</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="line">    <span class="hljs-attribute">min-height</span>: <span class="hljs-number">300px</span>;</span><br><span class="line">    <span class="hljs-attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-class">.container</span> &gt; <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-class">.left</span>, <span class="hljs-selector-class">.right</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">width</span>: <span class="hljs-number">60px</span>;</span><br><span class="line">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-class">.main</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">width</span>: <span class="hljs-built_in">calc</span>(100% - 120px);</span><br><span class="line">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="line">    <span class="hljs-attribute">left</span>: <span class="hljs-number">60px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-class">.left</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-class">.right</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;圣杯布局&quot;&gt;&lt;a href=&quot;#圣杯布局&quot; class=&quot;headerlink&quot; title=&quot;圣杯布局&quot;&gt;&lt;/a&gt;圣杯布局&lt;/h2&gt;&lt;p&gt;圣杯布局与双飞翼布局针对的都是三列左右栏固定中间栏边框自适应的网页布局&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;三列布局，两边固定宽度，中间自适应&lt;/li&gt;
&lt;li&gt;中间栏要在浏览器优先渲染&lt;br&gt;  &lt;strong&gt;main元素必须是container的第一个元素&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;允许任意列的高度最高&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://wangytbest.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://wangytbest.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>BFC块级格式化上下文</title>
    <link href="http://wangytbest.github.io/2019/04/09/BFC%E5%9D%97%E7%BA%A7%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
    <id>http://wangytbest.github.io/2019/04/09/BFC块级格式化上下文/</id>
    <published>2019-04-09T07:51:52.000Z</published>
    <updated>2019-04-11T10:30:33.394Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BFC（Block-Formating-Context）"><a href="#BFC（Block-Formating-Context）" class="headerlink" title="BFC（Block Formating Context）"></a>BFC（Block Formating Context）</h2><blockquote><p>块级格式化上下文：一个独立的渲染区域，只有<code>Block-level box</code>参与，它内部规定了<code>Block-level box</code>如何布局，并且与这个区域外部毫不相干。</p></blockquote><p>BFC是Web页面的可视化CSS渲染的一部分，并且有自身的一套渲染规则，它决定了其子元素如何定位，以及和其他元素的关系和相互作用。</p><a id="more"></a><h2 id="CSS有三种基本定位机制"><a href="#CSS有三种基本定位机制" class="headerlink" title="CSS有三种基本定位机制"></a>CSS有三种基本定位机制</h2><ul><li>普通流(或称常规流)：CSS默认的定位方式，触发方式包括为 <code>position: static | relative</code> ，且 <code>float:none</code></li><li>浮动：浮动脱离普通流，可以左右移动，直到它的外边框边缘碰到包含框或另一个浮动框的边缘，触发方式基本就是 <code>float:left | top</code>等。可以通过 <code>position: relative</code> 设置其 <code>top、left</code> 等属性(先进行浮动，在进行位置偏移)。</li><li>绝对定位：盒子脱离普通流，不影响普通流上其他元素的布局，设置float无效。</li></ul><h4 id="BFC布局规则"><a href="#BFC布局规则" class="headerlink" title="BFC布局规则"></a>BFC布局规则</h4><p>具有 BFC 特性的元素可以看成是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且BFC具有普通容器所没有的一些特性。</p><ul><li>内部<code>Box</code>会在垂直方向上一个接一个的放置</li><li><code>Box</code>垂直方向的距离由<code>margin</code>决定。属于同一个<code>BFC</code>的两个相邻<code>Box</code>的<code>margin</code>会合并</li><li>每个元素的<code>margin box</code>的左边，与包含块<code>border box</code>的左边相接触</li><li><code>BFC</code>的区域不会与<code>float box</code>重叠</li><li><code>BFC</code>是一个独立的容器，里面的子元素不会影响到外面的元素，反之亦然</li><li>计算<code>BFC</code>的高度的时候，浮动元素也参与计算</li></ul><h4 id="生成BFC"><a href="#生成BFC" class="headerlink" title="生成BFC"></a>生成BFC</h4><ul><li>根元素</li><li><code>float</code>属性不为<code>none</code></li><li>绝对定位元素（<code>absolute</code>, <code>fixed</code>）</li><li><code>display</code>为<code>inline-block</code>,<code>table-cell</code>,<code>table-caption</code>,<code>flex</code>, <code>grid</code></li><li><code>overflow</code>不为<code>visible</code></li><li><code>flex</code></li><li><code>grid</code></li></ul><h4 id="BFC作用"><a href="#BFC作用" class="headerlink" title="BFC作用"></a>BFC作用</h4><ol><li>自适应两栏布局</li><li>可以阻止元素被浮动元素覆盖</li></ol><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-undefined">.container &#123;</span></span><br><span class="line"><span class="hljs-undefined">  position: relative;</span></span><br><span class="line"><span class="hljs-undefined">&#125;</span></span><br><span class="line"><span class="hljs-undefined">.aside &#123;</span></span><br><span class="line"><span class="hljs-undefined">  width: 100px;</span></span><br><span class="line"><span class="hljs-undefined">  height: 150px;</span></span><br><span class="line"><span class="hljs-undefined">  float: left;</span></span><br><span class="line"><span class="hljs-undefined">  background: #f66;</span></span><br><span class="line"><span class="hljs-undefined">&#125;</span></span><br><span class="line"><span class="hljs-undefined">.main &#123;</span></span><br><span class="line"><span class="hljs-undefined">  height: 200px;</span></span><br><span class="line"><span class="hljs-undefined">  background: #fcc;</span></span><br><span class="line"><span class="hljs-undefined">  overflow: hidden;</span></span><br><span class="line"><span class="hljs-undefined">&#125;</span></span><br><span class="line"><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"aside"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"main"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>main</code>节点如果不设置为<code>BFC</code>，那么根据规则每个元素的<code>margin box</code>的左边，与包含块<code>border box</code>的左边相接触,<code>main</code>将会被<code>aside</code>覆盖。通过<code>overflow:hidden</code>设置为<code>BFC</code>，<code>BFC</code>区域不会和<code>float box</code>重叠。</p><script async src="//jsfiddle.net/wangyutao/tsxvwjh1/15/embed/html,css,result/"></script><ol start="3"><li>可以包含浮动元素——清除内部浮动</li></ol><p>包含浮动元素的父元素，设置 <code>overflow: auto</code> 创建一个新的BFC来包含这个浮动。父元素现在变成布局中的迷你布局，任何子元素都会被包含进去。</p><blockquote><p>面试题：为什会内容环绕呢，而不是跟浮动元素重合呢？<br>《CSS权威指南》中指出，浮动的目的，最初只能用于图像，目的就是为了允许其他内容（如文本）“围绕”该图像。而后来的CSS允许浮动任何元素。</p></blockquote><ol start="4"><li>分属于不同的BFC时可以阻止margin重叠<br>外边距塌陷: 创建新的BFC避免两个相邻<code>&lt;div&gt;</code>之间的外边距合并</li></ol><h2 id="外边距塌陷"><a href="#外边距塌陷" class="headerlink" title="外边距塌陷"></a>外边距塌陷</h2><blockquote><p>外边距折叠：块级元素的上外边距和下外边距有时会合并（或折叠）为一个外边距，其大小取其中的最大者。</p></blockquote><p><strong>注意浮动元素和绝对定位元素的外边距不会折叠</strong>。</p><h4 id="外边距折叠的三种基本情况"><a href="#外边距折叠的三种基本情况" class="headerlink" title="外边距折叠的三种基本情况"></a>外边距折叠的三种基本情况</h4><h5 id="1-相邻元素之间"><a href="#1-相邻元素之间" class="headerlink" title="1. 相邻元素之间"></a>1. 相邻元素之间</h5><p>毗邻的两个元素之间的外边距会折叠（除非后一个元素需要清除之前的浮动）。</p><h5 id="2-父元素与其第一个或最后一个子元素之间"><a href="#2-父元素与其第一个或最后一个子元素之间" class="headerlink" title="2. 父元素与其第一个或最后一个子元素之间"></a>2. 父元素与其第一个或最后一个子元素之间</h5><p>如果在父元素与其第一个子元素之间不存在边框、内边距、行内内容，也没有创建块格式化上下文、或者清除浮动将两者的<code>margin-top</code>分开；或者在父元素与其最后一个子元素之间不存在边框、内边距、行内内容、<code>height</code>、<code>min-height</code>、<code>max-height</code>将两者的<code>margin-bottom</code>分开，那么这两对外边距之间会产生折叠。此时子元素的外边距会“溢出”到父元素的外面。</p><h5 id="3-空的块级元素"><a href="#3-空的块级元素" class="headerlink" title="3.空的块级元素"></a>3.空的块级元素</h5><p>如果一个块级元素中不包含任何内容，并且在其<code>margin-top</code>与<code>margin-bottom</code> 之间没有边框、内边距、行内内容、<code>height</code>、<code>min-height</code>将两者分开，则该元素的上下外边距会折叠。</p><h4 id="一些需要注意的地方："><a href="#一些需要注意的地方：" class="headerlink" title="一些需要注意的地方："></a>一些需要注意的地方：</h4><ul><li>上述情况的组合会产生更复杂的外边距折叠。</li><li>即使某一外边距为0，这些规则仍然适用。因此就算父元素的外边距是0，第* 一个或最后一个子元素的外边距仍然会“溢出”到父元素的外面。</li><li>如果参与折叠的外边距中包含负值，折叠后的外边距的值为最大的正边距与最小的负边距（即绝对值最大的负边距）的和。</li><li>如果所有参与折叠的外边距都为负，折叠后的外边距的值为最小的负边距的值。这一规则适用于相邻元素和嵌套元素。</li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context" target="_blank" rel="noopener">MDN: BFC 块级格式化上下文</a><br><a href="https://www.smashingmagazine.com/2017/12/understanding-css-layout-block-formatting-context/" target="_blank" rel="noopener">Understanding CSS Layout And The Block Formatting Context</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;BFC（Block-Formating-Context）&quot;&gt;&lt;a href=&quot;#BFC（Block-Formating-Context）&quot; class=&quot;headerlink&quot; title=&quot;BFC（Block Formating Context）&quot;&gt;&lt;/a&gt;BFC（Block Formating Context）&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;块级格式化上下文：一个独立的渲染区域，只有&lt;code&gt;Block-level box&lt;/code&gt;参与，它内部规定了&lt;code&gt;Block-level box&lt;/code&gt;如何布局，并且与这个区域外部毫不相干。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;BFC是Web页面的可视化CSS渲染的一部分，并且有自身的一套渲染规则，它决定了其子元素如何定位，以及和其他元素的关系和相互作用。&lt;/p&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://wangytbest.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://wangytbest.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>跨域</title>
    <link href="http://wangytbest.github.io/2019/04/09/%E8%B7%A8%E5%9F%9F/"/>
    <id>http://wangytbest.github.io/2019/04/09/跨域/</id>
    <published>2019-04-09T07:40:08.000Z</published>
    <updated>2019-04-09T07:47:50.421Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是跨域？"><a href="#什么是跨域？" class="headerlink" title="什么是跨域？"></a>什么是跨域？</h3><p>跨域是指一个域下的文档或脚本试图去请求另一个域下的资源，这里跨域是广义的。</p><p>广义的跨域：</p><ol><li>资源跳转： A链接、重定向、表单提交</li><li>资源嵌入： <code>&lt;link&gt;</code>、<code>&lt;script&gt;</code>、<code>&lt;img&gt;</code>、<code>&lt;frame&gt;</code>等dom标签，还有样式中<code>background:url()</code>、<code>@font-face()</code>等文件外链</li><li>脚本请求： js发起的ajax请求、dom和js对象的跨域操作等<br>其实我们通常所说的跨域是狭义的，是由浏览器同源策略限制的一类请求场景。</li></ol><h3 id="什么是同源策略？"><a href="#什么是同源策略？" class="headerlink" title="什么是同源策略？"></a>什么是同源策略？</h3><p>同源策略/<code>SOP（Same origin policy）</code>是一种约定，由Netscape公司1995年引入浏览器，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSFR等攻击。所谓同源是指”协议+域名+端口”三者相同，即便两个不同的域名指向同一个ip地址，也非同源。</p><p>同源策略限制以下几种行为：</p><ol><li>Cookie、LocalStorage 和 IndexDB 无法读取</li><li>DOM 和 Js对象无法获得</li><li>AJAX 请求不能发送</li></ol><a id="more"></a><h2 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h2><blockquote><p>利用 <code>&lt;script&gt;</code> 标签没有跨域限制。</p></blockquote><p>优点：</p><ul><li>兼容性好</li></ul><p>缺点：</p><ul><li>只能用于<code>get</code> 请求</li></ul><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">jsonp</span>(<span class="hljs-params">url, jsonpCallback, success</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> script = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'script'</span>)</span><br><span class="line">  script.src = url</span><br><span class="line">  script.async = <span class="hljs-literal">true</span></span><br><span class="line">  script.type = <span class="hljs-string">'text/javascript'</span></span><br><span class="line">  <span class="hljs-built_in">window</span>[jsonpCallback] = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) </span>&#123;</span><br><span class="line">    success &amp;&amp; success(data)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-built_in">document</span>.body.appendChild(script)</span><br><span class="line">&#125;</span><br><span class="line">jsonp(<span class="hljs-string">'http://xxx'</span>, <span class="hljs-string">'callback'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(value)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h2><blockquote><p>CORS（跨域资源共享）：服务端设置请求头<code>Access-Control-Allow-Origin</code></p></blockquote><p>CORS请求分为两类：</p><ul><li>简单请求</li><li>非简单请求</li></ul><h3 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h3><p>请求方法： </p><ul><li>GET</li><li>POST </li><li>HEAD</li></ul><p>请求头部： </p><ul><li>Accept</li><li>Accept-Content</li><li>Content-Language</li><li>Content-Type：application/x-www-form-urlencoded、multipart/form-data、text/plain</li></ul><blockquote><p>对于简单请求，浏览器直接发出CORS请求，在头信息之中，增加一个<code>Origin</code>字段。</p></blockquote><p><code>Origin</code>字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求。</p><p>如果<code>Origin</code>指定的源，不在许可范围内，服务器会返回一个正常的<code>HTTP</code>回应。浏览器发现，这个回应的头信息没有包含<code>Access-Control-Allow-Origin</code>字段，就知道出错了，从而抛出一个错误，被<code>XMLHttpRequest</code>的<code>onerror</code>回调函数捕获。注意，这种错误无法通过状态码识别，因为HTTP回应的状态码有可能是200。</p><p>如果<code>Origin</code>指定的域名在许可范围内，服务器返回的响应，会多出几个头信息字段。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin: http://api.bob.com</span><br><span class="line">Access-Control-Allow-Credentials: true</span><br><span class="line">Access-Control-Expose-Headers: FooBar</span><br></pre></td></tr></table></figure><p>上面的头信息之中，有三个与CORS请求相关的字段，都以<code>Access-Control-</code>开头。</p><p>（1）<code>Access-Control-Allow-Origin</code></p><p>该字段是必须的。它的值要么是请求时Origin字段的值，要么是一个*，表示接受任意域名的请求。</p><p>（2）<code>Access-Control-Allow-Credentials</code></p><p>该字段可选。它的值是一个布尔值，表示是否允许发送Cookie。默认情况下，Cookie不包括在CORS请求之中。设为true，即表示服务器明确许可，Cookie可以包含在请求中，一起发给服务器。这个值也只能设为true，如果服务器不要浏览器发送Cookie，删除该字段即可。</p><p>（3）<code>Access-Control-Expose-Headers</code></p><p>该字段可选。CORS请求时，XMLHttpRequest对象的<code>getResponseHeader()</code>方法只能拿到6个基本字段：<code>Cache-Control</code>、<code>Content-Language</code>、<code>Content-Type</code>、<code>Expires</code>、<code>Last-Modified</code>、<code>Pragma</code>。如果想拿到其他字段，就必须在<code>Access-Control-Expose-Headers</code>里面指定。上面的例子指定，getResponseHeader(‘FooBar’)可以返回FooBar字段的值</p><h3 id="withCredentials-属性"><a href="#withCredentials-属性" class="headerlink" title="withCredentials 属性"></a>withCredentials 属性</h3><p>CORS请求默认不发送<code>Cookie</code>和<code>HTTP认证信息</code>。如果要把Cookie发到服务器，一方面要服务器同意，指<code>Access-Control-Allow-Credentials</code>字段。<code>Access-Control-Allow-Credentials: true</code><br>另一方面，开发者必须在<code>AJAX</code>请求中打开<code>withCredentials</code>属性。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var xhr = new XMLHttpRequest();</span><br><span class="line">xhr.withCredentials = true;</span><br></pre></td></tr></table></figure><p>否则，即使服务器同意发送Cookie，浏览器也不会发送。或者，服务器要求设置Cookie，浏览器也不会处理。</p><p>需要注意的是，如果要发送Cookie，<code>Access-Control-Allow-Origin</code>就不能设为星号，必须指定明确的、与请求网页一致的域名。同时，Cookie依然遵循同源政策，只有用服务器域名设置的Cookie才会上传，其他域名的Cookie并不会上传，且（跨源）原网页代码中的document.cookie也无法读取服务器域名下的Cookie。</p><h3 id="非简单请求"><a href="#非简单请求" class="headerlink" title="非简单请求"></a>非简单请求</h3><blockquote><p>非简单请求是那种对服务器有特殊要求的请求，比如请求方法是<code>PUT</code>或<code>DELETE</code>，或者<code>Content-Type</code>字段的类型是<code>application/json</code>。(除简单请求就是非简单请求)</p></blockquote><p>浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些HTTP动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的<code>XMLHttpRequest</code>请求，否则就报错。</p><p>下面是一段浏览器的JavaScript脚本。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var url = &apos;http://api.alice.com/cors&apos;;</span><br><span class="line">var xhr = new XMLHttpRequest();</span><br><span class="line">xhr.open(&apos;PUT&apos;, url, true);</span><br><span class="line">xhr.setRequestHeader(&apos;X-Custom-Header&apos;, &apos;value&apos;);</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure><p>上面代码中，HTTP请求的方法是PUT，并且发送一个自定义头信息<code>X-Custom-Header</code>。</p><p>浏览器发现，这是一个非简单请求，就自动发出一个”预检”请求，要求服务器确认可以这样请求。下面是这个”预检”请求的HTTP头信息。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">OPTIONS /cors HTTP/1.1</span><br><span class="line">Origin: http://api.bob.com</span><br><span class="line">Access-Control-Request-Method: PUT</span><br><span class="line">Access-Control-Request-Headers: X-Custom-Header</span><br><span class="line">Host: api.alice.com</span><br><span class="line">Accept-Language: en-US</span><br><span class="line">Connection: keep-alive</span><br><span class="line">User-Agent: Mozilla/5.0...</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">**&quot;预检&quot;请求用的请求方法是`OPTIONS`，表示这个请求是用来询问的。头信息里面，关键字段是`Origin`，表示请求来自哪个源。**</span><br><span class="line"></span><br><span class="line">除了Origin字段，&quot;预检&quot;请求的头信息包括两个特殊字段。</span><br><span class="line"></span><br><span class="line">（1）Access-Control-Request-Method</span><br><span class="line"></span><br><span class="line">该字段是必须的，用来列出浏览器的CORS请求会用到哪些HTTP方法，上例是PUT。</span><br><span class="line"></span><br><span class="line">（2）Access-Control-Request-Headers</span><br><span class="line"></span><br><span class="line">该字段是一个逗号分隔的字符串，指定浏览器CORS请求会额外发送的头信息字段，上例是X-Custom-Header。</span><br><span class="line"></span><br><span class="line">4.2 预检请求的回应</span><br><span class="line">服务器收到&quot;预检&quot;请求以后，检查了Origin、Access-Control-Request-Method和Access-Control-Request-Headers字段以后，确认允许跨源请求，就可以做出回应。</span><br><span class="line"></span><br><span class="line">```JS</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Mon, 01 Dec 2008 01:15:39 GMT</span><br><span class="line">Server: Apache/2.0.61 (Unix)</span><br><span class="line">Access-Control-Allow-Origin: http://api.bob.com</span><br><span class="line">Access-Control-Allow-Methods: GET, POST, PUT</span><br><span class="line">Access-Control-Allow-Headers: X-Custom-Header</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">Content-Encoding: gzip</span><br><span class="line">Content-Length: 0</span><br><span class="line">Keep-Alive: timeout=2, max=100</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Type: text/plain</span><br></pre></td></tr></table></figure><p>上面的HTTP回应中，关键的是<code>Access-Control-Allow-Origin</code>字段，表示<code>http://api.bob.com</code>可以请求数据。该字段也可以设为星号，表示同意任意跨源请求。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin: *</span><br></pre></td></tr></table></figure><p>如果浏览器否定了”预检”请求，会返回一个正常的HTTP回应，但是没有任何CORS相关的头信息字段。这时，浏览器就会认定，服务器不同意预检请求，因此触发一个错误，被XMLHttpRequest对象的onerror回调函数捕获。控制台会打印出如下的报错信息。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">XMLHttpRequest cannot load http://api.alice.com.</span><br><span class="line">Origin http://api.bob.com is not allowed by Access-Control-Allow-Origin.</span><br></pre></td></tr></table></figure><p>服务器回应的其他CORS相关字段如下。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Methods: GET, POST, PUT</span><br><span class="line">Access-Control-Allow-Headers: X-Custom-Header</span><br><span class="line">Access-Control-Allow-Credentials: true</span><br><span class="line">Access-Control-Max-Age: 1728000</span><br></pre></td></tr></table></figure><p>（1）Access-Control-Allow-Methods</p><p>该字段必需，它的值是逗号分隔的一个字符串，表明服务器支持的所有跨域请求的方法。注意，返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次”预检”请求。</p><p>（2）Access-Control-Allow-Headers</p><p>如果浏览器请求包括Access-Control-Request-Headers字段，则Access-Control-Allow-Headers字段是必需的。它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段，不限于浏览器在”预检”中请求的字段。</p><p>（3）Access-Control-Allow-Credentials</p><p>该字段与简单请求时的含义相同。</p><p>（4）Access-Control-Max-Age</p><p>该字段可选，用来指定本次预检请求的有效期，单位为秒。上面结果中，有效期是20天（1728000秒），即允许缓存该条回应1728000秒（即20天），在此期间，不用发出另一条预检请求。</p><p>4.3 浏览器的正常请求和回应<br>一旦服务器通过了”预检”请求，以后每次浏览器正常的CORS请求，就都跟简单请求一样，会有一个Origin头信息字段。服务器的回应，也都会有一个Access-Control-Allow-Origin头信息字段。</p><p>下面是”预检”请求之后，浏览器的正常CORS请求。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PUT /cors HTTP/1.1</span><br><span class="line">Origin: http://api.bob.com</span><br><span class="line">Host: api.alice.com</span><br><span class="line">X-Custom-Header: value</span><br><span class="line">Accept-Language: en-US</span><br><span class="line">Connection: keep-alive</span><br><span class="line">User-Agent: Mozilla/5.0...</span><br></pre></td></tr></table></figure><p>上面头信息的Origin字段是浏览器自动添加的。</p><p>下面是服务器正常的回应。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin: http://api.bob.com</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br></pre></td></tr></table></figure><p>上面头信息中，Access-Control-Allow-Origin字段是每次回应都必定包含的。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是跨域？&quot;&gt;&lt;a href=&quot;#什么是跨域？&quot; class=&quot;headerlink&quot; title=&quot;什么是跨域？&quot;&gt;&lt;/a&gt;什么是跨域？&lt;/h3&gt;&lt;p&gt;跨域是指一个域下的文档或脚本试图去请求另一个域下的资源，这里跨域是广义的。&lt;/p&gt;
&lt;p&gt;广义的跨域：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;资源跳转： A链接、重定向、表单提交&lt;/li&gt;
&lt;li&gt;资源嵌入： &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;frame&amp;gt;&lt;/code&gt;等dom标签，还有样式中&lt;code&gt;background:url()&lt;/code&gt;、&lt;code&gt;@font-face()&lt;/code&gt;等文件外链&lt;/li&gt;
&lt;li&gt;脚本请求： js发起的ajax请求、dom和js对象的跨域操作等&lt;br&gt;其实我们通常所说的跨域是狭义的，是由浏览器同源策略限制的一类请求场景。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;什么是同源策略？&quot;&gt;&lt;a href=&quot;#什么是同源策略？&quot; class=&quot;headerlink&quot; title=&quot;什么是同源策略？&quot;&gt;&lt;/a&gt;什么是同源策略？&lt;/h3&gt;&lt;p&gt;同源策略/&lt;code&gt;SOP（Same origin policy）&lt;/code&gt;是一种约定，由Netscape公司1995年引入浏览器，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSFR等攻击。所谓同源是指”协议+域名+端口”三者相同，即便两个不同的域名指向同一个ip地址，也非同源。&lt;/p&gt;
&lt;p&gt;同源策略限制以下几种行为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Cookie、LocalStorage 和 IndexDB 无法读取&lt;/li&gt;
&lt;li&gt;DOM 和 Js对象无法获得&lt;/li&gt;
&lt;li&gt;AJAX 请求不能发送&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>webpack插件关于autoprefixer的冲突</title>
    <link href="http://wangytbest.github.io/2018/08/27/webpack-%E6%8F%92%E4%BB%B6%E5%85%B3%E4%BA%8Eautoprefixer%E7%9A%84%E5%86%B2%E7%AA%81/"/>
    <id>http://wangytbest.github.io/2018/08/27/webpack-插件关于autoprefixer的冲突/</id>
    <published>2018-08-27T03:15:54.000Z</published>
    <updated>2019-04-09T07:49:39.455Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-实际遇到的问题"><a href="#1-实际遇到的问题" class="headerlink" title="1. 实际遇到的问题"></a>1. 实际遇到的问题</h3><p>项目中经常会遇到css的一些奇怪问题，有些css属性的设置在在本地编译运行的时候是好的，但是打包上线之后这个属性就平白无故的没有了？</p><p>具体场景<br>在处理多行文本溢出时，需要使用<code>-webkit-box-orient: vertial</code>，在本地开发测试一切正常，但是在webpack编译之后，检查样式并没有这个属性，其他的属性都有。</p><a id="more"></a><figure class="highlight scss hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 多行文本</span></span><br><span class="line">@<span class="hljs-keyword">mixin</span> textmultiline(<span class="hljs-variable">$line</span>:<span class="hljs-number">2</span>) &#123;</span><br><span class="line">  <span class="hljs-attribute">display</span>: -webkit-box;</span><br><span class="line">  <span class="hljs-comment">/* autoprefixer: off*/</span></span><br><span class="line">  -webkit-box-orient: vertical;</span><br><span class="line">  <span class="hljs-comment">/* autoprefixer: on*/</span></span><br><span class="line">  -webkit-line-clamp: <span class="hljs-variable">$line</span>;</span><br><span class="line">  <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="hljs-attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-为什么啊？"><a href="#2-为什么啊？" class="headerlink" title="2. 为什么啊？"></a>2. 为什么啊？</h3><ol><li><p><a href="https://github.com/cssnano/cssnano/issues/357" target="_blank" rel="noopener">why remove -webkit-box-orient property? #357</a></p></li><li><p><a href="https://github.com/cssnano/cssnano/issues/252" target="_blank" rel="noopener">Autoprefixer setting should be false by default #252</a></p></li></ol><p>原因：<br>  autoprefixer自动的删除了一些它觉得没有必要的属性，所以解决办法就是设autoprefixer为false，或者针对某个属性忽autoprefixer</p><h3 id="3-怎么办"><a href="#3-怎么办" class="headerlink" title="3. 怎么办"></a>3. 怎么办</h3><ol><li><p>属性忽略<code>autoprefixer</code></p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// eslint-disable-next-line</span><br><span class="line"><span class="hljs-comment">/* autoprefixer: off*/</span></span><br><span class="line"><span class="hljs-selector-tag">-webkit-box-orient</span>: <span class="hljs-selector-tag">vertical</span>;</span><br><span class="line"><span class="hljs-comment">/* autoprefixer: on*/</span></span><br></pre></td></tr></table></figure></li><li><p>关闭<code>cssnano</code>的<code>autoprefixer</code></p></li></ol><blockquote><p>just remove the postcss config in vue-loader’s config</p></blockquote><p>Add the following option to prevent autoprefixer from removing prefixes (<strong>for cssnano v3 only</strong>):</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  autoprefixer: &#123;</span><br><span class="line">    remove: false</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then -webkit-box-orient will be preserved.</p><ol start="3"><li><code>optimize-css-assets-webpack-plugin</code> 插件问题</li></ol><figure class="highlight cs hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">new</span> OptimizeCSSPlugin(&#123;</span><br><span class="line">  cssProcessorOptions: config.build.productionSourceMap</span><br><span class="line">    ? &#123; safe: <span class="hljs-literal">true</span>, map: &#123; inline: <span class="hljs-literal">false</span> &#125; &#125;</span><br><span class="line">    : &#123; safe: <span class="hljs-literal">true</span> &#125;</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-实际遇到的问题&quot;&gt;&lt;a href=&quot;#1-实际遇到的问题&quot; class=&quot;headerlink&quot; title=&quot;1. 实际遇到的问题&quot;&gt;&lt;/a&gt;1. 实际遇到的问题&lt;/h3&gt;&lt;p&gt;项目中经常会遇到css的一些奇怪问题，有些css属性的设置在在本地编译运行的时候是好的，但是打包上线之后这个属性就平白无故的没有了？&lt;/p&gt;
&lt;p&gt;具体场景&lt;br&gt;在处理多行文本溢出时，需要使用&lt;code&gt;-webkit-box-orient: vertial&lt;/code&gt;，在本地开发测试一切正常，但是在webpack编译之后，检查样式并没有这个属性，其他的属性都有。&lt;/p&gt;
    
    </summary>
    
      <category term="webpack" scheme="http://wangytbest.github.io/categories/webpack/"/>
    
    
      <category term="webpack" scheme="http://wangytbest.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>URL操作处理</title>
    <link href="http://wangytbest.github.io/2018/05/30/URL%E6%93%8D%E4%BD%9C%E5%A4%84%E7%90%86/"/>
    <id>http://wangytbest.github.io/2018/05/30/URL操作处理/</id>
    <published>2018-05-30T07:02:33.000Z</published>
    <updated>2019-04-09T06:59:54.514Z</updated>
    
    <content type="html"><![CDATA[<p>URL<br><a id="more"></a><br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * URL模块</span></span><br><span class="line"><span class="hljs-comment"> * @param  &#123;[type]&#125; require [description]</span></span><br><span class="line"><span class="hljs-comment"> * @param  &#123;[type]&#125; exports [description]</span></span><br><span class="line"><span class="hljs-comment"> * @param  &#123;[type]&#125; module  [description]</span></span><br><span class="line"><span class="hljs-comment"> * @return &#123;[type]&#125;         [description]</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line">define(<span class="hljs-string">'url'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">require, exports, module</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> _cacheThisModule_;</span><br><span class="line">    <span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">        <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">         * 设置hash</span></span><br><span class="line"><span class="hljs-comment">         * @param name</span></span><br><span class="line"><span class="hljs-comment">         */</span></span><br><span class="line">        setHash: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">name</span>) </span>&#123;</span><br><span class="line">            setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                location.hash = name;</span><br><span class="line">            &#125;, <span class="hljs-number">0</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">         * 获取当前url中的hash值</span></span><br><span class="line"><span class="hljs-comment">         * @param url</span></span><br><span class="line"><span class="hljs-comment">         * @return String</span></span><br><span class="line"><span class="hljs-comment">         */</span></span><br><span class="line">        getHash: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">url</span>) </span>&#123;</span><br><span class="line">            <span class="hljs-keyword">var</span> u = url || location.hash;</span><br><span class="line">            <span class="hljs-keyword">return</span> u ? u.replace(<span class="hljs-regexp">/.*#/</span>, <span class="hljs-string">""</span>) : <span class="hljs-string">""</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">         *根据hash获取对应的模块名</span></span><br><span class="line"><span class="hljs-comment">         */</span></span><br><span class="line">        getHashModelName: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            <span class="hljs-keyword">var</span> hash = <span class="hljs-keyword">this</span>.getHash();</span><br><span class="line">            <span class="hljs-keyword">return</span> (hash ? hash.split(<span class="hljs-string">"&amp;"</span>)[<span class="hljs-number">0</span>].split(<span class="hljs-string">"="</span>)[<span class="hljs-number">0</span>] : []);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">         *从hash中获取action</span></span><br><span class="line"><span class="hljs-comment">         */</span></span><br><span class="line">        getHashActionName: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            <span class="hljs-keyword">var</span> hash = <span class="hljs-keyword">this</span>.getHash();</span><br><span class="line">            <span class="hljs-keyword">if</span> (hash == <span class="hljs-string">""</span>)<span class="hljs-keyword">return</span> <span class="hljs-string">""</span>;</span><br><span class="line">            <span class="hljs-keyword">return</span> (hash ? hash.split(<span class="hljs-string">"&amp;"</span>) : [])[<span class="hljs-number">0</span>].split(<span class="hljs-string">"="</span>)[<span class="hljs-number">1</span>];</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">         * 从hash中获取name对应的值</span></span><br><span class="line"><span class="hljs-comment">         */</span></span><br><span class="line">        getHashParam: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">name</span>) </span>&#123;</span><br><span class="line">            <span class="hljs-keyword">var</span> result = <span class="hljs-keyword">this</span>.getHash().match(<span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">"(^|&amp;)"</span> + name + <span class="hljs-string">"=([^&amp;]*)(&amp;|$)"</span>));</span><br><span class="line">            <span class="hljs-keyword">return</span> result != <span class="hljs-literal">null</span> ? result[<span class="hljs-number">2</span>] : <span class="hljs-string">""</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">         *从URL中获取参数对应的值</span></span><br><span class="line"><span class="hljs-comment">         */</span></span><br><span class="line">        getUrlParam: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">name, url</span>) </span>&#123;</span><br><span class="line">            <span class="hljs-comment">//参数：变量名，url为空则表从当前页面的url中取</span></span><br><span class="line">            <span class="hljs-keyword">var</span> u = <span class="hljs-built_in">arguments</span>[<span class="hljs-number">1</span>] || <span class="hljs-built_in">window</span>.location.search,</span><br><span class="line">                reg = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">"(^|&amp;)"</span> + name + <span class="hljs-string">"=([^&amp;]*)(&amp;|$)"</span>, <span class="hljs-string">'i'</span>),</span><br><span class="line">                r = u.substr(u.indexOf(<span class="hljs-string">"\?"</span>) + <span class="hljs-number">1</span>).match(reg);</span><br><span class="line">            <span class="hljs-keyword">return</span> r != <span class="hljs-literal">null</span> ? r[<span class="hljs-number">2</span>] : <span class="hljs-string">""</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">         *获取所有HASH的参数，剔除model.</span></span><br><span class="line"><span class="hljs-comment">         */</span></span><br><span class="line">        getParams: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            <span class="hljs-keyword">var</span> param = [],</span><br><span class="line">                hash = <span class="hljs-keyword">this</span>.getHash();</span><br><span class="line">            paramArr = hash ? hash.split(<span class="hljs-string">"&amp;"</span>) : [];</span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>, l = paramArr.length; i &lt; l; i++) &#123;</span><br><span class="line">                param.push(paramArr[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">return</span> param;</span><br><span class="line">        &#125;,</span><br><span class="line">        decodeUrl: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">url</span>) </span>&#123;</span><br><span class="line">            url = <span class="hljs-built_in">decodeURIComponent</span>(url);</span><br><span class="line">            <span class="hljs-keyword">var</span> urlObj = <span class="hljs-keyword">this</span>.parseUrl(url), decodedParam = [];</span><br><span class="line">            $.each(urlObj.params, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">key, value</span>) </span>&#123;</span><br><span class="line">                value = <span class="hljs-built_in">decodeURIComponent</span>(value);</span><br><span class="line">                decodedParam.push(key + <span class="hljs-string">"="</span> + value);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="hljs-keyword">var</span> urlPrefix = url.split(<span class="hljs-string">"?"</span>)[<span class="hljs-number">0</span>];</span><br><span class="line">            <span class="hljs-keyword">return</span> urlPrefix + <span class="hljs-string">"?"</span> + decodedParam.join(<span class="hljs-string">"&amp;"</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        parseUrl: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">url</span>) </span>&#123;</span><br><span class="line">            <span class="hljs-keyword">var</span> a = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'a'</span>);</span><br><span class="line">            a.href = url;</span><br><span class="line">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="line">                source: url,</span><br><span class="line">                protocol: a.protocol.replace(<span class="hljs-string">':'</span>, <span class="hljs-string">''</span>),</span><br><span class="line">                host: a.hostname,</span><br><span class="line">                port: a.port,</span><br><span class="line">                query: a.search,</span><br><span class="line">                params: (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                    <span class="hljs-keyword">var</span> ret = &#123;&#125;,</span><br><span class="line">                        seg = a.search.replace(<span class="hljs-regexp">/^\?/</span>, <span class="hljs-string">''</span>).split(<span class="hljs-string">'&amp;'</span>),</span><br><span class="line">                        len = seg.length, i = <span class="hljs-number">0</span>, s;</span><br><span class="line">                    <span class="hljs-keyword">for</span> (; i &lt; len; i++) &#123;</span><br><span class="line">                        <span class="hljs-keyword">if</span> (!seg[i]) &#123;</span><br><span class="line">                            <span class="hljs-keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        s = seg[i].split(<span class="hljs-string">'='</span>);</span><br><span class="line">                        ret[s[<span class="hljs-number">0</span>]] = s[<span class="hljs-number">1</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="hljs-keyword">return</span> ret;</span><br><span class="line">                &#125;)(),</span><br><span class="line">                file: (a.pathname.match(<span class="hljs-regexp">/([^\/?#]+)$/i</span>) || [, <span class="hljs-string">''</span>])[<span class="hljs-number">1</span>],</span><br><span class="line">                hash: a.hash.replace(<span class="hljs-string">'#'</span>, <span class="hljs-string">''</span>),</span><br><span class="line">                path: a.pathname.replace(<span class="hljs-regexp">/^([^\/])/</span>, <span class="hljs-string">'/$1'</span>),</span><br><span class="line">                relative: (a.href.match(<span class="hljs-regexp">/tps?:\/\/[^\/]+(.+)/</span>) || [, <span class="hljs-string">''</span>])[<span class="hljs-number">1</span>],</span><br><span class="line">                segments: a.pathname.replace(<span class="hljs-regexp">/^\//</span>, <span class="hljs-string">''</span>).split(<span class="hljs-string">'/'</span>)</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        replaceParam: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">param, value, url, forceReplace</span>) </span>&#123;</span><br><span class="line">            url = url || location.href;</span><br><span class="line">            <span class="hljs-keyword">var</span> reg = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">"([\\?&amp;]"</span> + param + <span class="hljs-string">"=)[^&amp;#]*"</span>);</span><br><span class="line">            <span class="hljs-keyword">if</span> (!url.match(reg)) &#123;</span><br><span class="line">                <span class="hljs-keyword">return</span> (url.indexOf(<span class="hljs-string">"?"</span>) == <span class="hljs-number">-1</span>) ? (url + <span class="hljs-string">"?"</span> + param + <span class="hljs-string">"="</span> + value) : (url + <span class="hljs-string">"&amp;"</span> + param + <span class="hljs-string">"="</span> + value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">if</span> (forceReplace) &#123;</span><br><span class="line">                <span class="hljs-keyword">return</span> url.replace(reg, <span class="hljs-string">"$1"</span> + value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">return</span> url;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;URL&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://wangytbest.github.io/categories/Javascript/"/>
    
      <category term="util" scheme="http://wangytbest.github.io/categories/Javascript/util/"/>
    
    
  </entry>
  
  <entry>
    <title>localstroge本地缓存</title>
    <link href="http://wangytbest.github.io/2018/05/30/localstroge%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98/"/>
    <id>http://wangytbest.github.io/2018/05/30/localstroge本地缓存/</id>
    <published>2018-05-30T07:01:25.000Z</published>
    <updated>2019-04-09T07:02:46.230Z</updated>
    
    <content type="html"><![CDATA[<p>localStorage设置过期时间<br><a id="more"></a><br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="hljs-string">"localStorage"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">require, exports, module</span>)</span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> cache = <span class="hljs-built_in">require</span>(<span class="hljs-string">"cachev1"</span>).local;</span><br><span class="line">    <span class="hljs-keyword">var</span> <span class="hljs-built_in">Promise</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">"promise.min"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 将过期时间字符串转换成时间戳</span></span><br><span class="line"><span class="hljs-comment">     *  convertExpire("7d")</span></span><br><span class="line"><span class="hljs-comment">     *  convertExpire(3600)  1小时</span></span><br><span class="line"><span class="hljs-comment">     * @param  &#123;String&#125; val  过期时间，格式为`\d+[smhd]`，其中s 表示秒、m 分钟、h 小时、d 天，如 30d   默认是秒</span></span><br><span class="line"><span class="hljs-comment">     * @return &#123;Number&#125;      时间戳（单位s）</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">convertExpire</span>(<span class="hljs-params">val</span>) </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (!val) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">var</span> matches = (<span class="hljs-string">''</span> + val).match(<span class="hljs-regexp">/(\d+)([smhd])/</span>);</span><br><span class="line">        <span class="hljs-keyword">var</span> ms = <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> (matches) &#123;</span><br><span class="line">            <span class="hljs-keyword">switch</span> (matches[<span class="hljs-number">2</span>]) &#123;</span><br><span class="line">                <span class="hljs-keyword">case</span> <span class="hljs-string">'s'</span>:</span><br><span class="line">                    ms = matches[<span class="hljs-number">1</span>];</span><br><span class="line">                    <span class="hljs-keyword">break</span>;</span><br><span class="line">                <span class="hljs-keyword">case</span> <span class="hljs-string">'m'</span>:</span><br><span class="line">                    ms = matches[<span class="hljs-number">1</span>] * <span class="hljs-number">60</span>;</span><br><span class="line">                    <span class="hljs-keyword">break</span>;</span><br><span class="line">                <span class="hljs-keyword">case</span> <span class="hljs-string">'h'</span>:</span><br><span class="line">                    ms = matches[<span class="hljs-number">1</span>] * <span class="hljs-number">60</span> * <span class="hljs-number">60</span>;</span><br><span class="line">                    <span class="hljs-keyword">break</span>;</span><br><span class="line">                <span class="hljs-keyword">case</span> <span class="hljs-string">'d'</span>:</span><br><span class="line">                    ms = matches[<span class="hljs-number">1</span>] * <span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span>&#123;</span><br><span class="line">            ms = val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> ms;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">var</span> timeout = setTimeout;</span><br><span class="line">    <span class="hljs-keyword">var</span> storage = &#123;</span><br><span class="line">        <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">         * 将数据写入本地缓存</span></span><br><span class="line"><span class="hljs-comment">         *</span></span><br><span class="line"><span class="hljs-comment">         * @param  &#123;String&#125;          key      键名</span></span><br><span class="line"><span class="hljs-comment">         * @param  &#123;Object | String&#125; value    数据</span></span><br><span class="line"><span class="hljs-comment">         * @param  &#123;Object&#125;          options  可选项，可传expire 设定数据过期时间，格式参见convertExpire</span></span><br><span class="line"><span class="hljs-comment">         *</span></span><br><span class="line"><span class="hljs-comment">         * @return &#123;Promise&#125;         Promise实例</span></span><br><span class="line"><span class="hljs-comment">         */</span></span><br><span class="line">        <span class="hljs-keyword">set</span>:function(key, value, options) &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>)</span>&#123;</span><br><span class="line">                <span class="hljs-keyword">var</span> expire = convertExpire(<span class="hljs-keyword">typeof</span> options == <span class="hljs-string">'object'</span> &amp;&amp; options.expire ? options.expire : <span class="hljs-string">'7d'</span>);</span><br><span class="line">                timeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                    cache.setItem(key,value,expire,<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">ret</span>) </span>&#123;</span><br><span class="line">                        <span class="hljs-keyword">if</span>(ret==<span class="hljs-number">0</span>) resolve();</span><br><span class="line">                        <span class="hljs-keyword">else</span> reject();</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">         * 获取本地缓存数据，当数据已过期时会被清理掉</span></span><br><span class="line"><span class="hljs-comment">         *</span></span><br><span class="line"><span class="hljs-comment">         * @param  &#123;String&#125;  key         键名</span></span><br><span class="line"><span class="hljs-comment">         * @param  &#123;Mix&#125;     defaultVal  如设置了默认值，则保证不会被reject</span></span><br><span class="line"><span class="hljs-comment">         *</span></span><br><span class="line"><span class="hljs-comment">         * @return &#123;Promise&#125;      Promise实例</span></span><br><span class="line"><span class="hljs-comment">         */</span></span><br><span class="line">        <span class="hljs-keyword">get</span>:function(key, defaultVal) &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>)</span>&#123;</span><br><span class="line">                timeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                    <span class="hljs-keyword">var</span> value = cache.getItem(key);</span><br><span class="line">                    <span class="hljs-keyword">if</span>(value===<span class="hljs-string">""</span>||value===<span class="hljs-literal">null</span>)&#123;</span><br><span class="line">                        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> defaultVal!=<span class="hljs-string">"undefined"</span>)&#123;</span><br><span class="line">                            resolve(defaultVal);</span><br><span class="line">                        &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="line">                            reject();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="hljs-keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    resolve(value);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">         * 移除本地缓存数据</span></span><br><span class="line"><span class="hljs-comment">         */</span></span><br><span class="line">        remove:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">key</span>) </span>&#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>)</span>&#123;</span><br><span class="line">                timeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                    cache.removeItem(key);</span><br><span class="line">                    resolve();</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">         * 同步地设置本地缓存数据</span></span><br><span class="line"><span class="hljs-comment">         *</span></span><br><span class="line"><span class="hljs-comment">         * @deprecated 此方法只为了暂时兼容旧接口，会极大的影响性，能请勿使用！</span></span><br><span class="line"><span class="hljs-comment">         */</span></span><br><span class="line">        setSync:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">key, value, options</span>) </span>&#123;</span><br><span class="line">            <span class="hljs-keyword">var</span> expire = convertExpire(<span class="hljs-keyword">typeof</span> options == <span class="hljs-string">'object'</span> &amp;&amp; options.expire ? options.expire : <span class="hljs-string">'7d'</span>)</span><br><span class="line">            cache.setItem(key,value,expire);</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">         * 同步地获取本地缓存数据，当数据已过期时会被清理掉</span></span><br><span class="line"><span class="hljs-comment">         *</span></span><br><span class="line"><span class="hljs-comment">         * @deprecated 此方法只为了暂时兼容旧接口，会极大的影响性，能请勿使用！</span></span><br><span class="line"><span class="hljs-comment">         */</span></span><br><span class="line">        getSync:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">key</span>) </span>&#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> cache.getItem(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="hljs-built_in">module</span>.exports = storage;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;localStorage设置过期时间&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://wangytbest.github.io/categories/Javascript/"/>
    
      <category term="util" scheme="http://wangytbest.github.io/categories/Javascript/util/"/>
    
    
  </entry>
  
  <entry>
    <title>时间处理</title>
    <link href="http://wangytbest.github.io/2018/05/30/%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86/"/>
    <id>http://wangytbest.github.io/2018/05/30/时间处理/</id>
    <published>2018-05-30T06:58:34.000Z</published>
    <updated>2019-04-09T06:57:25.715Z</updated>
    
    <content type="html"><![CDATA[<p>时间处理方法</p> <a id="more"></a><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="hljs-string">"date"</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">require,exports,module</span>)</span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> _cacheThisModule_;</span><br><span class="line">    exports.format = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">date,formatStr</span>)</span>&#123;</span><br><span class="line"><span class="hljs-comment">//格式化时间</span></span><br><span class="line"><span class="hljs-keyword">var</span>arrWeek=[<span class="hljs-string">'日'</span>,<span class="hljs-string">'一'</span>,<span class="hljs-string">'二'</span>,<span class="hljs-string">'三'</span>,<span class="hljs-string">'四'</span>,<span class="hljs-string">'五'</span>,<span class="hljs-string">'六'</span>],</span><br><span class="line">str=formatStr</span><br><span class="line">.replace(<span class="hljs-regexp">/yyyy|YYYY/</span>,date.getFullYear())</span><br><span class="line">.replace(<span class="hljs-regexp">/yy|YY/</span>,$addZero(date.getFullYear() % <span class="hljs-number">100</span>,<span class="hljs-number">2</span>))</span><br><span class="line">.replace(<span class="hljs-regexp">/mm|MM/</span>,$addZero(date.getMonth()+<span class="hljs-number">1</span>,<span class="hljs-number">2</span>))</span><br><span class="line">.replace(<span class="hljs-regexp">/m|M/g</span>,date.getMonth()+<span class="hljs-number">1</span>)</span><br><span class="line">.replace(<span class="hljs-regexp">/dd|DD/</span>,$addZero(date.getDate(),<span class="hljs-number">2</span>))</span><br><span class="line">.replace(<span class="hljs-regexp">/d|D/g</span>,date.getDate())</span><br><span class="line">.replace(<span class="hljs-regexp">/hh|HH/</span>,$addZero(date.getHours(),<span class="hljs-number">2</span>))</span><br><span class="line">.replace(<span class="hljs-regexp">/h|H/g</span>,date.getHours())</span><br><span class="line">.replace(<span class="hljs-regexp">/ii|II/</span>,$addZero(date.getMinutes(),<span class="hljs-number">2</span>))</span><br><span class="line">.replace(<span class="hljs-regexp">/i|I/g</span>,date.getMinutes())</span><br><span class="line">.replace(<span class="hljs-regexp">/ss|SS/</span>,$addZero(date.getSeconds(),<span class="hljs-number">2</span>))</span><br><span class="line">.replace(<span class="hljs-regexp">/s|S/g</span>,date.getSeconds())</span><br><span class="line">.replace(<span class="hljs-regexp">/w/g</span>,date.getDay())</span><br><span class="line">.replace(<span class="hljs-regexp">/W/g</span>,arrWeek[date.getDay()]); </span><br><span class="line"><span class="hljs-keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.getTimeDistance = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">ts</span>)</span>&#123;</span><br><span class="line"><span class="hljs-comment">//根据时间差计算剩余的时间，返回[天，小时，分，秒]</span></span><br><span class="line"><span class="hljs-keyword">var</span> timeLeft=[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>];<span class="hljs-comment">//结构：天、小时、分、秒</span></span><br><span class="line">timeLeft[<span class="hljs-number">0</span>]=(ts&gt;<span class="hljs-number">86400</span>)?<span class="hljs-built_in">parseInt</span>(ts/<span class="hljs-number">86400</span>):<span class="hljs-number">0</span>;</span><br><span class="line">ts=ts - timeLeft[<span class="hljs-number">0</span>] * <span class="hljs-number">86400</span>;</span><br><span class="line">timeLeft[<span class="hljs-number">1</span>]=(ts&gt;<span class="hljs-number">3600</span>)?<span class="hljs-built_in">parseInt</span>(ts/<span class="hljs-number">3600</span>):<span class="hljs-number">0</span>;</span><br><span class="line">ts=ts - timeLeft[<span class="hljs-number">1</span>] * <span class="hljs-number">3600</span>;</span><br><span class="line">timeLeft[<span class="hljs-number">2</span>]=(ts&gt;<span class="hljs-number">60</span>)?<span class="hljs-built_in">parseInt</span>(ts/<span class="hljs-number">60</span>):<span class="hljs-number">0</span>;</span><br><span class="line">timeLeft[<span class="hljs-number">3</span>]=ts - timeLeft[<span class="hljs-number">2</span>] * <span class="hljs-number">60</span>;</span><br><span class="line"><span class="hljs-keyword">return</span> timeLeft;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">exports.getTimeInterval = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">st,et</span>)</span>&#123;</span><br><span class="line"><span class="hljs-comment">//返回两个时间之间的间隔的描述字符串</span></span><br><span class="line"><span class="hljs-keyword">var</span> dateLeft = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> hourLeft = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> minuteLeft = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> secondLeft = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> timeLeft=[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>];<span class="hljs-comment">//结构：天、小时、分、秒</span></span><br><span class="line"><span class="hljs-keyword">var</span> timeStr=<span class="hljs-string">""</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> ts=(et&gt;st)?<span class="hljs-built_in">parseInt</span>((et-st)/<span class="hljs-number">1000</span>):<span class="hljs-number">0</span>;</span><br><span class="line">timeLeft[<span class="hljs-number">0</span>]=(ts&gt;<span class="hljs-number">86400</span>)?<span class="hljs-built_in">parseInt</span>(ts/<span class="hljs-number">86400</span>):<span class="hljs-number">0</span>;</span><br><span class="line">ts=ts - timeLeft[<span class="hljs-number">0</span>] * <span class="hljs-number">86400</span>;</span><br><span class="line">timeLeft[<span class="hljs-number">1</span>]=(ts&gt;<span class="hljs-number">3600</span>)?<span class="hljs-built_in">parseInt</span>(ts/<span class="hljs-number">3600</span>):<span class="hljs-number">0</span>;</span><br><span class="line">ts=ts - timeLeft[<span class="hljs-number">1</span>] * <span class="hljs-number">3600</span>;</span><br><span class="line">timeLeft[<span class="hljs-number">2</span>]=(ts&gt;<span class="hljs-number">60</span>)?<span class="hljs-built_in">parseInt</span>(ts/<span class="hljs-number">60</span>):<span class="hljs-number">0</span>;</span><br><span class="line">timeLeft[<span class="hljs-number">3</span>]=ts - timeLeft[<span class="hljs-number">2</span>] * <span class="hljs-number">60</span>;</span><br><span class="line">timeStr=(timeLeft[<span class="hljs-number">0</span>]&gt;<span class="hljs-number">0</span>)?timeLeft[<span class="hljs-number">0</span>]+<span class="hljs-string">"天"</span>:<span class="hljs-string">""</span>;</span><br><span class="line">timeStr+=(timeLeft[<span class="hljs-number">0</span>]&lt;=<span class="hljs-number">0</span> &amp;&amp; timeLeft[<span class="hljs-number">1</span>]&lt;=<span class="hljs-number">0</span>)?<span class="hljs-string">""</span>:(timeLeft[<span class="hljs-number">1</span>]+<span class="hljs-string">"小时"</span>);</span><br><span class="line">timeStr+=(timeLeft[<span class="hljs-number">0</span>]&lt;=<span class="hljs-number">0</span> &amp;&amp; timeLeft[<span class="hljs-number">1</span>]&lt;=<span class="hljs-number">0</span> &amp;&amp; timeLeft[<span class="hljs-number">2</span>]&lt;=<span class="hljs-number">0</span>)?<span class="hljs-string">""</span>:(timeLeft[<span class="hljs-number">2</span>]+<span class="hljs-string">"分钟"</span>);</span><br><span class="line">timeStr+=(timeLeft[<span class="hljs-number">0</span>]&lt;=<span class="hljs-number">0</span> &amp;&amp; timeLeft[<span class="hljs-number">1</span>]&lt;=<span class="hljs-number">0</span> &amp;&amp; timeLeft[<span class="hljs-number">2</span>]&lt;=<span class="hljs-number">0</span> &amp;&amp; timeLeft[<span class="hljs-number">3</span>]&lt;=<span class="hljs-number">0</span>)?<span class="hljs-string">""</span>:timeLeft[<span class="hljs-number">3</span>]+<span class="hljs-string">"秒"</span>;</span><br><span class="line"><span class="hljs-keyword">return</span> timeStr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">$addZero</span>(<span class="hljs-params">v,size</span>)</span>&#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>,len=size-(v+<span class="hljs-string">""</span>).length;i&lt;len;i++)&#123;</span><br><span class="line">v=<span class="hljs-string">"0"</span>+v;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-keyword">return</span> v+<span class="hljs-string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.getServerTime = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">url</span>) </span>&#123;</span><br><span class="line"><span class="hljs-keyword">var</span> sysTime = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'SYSTIME'</span>);</span><br><span class="line"><span class="hljs-keyword">if</span>(sysTime)&#123;</span><br><span class="line"><span class="hljs-keyword">var</span> ts = sysTime.value.substring(<span class="hljs-number">0</span>, <span class="hljs-number">19</span>).split(<span class="hljs-string">'-'</span>),</span><br><span class="line">dObj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(ts[<span class="hljs-number">0</span>], <span class="hljs-built_in">parseInt</span>(ts[<span class="hljs-number">1</span>], <span class="hljs-number">10</span>) - <span class="hljs-number">1</span>, ts[<span class="hljs-number">2</span>], ts[<span class="hljs-number">3</span>], ts[<span class="hljs-number">4</span>], ts[<span class="hljs-number">5</span>]);</span><br><span class="line"><span class="hljs-keyword">return</span> dObj;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="hljs-keyword">var</span> xhr = $xhrMaker(),</span><br><span class="line">    url = url || <span class="hljs-string">"http://"</span> + <span class="hljs-built_in">window</span>.location.hostname+<span class="hljs-string">"/favicon.ico"</span>;</span><br><span class="line"><span class="hljs-keyword">try</span>&#123;</span><br><span class="line">xhr.open(<span class="hljs-string">"HEAD"</span>, url, <span class="hljs-literal">false</span>);</span><br><span class="line">xhr.send();</span><br><span class="line">&#125;<span class="hljs-keyword">catch</span>(e)&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();</span><br><span class="line">&#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(xhr.getResponseHeader(<span class="hljs-string">"Date"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">$xhrMaker</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line"><span class="hljs-keyword">var</span> xhr;</span><br><span class="line"><span class="hljs-keyword">try</span>&#123;<span class="hljs-comment">// Firefox, Opera 8.0+, Safari</span></span><br><span class="line">xhr=<span class="hljs-keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125;<span class="hljs-keyword">catch</span>(e)&#123;<span class="hljs-comment">//Internet Explorer</span></span><br><span class="line"><span class="hljs-keyword">try</span>&#123;</span><br><span class="line">xhr=<span class="hljs-keyword">new</span> ActiveXObject(<span class="hljs-string">"Msxml2.XMLHTTP"</span>);</span><br><span class="line">&#125;<span class="hljs-keyword">catch</span>(e)&#123;</span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line">xhr=<span class="hljs-keyword">new</span> ActiveXObject(<span class="hljs-string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">&#125;<span class="hljs-keyword">catch</span> (e)&#123;</span><br><span class="line">xhr=<span class="hljs-literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-keyword">return</span> xhr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;时间处理方法&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://wangytbest.github.io/categories/Javascript/"/>
    
      <category term="util" scheme="http://wangytbest.github.io/categories/Javascript/util/"/>
    
    
  </entry>
  
  <entry>
    <title>cookie操作</title>
    <link href="http://wangytbest.github.io/2018/05/30/cookie%E6%93%8D%E4%BD%9C/"/>
    <id>http://wangytbest.github.io/2018/05/30/cookie操作/</id>
    <published>2018-05-30T06:57:34.000Z</published>
    <updated>2019-04-09T07:10:41.051Z</updated>
    
    <content type="html"><![CDATA[<p>cookie处理操作<br><a id="more"></a></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="hljs-string">"cookie"</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">require,exports,module</span>)</span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> _cacheThisModule_;</span><br><span class="line">    exports.get = getCookie;</span><br><span class="line">    exports.set = setCookie;</span><br><span class="line">    exports.del = delCookie;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getCookie</span>(<span class="hljs-params">name</span>) </span>&#123;</span><br><span class="line">        <span class="hljs-comment">//读取COOKIE</span></span><br><span class="line">        <span class="hljs-keyword">var</span> reg = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">"(^| )"</span> + name + <span class="hljs-string">"(?:=([^;]*))?(;|$)"</span>), val = <span class="hljs-built_in">document</span>.cookie.match(reg);</span><br><span class="line">        <span class="hljs-keyword">if</span>(!val || !val[<span class="hljs-number">2</span>])&#123;<span class="hljs-keyword">return</span> <span class="hljs-string">""</span>;&#125;</span><br><span class="line">        <span class="hljs-keyword">var</span> res = val[<span class="hljs-number">2</span>];</span><br><span class="line">        <span class="hljs-keyword">try</span>&#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>(<span class="hljs-regexp">/(%[0-9A-F]&#123;2&#125;)&#123;2,&#125;/</span>.test(res))&#123;<span class="hljs-comment">//utf8编码</span></span><br><span class="line">               <span class="hljs-keyword">return</span> <span class="hljs-built_in">decodeURIComponent</span>(res);</span><br><span class="line">            &#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//unicode编码</span></span><br><span class="line">                <span class="hljs-keyword">return</span> <span class="hljs-built_in">unescape</span>(res);</span><br><span class="line">            &#125;            </span><br><span class="line">        &#125;<span class="hljs-keyword">catch</span>(e)&#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-built_in">unescape</span>(res);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setCookie</span>(<span class="hljs-params">name, value, expires, path, domain, secure</span>) </span>&#123;</span><br><span class="line">        <span class="hljs-comment">//写入COOKIES</span></span><br><span class="line">        <span class="hljs-keyword">var</span> exp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(), expires = <span class="hljs-built_in">arguments</span>[<span class="hljs-number">2</span>] || <span class="hljs-literal">null</span>, path = <span class="hljs-built_in">arguments</span>[<span class="hljs-number">3</span>] || <span class="hljs-string">"/"</span>, domain = <span class="hljs-built_in">arguments</span>[<span class="hljs-number">4</span>] || <span class="hljs-literal">null</span>, secure = <span class="hljs-built_in">arguments</span>[<span class="hljs-number">5</span>] || <span class="hljs-literal">false</span>;</span><br><span class="line">        expires ? exp.setMinutes(exp.getMinutes() + <span class="hljs-built_in">parseInt</span>(expires)) : <span class="hljs-string">""</span>;</span><br><span class="line">        <span class="hljs-built_in">document</span>.cookie = name + <span class="hljs-string">'='</span> + <span class="hljs-built_in">escape</span>(value) + ( expires ? <span class="hljs-string">';expires='</span> + exp.toGMTString() : <span class="hljs-string">''</span>) + ( path ? <span class="hljs-string">';path='</span> + path : <span class="hljs-string">''</span>) + ( domain ? <span class="hljs-string">';domain='</span> + domain : <span class="hljs-string">''</span>) + ( secure ? <span class="hljs-string">';secure'</span> : <span class="hljs-string">''</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">delCookie</span>(<span class="hljs-params">name, path, domain, secure</span>) </span>&#123;</span><br><span class="line">        <span class="hljs-comment">//删除cookie</span></span><br><span class="line">        <span class="hljs-keyword">var</span> value = getCookie(name);</span><br><span class="line">        <span class="hljs-keyword">if</span>(value != <span class="hljs-literal">null</span>) &#123;</span><br><span class="line">            <span class="hljs-keyword">var</span> exp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();</span><br><span class="line">            exp.setMinutes(exp.getMinutes() - <span class="hljs-number">1000</span>);</span><br><span class="line">            path = path || <span class="hljs-string">"/"</span>;</span><br><span class="line">            <span class="hljs-built_in">document</span>.cookie = name + <span class="hljs-string">'=;expires='</span> + exp.toGMTString() + ( path ? <span class="hljs-string">';path='</span> + path : <span class="hljs-string">''</span>) + ( domain ? <span class="hljs-string">';domain='</span> + domain : <span class="hljs-string">''</span>) + ( secure ? <span class="hljs-string">';secure'</span> : <span class="hljs-string">''</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;cookie处理操作&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://wangytbest.github.io/categories/Javascript/"/>
    
      <category term="util" scheme="http://wangytbest.github.io/categories/Javascript/util/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL安装教程</title>
    <link href="http://wangytbest.github.io/2018/05/29/MySQL%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <id>http://wangytbest.github.io/2018/05/29/MySQL安装教程/</id>
    <published>2018-05-29T10:34:44.000Z</published>
    <updated>2019-04-09T07:01:42.650Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-下载安装"><a href="#1-下载安装" class="headerlink" title="1. 下载安装"></a>1. 下载安装</h1><h2 id="1-1-下载"><a href="#1-1-下载" class="headerlink" title="1.1 下载"></a>1.1 下载</h2><p>MySQL8.0 For Windows zip包下载地址：<a href="https://dev.mysql.com/downloads/file/?id=476233" target="_blank" rel="noopener">MySQL8.0 For Window</a>，进入页面后可以不登录。后点击底部<code>No thanks, just start my download.</code>即可开始下载。或直接下载：<a href="https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.11-winx64.zip" target="_blank" rel="noopener">https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.11-winx64.zip</a><br><a id="more"></a></p><h2 id="1-2-安装"><a href="#1-2-安装" class="headerlink" title="1.2 安装"></a>1.2 安装</h2><p>解压zip包到安装目录</p><blockquote><p> 配置文件：在Windows系统中，配置文件默认是安装目录下的 <code>my.ini</code> 文件（或<code>my-default.ini</code>），部分配置需要在初始安装时配置，大部分也可以在安装完成后进行更改。当然，极端情况下，所有的都是可以更改的。</p></blockquote><blockquote><p>　　我们发现解压后的目录并没有<code>my.ini</code>文件，没关系可以自行创建。在安装根目录下添加 my.ini，比如我这里是：C:\Program Files\MySQL\my.ini，写入基本配置：</p></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"># 设置3306端口</span><br><span class="line">port=3306</span><br><span class="line"># 设置mysql的安装目录</span><br><span class="line">basedir=C:\Program Files\MySQL</span><br><span class="line"># 设置mysql数据库的数据的存放目录</span><br><span class="line">datadir=E:\database\MySQL\Data</span><br><span class="line"># 允许最大连接数</span><br><span class="line">max_connections=200</span><br><span class="line"># 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统</span><br><span class="line">max_connect_errors=10</span><br><span class="line"># 服务端使用的字符集默认为UTF8</span><br><span class="line">character-set-server=utf8</span><br><span class="line"># 创建新表时将使用的默认存储引擎</span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line"># 默认使用“mysql_native_password”插件认证</span><br><span class="line">default_authentication_plugin=mysql_native_password</span><br><span class="line">[mysql]</span><br><span class="line"># 设置mysql客户端默认字符集</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[client]</span><br><span class="line"># 设置mysql客户端连接服务端时默认使用的端口</span><br><span class="line">port=3306</span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure><p>注意，里面的 basedir 是本地的安装目录，datadir 是我数据库数据文件要存放的位置，各项配置需要根据自己的环境进行配置。<br>查看所有的配置项，可参考：<a href="https://dev.mysql.com/doc/refman/8.0/en/mysqld-option-tables.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/8.0/en/mysqld-option-tables.html</a></p><h1 id="2-初始化数据库"><a href="#2-初始化数据库" class="headerlink" title="2 初始化数据库"></a>2 初始化数据库</h1><p>在MySQL安装目录的 bin 目录下执行命令：</p><blockquote><p><code>mysqld --initialize --console</code></p></blockquote><p>执行完成后，会打印 root 用户的初始默认密码，比如：</p><figure class="highlight cmd hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function">C:\<span class="hljs-title">Users</span>\<span class="hljs-title">Administrator</span>&gt;<span class="hljs-title">cd</span> <span class="hljs-title">C</span>:\<span class="hljs-title">Program</span> <span class="hljs-title">Files</span>\<span class="hljs-title">MySQL</span>\<span class="hljs-title">bin</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-title">C</span>:\<span class="hljs-title">Program</span> <span class="hljs-title">Files</span>\<span class="hljs-title">MySQL</span>\<span class="hljs-title">bin</span>&gt;<span class="hljs-title">mysqld</span> --<span class="hljs-title">initialize</span> --<span class="hljs-title">console</span></span></span><br><span class="line"><span class="hljs-function">2018-04-28<span class="hljs-title">T15</span>:57:17.087519<span class="hljs-title">Z</span> 0 [<span class="hljs-title">System</span>] [<span class="hljs-title">MY</span>-013169] [<span class="hljs-title">Server</span>] <span class="hljs-title">C</span>:\<span class="hljs-title">Program</span> <span class="hljs-title">Files</span>\<span class="hljs-title">MySQL</span>\<span class="hljs-title">bin</span>\<span class="hljs-title">mysqld.exe</span> (<span class="hljs-title">mysqld</span> 8.0.11) <span class="hljs-title">initializing</span> <span class="hljs-title">of</span> <span class="hljs-title">server</span> <span class="hljs-title">in</span> <span class="hljs-title">progress</span> <span class="hljs-title">as</span> <span class="hljs-title">process</span> 4984</span></span><br><span class="line"><span class="hljs-function">2018-04-28<span class="hljs-title">T15</span>:57:24.859249<span class="hljs-title">Z</span> 5 [<span class="hljs-title">Note</span>] [<span class="hljs-title">MY</span>-010454] [<span class="hljs-title">Server</span>] <span class="hljs-title">A</span> <span class="hljs-title">temporary</span> <span class="hljs-title">password</span> <span class="hljs-title">is</span> <span class="hljs-title">generated</span> <span class="hljs-title">for</span> <span class="hljs-title">root</span>@<span class="hljs-title">localhost</span>: <span class="hljs-title">rI5rvf5x5G</span>,<span class="hljs-title">E</span></span></span><br><span class="line"><span class="hljs-function">2018-04-28<span class="hljs-title">T15</span>:57:27.106660<span class="hljs-title">Z</span> 0 [<span class="hljs-title">System</span>] [<span class="hljs-title">MY</span>-013170] [<span class="hljs-title">Server</span>] <span class="hljs-title">C</span>:\<span class="hljs-title">Program</span> <span class="hljs-title">Files</span>\<span class="hljs-title">MySQL</span>\<span class="hljs-title">bin</span>\<span class="hljs-title">mysqld.exe</span> (<span class="hljs-title">mysqld</span> 8.0.11) <span class="hljs-title">initializing</span> <span class="hljs-title">of</span> <span class="hljs-title">server</span> <span class="hljs-title">has</span> <span class="hljs-title">completed</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-title">C</span>:\<span class="hljs-title">Program</span> <span class="hljs-title">Files</span>\<span class="hljs-title">MySQL</span>\<span class="hljs-title">bin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意！执行输出结果里面有一段： <figure class="highlight plain hljs"><figcaption><span>[MY-010454] [Server] A temporary password is generated for root@localhost: rI5rvf5x5G,E``` 其中```root@localhost:```后面的```rI5rvf5x5G,E```就是初始密码（不含首位空格）。在没有更改密码前，需要记住这个密码，后续登录需要用到。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 3 安装数据库</span><br><span class="line"></span><br><span class="line">在MySQL安装目录的 bin 目录下执行命令（以管理员身份打开cmd命令行，或者在安装目录Shift+右键“在此处打开命令行窗口”）：</span><br><span class="line">&gt; ```mysqld --install [服务名]</span><br></pre></td></tr></table></figure></p><p>后面的服务名可以不写，默认的名字为 mysql。</p><p>安装完成之后，就可以通过命令<figure class="highlight plain hljs"><figcaption><span>start mysql```启动MySQL的服务了。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line">```cmd</span><br><span class="line">C:\Program Files\MySQL\bin&gt;mysqld --install</span><br><span class="line">Service successfully installed.</span><br><span class="line">C:\Program Files\MySQL\bin&gt;net start mysql</span><br><span class="line">MySQL 服务正在启动 ..</span><br><span class="line">MySQL 服务已经启动成功。</span><br></pre></td></tr></table></figure></p><h1 id="4-修改密码"><a href="#4-修改密码" class="headerlink" title="4 修改密码"></a>4 修改密码</h1><p>在MySQL安装目录的 bin 目录下执行命令：</p><blockquote><figure class="highlight plain hljs"><figcaption><span>-u root -p```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">这时候会提示输入密码，记住了上面第1.3步安装时的密码，填入即可登录成功，进入MySQL命令模式。</span><br><span class="line"></span><br><span class="line">修改密码:</span><br><span class="line">&gt; ```ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED WITH mysql_native_password BY &apos;新密码&apos;;</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight cmd hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">default_authentication_plugin=mysql_native_password</span><br></pre></td></tr></table></figure><figure class="highlight cmd hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function">C:\<span class="hljs-title">Program</span> <span class="hljs-title">Files</span>\<span class="hljs-title">MySQL</span>\<span class="hljs-title">bin</span>&gt;<span class="hljs-title">mysql</span> -<span class="hljs-title">u</span> <span class="hljs-title">root</span> -<span class="hljs-title">p</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-title">Enter</span> <span class="hljs-title">password</span>: ************</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-title">Welcome</span> <span class="hljs-title">to</span> <span class="hljs-title">the</span> <span class="hljs-title">MySQL</span> <span class="hljs-title">monitor</span>. <span class="hljs-title">Commands</span> <span class="hljs-title">end</span> <span class="hljs-title">with</span> ; <span class="hljs-title">or</span> \<span class="hljs-title">g</span>.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-title">Your</span> <span class="hljs-title">MySQL</span> <span class="hljs-title">connection</span> <span class="hljs-title">id</span> <span class="hljs-title">is</span> 8</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-title">Server</span> <span class="hljs-title">version</span>: 8.0.11</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-title">Copyright</span> (<span class="hljs-title">c</span>) 2000, 2018, <span class="hljs-title">Oracle</span> <span class="hljs-title">and</span>/<span class="hljs-title">or</span> <span class="hljs-title">its</span> <span class="hljs-title">affiliates</span>. <span class="hljs-title">All</span> <span class="hljs-title">rights</span> <span class="hljs-title">reserved</span>.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-title">Oracle</span> <span class="hljs-title">is</span> <span class="hljs-title">a</span> <span class="hljs-title">registered</span> <span class="hljs-title">trademark</span> <span class="hljs-title">of</span> <span class="hljs-title">Oracle</span> <span class="hljs-title">Corporation</span> <span class="hljs-title">and</span>/<span class="hljs-title">or</span> <span class="hljs-title">its</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-title">affiliates</span>. <span class="hljs-title">Other</span> <span class="hljs-title">names</span> <span class="hljs-title">may</span> <span class="hljs-title">be</span> <span class="hljs-title">trademarks</span> <span class="hljs-title">of</span> <span class="hljs-title">their</span> <span class="hljs-title">respective</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-title">owners</span>.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-title">Type</span> '<span class="hljs-title">help</span>;' <span class="hljs-title">or</span> '\<span class="hljs-title">h</span>' <span class="hljs-title">for</span> <span class="hljs-title">help</span>. <span class="hljs-title">Type</span> '\<span class="hljs-title">c</span>' <span class="hljs-title">to</span> <span class="hljs-title">clear</span> <span class="hljs-title">the</span> <span class="hljs-title">current</span> <span class="hljs-title">input</span> <span class="hljs-title">statement</span>.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-title">mysql</span>&gt; <span class="hljs-title">ALTER</span> <span class="hljs-title">USER</span> '<span class="hljs-title">root</span>'@'<span class="hljs-title">localhost</span>' <span class="hljs-title">IDENTIFIED</span> <span class="hljs-title">WITH</span> <span class="hljs-title">mysql_native_password</span> <span class="hljs-title">BY</span> '新密码';</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-title">Query</span> <span class="hljs-title">OK</span>, 0 <span class="hljs-title">rows</span> <span class="hljs-title">affected</span> (0.06 <span class="hljs-title">sec</span>)</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-title">mysql</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-下载安装&quot;&gt;&lt;a href=&quot;#1-下载安装&quot; class=&quot;headerlink&quot; title=&quot;1. 下载安装&quot;&gt;&lt;/a&gt;1. 下载安装&lt;/h1&gt;&lt;h2 id=&quot;1-1-下载&quot;&gt;&lt;a href=&quot;#1-1-下载&quot; class=&quot;headerlink&quot; title=&quot;1.1 下载&quot;&gt;&lt;/a&gt;1.1 下载&lt;/h2&gt;&lt;p&gt;MySQL8.0 For Windows zip包下载地址：&lt;a href=&quot;https://dev.mysql.com/downloads/file/?id=476233&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MySQL8.0 For Window&lt;/a&gt;，进入页面后可以不登录。后点击底部&lt;code&gt;No thanks, just start my download.&lt;/code&gt;即可开始下载。或直接下载：&lt;a href=&quot;https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.11-winx64.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.11-winx64.zip&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://wangytbest.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://wangytbest.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>浏览器判断</title>
    <link href="http://wangytbest.github.io/2018/05/18/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%88%A4%E6%96%AD/"/>
    <id>http://wangytbest.github.io/2018/05/18/浏览器判断/</id>
    <published>2018-05-18T06:09:14.000Z</published>
    <updated>2019-04-09T09:58:24.955Z</updated>
    
    <content type="html"><![CDATA[<p>移动端判断浏览器环境：</p><ul><li>微信浏览器</li><li>小程序</li><li>JD APP</li><li>浏览器</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> uaTypes = &#123;</span><br><span class="line">  APP: <span class="hljs-string">'app'</span>,</span><br><span class="line">  WECHAT: <span class="hljs-string">'webchat'</span>,</span><br><span class="line">  QQ: <span class="hljs-string">'qq'</span>,</span><br><span class="line">  MOBILE: <span class="hljs-string">'mobile'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <a id="more"></a><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> ua = navigator.userAgent</span><br><span class="line"><span class="hljs-keyword">const</span> type = <span class="hljs-function">(<span class="hljs-params">(</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/jdapp/i</span>.test(ua)) &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> uaTypes.APP</span><br><span class="line">  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/MicroMessenger/i</span>.test(ua)) &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> uaTypes.WECHAT</span><br><span class="line">  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/QQ/</span>.test(ua)) &#123;</span><br><span class="line">    <span class="hljs-comment">// 区分手机QQ和QQ浏览器</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/MQQBrowser/i</span>.test(ua)) &#123;</span><br><span class="line">      <span class="hljs-keyword">return</span> uaTypes.MOBILE</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">return</span> uaTypes.QQ</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> uaTypes.MOBILE</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;移动端判断浏览器环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;微信浏览器&lt;/li&gt;
&lt;li&gt;小程序&lt;/li&gt;
&lt;li&gt;JD APP&lt;/li&gt;
&lt;li&gt;浏览器&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; uaTypes = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  APP: &lt;span class=&quot;hljs-string&quot;&gt;&#39;app&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  WECHAT: &lt;span class=&quot;hljs-string&quot;&gt;&#39;webchat&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  QQ: &lt;span class=&quot;hljs-string&quot;&gt;&#39;qq&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  MOBILE: &lt;span class=&quot;hljs-string&quot;&gt;&#39;mobile&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Javasciipt" scheme="http://wangytbest.github.io/categories/Javasciipt/"/>
    
    
      <category term="Javascript" scheme="http://wangytbest.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>margin、padding的百分比计算</title>
    <link href="http://wangytbest.github.io/2018/04/20/margin%E3%80%81padding%E7%9A%84%E7%99%BE%E5%88%86%E6%AF%94%E8%AE%A1%E7%AE%97/"/>
    <id>http://wangytbest.github.io/2018/04/20/margin、padding的百分比计算/</id>
    <published>2018-04-20T02:54:12.000Z</published>
    <updated>2019-04-09T07:18:48.365Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CSS2-1-Box-model"><a href="#CSS2-1-Box-model" class="headerlink" title="CSS2.1 Box model"></a>CSS2.1 Box model</h3><blockquote><p>The percentage is calculated with respect to the width of the generated box’s containing block. Note that this is true for <code>margin-top</code> and <code>margin-bottom</code> as well.</p></blockquote><p>margin：百分比的计算基于生成框的包含块(父元素)的width（margin-top/bottom也是如此）。<br>padding同理</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;CSS2-1-Box-model&quot;&gt;&lt;a href=&quot;#CSS2-1-Box-model&quot; class=&quot;headerlink&quot; title=&quot;CSS2.1 Box model&quot;&gt;&lt;/a&gt;CSS2.1 Box model&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;T
      
    
    </summary>
    
      <category term="CSS" scheme="http://wangytbest.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://wangytbest.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>canvas精灵</title>
    <link href="http://wangytbest.github.io/2018/04/18/canvas%E7%B2%BE%E7%81%B5/"/>
    <id>http://wangytbest.github.io/2018/04/18/canvas精灵/</id>
    <published>2018-04-18T09:40:26.000Z</published>
    <updated>2019-04-09T07:08:58.895Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p><a href="http://javascript.ruanyifeng.com/htmlapi/requestanimationframe.html" target="_blank" rel="noopener">requestAnimationFrame</a><br><a href="https://segmentfault.com/a/1190000010435543" target="_blank" rel="noopener">使用 canvas 实现精灵动画</a><br><a href="http://www.williammalone.com/articles/create-html5-canvas-javascript-sprite-animation/" target="_blank" rel="noopener">CREATE A SPRITE ANIMATION WITH HTML5 CANVAS AND JAVASCRIPT</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame" target="_blank" rel="noopener">window.requestAnimationFrame</a><br><a href="http://www.zhangxinxu.com/wordpress/2013/09/css3-animation-requestanimationframe-tween-%E5%8A%A8%E7%94%BB%E7%AE%97%E6%B3%95/" target="_blank" rel="noopener">CSS3动画那么强，requestAnimationFrame还有毛线用？</a><br><a href="http://www.w3school.com.cn/tags/canvas_drawimage.asp" target="_blank" rel="noopener">HTML5 canvas drawImage() 方法</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;a href=&quot;http://javascript.ruanyifeng.com/htmlapi/requestanimationframe.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;requestAni
      
    
    </summary>
    
      <category term="Javascript" scheme="http://wangytbest.github.io/categories/Javascript/"/>
    
      <category term="canvas" scheme="http://wangytbest.github.io/categories/Javascript/canvas/"/>
    
    
      <category term="JS" scheme="http://wangytbest.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>数组对象判断</title>
    <link href="http://wangytbest.github.io/2018/04/12/%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E5%88%A4%E6%96%AD/"/>
    <id>http://wangytbest.github.io/2018/04/12/数组对象判断/</id>
    <published>2018-04-12T07:51:26.000Z</published>
    <updated>2019-04-09T07:10:56.977Z</updated>
    
    <content type="html"><![CDATA[<p>数组对象判断方法<br><a id="more"></a></p><h2 id="支付宝base-js"><a href="#支付宝base-js" class="headerlink" title="支付宝base.js"></a>支付宝base.js</h2><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span> ( value <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span> || </span><br><span class="line">  (!(value <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span>) &amp;&amp; </span><br><span class="line">  (<span class="hljs-built_in">Object</span>.prototype.toString.call((value)) == <span class="hljs-string">'[object Array]'</span>) || </span><br><span class="line">  <span class="hljs-keyword">typeof</span> value.length == <span class="hljs-string">'number'</span> &amp;&amp; </span><br><span class="line">  <span class="hljs-keyword">typeof</span> value.splice != <span class="hljs-string">'undefined'</span> &amp;&amp; </span><br><span class="line">  <span class="hljs-keyword">typeof</span> value.propertyIsEnumerable != <span class="hljs-string">'undefined'</span> &amp;&amp; </span><br><span class="line">  !value.propertyIsEnumerable(<span class="hljs-string">'splice'</span>))) &#123; </span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-string">'array'</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> arr = []; </span><br><span class="line">arr <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span>; <span class="hljs-comment">// true </span></span><br><span class="line">arr.constructor == <span class="hljs-built_in">Array</span>; <span class="hljs-comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="call-apply"><a href="#call-apply" class="headerlink" title="call/apply"></a>call/apply</h2><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">Object</span>.prototype.toString.call(value) == <span class="hljs-string">'[object Array]'</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> isArray = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">obj</span>) </span>&#123; </span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.prototype.toString.call(obj) === <span class="hljs-string">'[object Array]'</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h2><blockquote><p>typeof方法返回一个字符串，来表示数据的类型。</p></blockquote><table><thead><tr><th>数据类型</th><th style="text-align:center">type</th></tr></thead><tbody><tr><td>数据类型</td><td style="text-align:center">Type</td></tr><tr><td>Undefined</td><td style="text-align:center">undefined</td></tr><tr><td>Null</td><td style="text-align:center">object</td></tr><tr><td>布尔值</td><td style="text-align:center">boolean</td></tr><tr><td>数值</td><td style="text-align:center">number</td></tr><tr><td>字符串</td><td style="text-align:center">string</td></tr><tr><td>Symbol (ECMAScript 6 新增)</td><td style="text-align:center">symbol</td></tr><tr><td>宿主对象(JS环境提供的，比如浏览器)</td><td style="text-align:center">Implementation-dependent</td></tr><tr><td>函数对象</td><td style="text-align:center">function</td></tr><tr><td>任何其他对象</td><td style="text-align:center">object</td></tr></tbody></table><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> a = [];</span><br><span class="line"><span class="hljs-keyword">var</span> b = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">typeof</span> a; <span class="hljs-comment">// "object"</span></span><br><span class="line"><span class="hljs-keyword">typeof</span> b; <span class="hljs-comment">// "object"</span></span><br><span class="line"></span><br><span class="line">a <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span> <span class="hljs-comment">// true</span></span><br><span class="line">b <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span> <span class="hljs-comment">// true</span></span><br><span class="line"></span><br><span class="line">a <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span> <span class="hljs-comment">// true</span></span><br><span class="line">b <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span> <span class="hljs-comment">// false</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数组对象判断方法&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://wangytbest.github.io/categories/Javascript/"/>
    
      <category term="util" scheme="http://wangytbest.github.io/categories/Javascript/util/"/>
    
    
      <category term="Javascript" scheme="http://wangytbest.github.io/tags/Javascript/"/>
    
      <category term="util" scheme="http://wangytbest.github.io/tags/util/"/>
    
  </entry>
  
</feed>
