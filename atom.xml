<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>王小贱</title>
  
  <subtitle>Write the Code Change the World.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wangytbest.github.io/"/>
  <updated>2019-04-09T07:42:31.859Z</updated>
  <id>http://wangytbest.github.io/</id>
  
  <author>
    <name>Wangyutao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>跨域</title>
    <link href="http://wangytbest.github.io/2019/04/09/%E8%B7%A8%E5%9F%9F/"/>
    <id>http://wangytbest.github.io/2019/04/09/跨域/</id>
    <published>2019-04-09T07:40:08.000Z</published>
    <updated>2019-04-09T07:42:31.859Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是跨域？"><a href="#什么是跨域？" class="headerlink" title="什么是跨域？"></a>什么是跨域？</h3><p>跨域是指一个域下的文档或脚本试图去请求另一个域下的资源，这里跨域是广义的。</p><p>广义的跨域：</p><ol><li>资源跳转： A链接、重定向、表单提交</li><li>资源嵌入： <link>、<script>、<img>、<frame>等dom标签，还有样式中background:url()、@font-face()等文件外链</li><li>脚本请求： js发起的ajax请求、dom和js对象的跨域操作等<br>其实我们通常所说的跨域是狭义的，是由浏览器同源策略限制的一类请求场景。</li></ol><h3 id="什么是同源策略？"><a href="#什么是同源策略？" class="headerlink" title="什么是同源策略？"></a>什么是同源策略？</h3><p>同源策略/SOP（Same origin policy）是一种约定，由Netscape公司1995年引入浏览器，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSFR等攻击。所谓同源是指”协议+域名+端口”三者相同，即便两个不同的域名指向同一个ip地址，也非同源。</p><p>同源策略限制以下几种行为：</p><ol><li>Cookie、LocalStorage 和 IndexDB 无法读取</li><li>DOM 和 Js对象无法获得</li><li>AJAX 请求不能发送</li></ol><a id="more"></a><h2 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h2><blockquote><p>利用 <code>&lt;script&gt;</code> 标签没有跨域限制。</p></blockquote><p>优点：</p><ul><li>兼容性好</li></ul><p>缺点：</p><ul><li>只能用于<code>get</code> 请求</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">url, jsonpCallback, success</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">  script.src = url</span><br><span class="line">  script.async = <span class="literal">true</span></span><br><span class="line">  script.type = <span class="string">'text/javascript'</span></span><br><span class="line">  <span class="built_in">window</span>[jsonpCallback] = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    success &amp;&amp; success(data)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(script)</span><br><span class="line">&#125;</span><br><span class="line">jsonp(<span class="string">'http://xxx'</span>, <span class="string">'callback'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h2><blockquote><p>CORS（跨域资源共享）：服务端设置请求头<code>Access-Control-Allow-Origin</code></p></blockquote><p>CORS请求分为两类：</p><ul><li>简单请求</li><li>非简单请求</li></ul><h3 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h3><p>请求方法： </p><ul><li>GET</li><li>POST </li><li>HEAD</li></ul><p>请求头部： </p><ul><li>Accept</li><li>Accept-Content</li><li>Content-Language</li><li>Content-Type：application/x-www-form-urlencoded、multipart/form-data、text/plain</li></ul><blockquote><p>对于简单请求，浏览器直接发出CORS请求，在头信息之中，增加一个<code>Origin</code>字段。</p></blockquote><p><code>Origin</code>字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求。</p><p>如果<code>Origin</code>指定的源，不在许可范围内，服务器会返回一个正常的<code>HTTP</code>回应。浏览器发现，这个回应的头信息没有包含<code>Access-Control-Allow-Origin</code>字段，就知道出错了，从而抛出一个错误，被<code>XMLHttpRequest</code>的<code>onerror</code>回调函数捕获。注意，这种错误无法通过状态码识别，因为HTTP回应的状态码有可能是200。</p><p>如果<code>Origin</code>指定的域名在许可范围内，服务器返回的响应，会多出几个头信息字段。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin: http://api.bob.com</span><br><span class="line">Access-Control-Allow-Credentials: true</span><br><span class="line">Access-Control-Expose-Headers: FooBar</span><br></pre></td></tr></table></figure><p>上面的头信息之中，有三个与CORS请求相关的字段，都以<code>Access-Control-</code>开头。</p><p>（1）<code>Access-Control-Allow-Origin</code></p><p>该字段是必须的。它的值要么是请求时Origin字段的值，要么是一个*，表示接受任意域名的请求。</p><p>（2）<code>Access-Control-Allow-Credentials</code></p><p>该字段可选。它的值是一个布尔值，表示是否允许发送Cookie。默认情况下，Cookie不包括在CORS请求之中。设为true，即表示服务器明确许可，Cookie可以包含在请求中，一起发给服务器。这个值也只能设为true，如果服务器不要浏览器发送Cookie，删除该字段即可。</p><p>（3）<code>Access-Control-Expose-Headers</code></p><p>该字段可选。CORS请求时，XMLHttpRequest对象的<code>getResponseHeader()</code>方法只能拿到6个基本字段：<code>Cache-Control</code>、<code>Content-Language</code>、<code>Content-Type</code>、<code>Expires</code>、<code>Last-Modified</code>、<code>Pragma</code>。如果想拿到其他字段，就必须在<code>Access-Control-Expose-Headers</code>里面指定。上面的例子指定，getResponseHeader(‘FooBar’)可以返回FooBar字段的值</p><h3 id="withCredentials-属性"><a href="#withCredentials-属性" class="headerlink" title="withCredentials 属性"></a>withCredentials 属性</h3><p>CORS请求默认不发送<code>Cookie</code>和<code>HTTP认证信息</code>。如果要把Cookie发到服务器，一方面要服务器同意，指<code>Access-Control-Allow-Credentials</code>字段。<code>Access-Control-Allow-Credentials: true</code><br>另一方面，开发者必须在<code>AJAX</code>请求中打开<code>withCredentials</code>属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var xhr = new XMLHttpRequest();</span><br><span class="line">xhr.withCredentials = true;</span><br></pre></td></tr></table></figure><p>否则，即使服务器同意发送Cookie，浏览器也不会发送。或者，服务器要求设置Cookie，浏览器也不会处理。</p><p>需要注意的是，如果要发送Cookie，<code>Access-Control-Allow-Origin</code>就不能设为星号，必须指定明确的、与请求网页一致的域名。同时，Cookie依然遵循同源政策，只有用服务器域名设置的Cookie才会上传，其他域名的Cookie并不会上传，且（跨源）原网页代码中的document.cookie也无法读取服务器域名下的Cookie。</p><h3 id="非简单请求"><a href="#非简单请求" class="headerlink" title="非简单请求"></a>非简单请求</h3><blockquote><p>非简单请求是那种对服务器有特殊要求的请求，比如请求方法是<code>PUT</code>或<code>DELETE</code>，或者<code>Content-Type</code>字段的类型是<code>application/json</code>。(除简单请求就是非简单请求)</p></blockquote><p>浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些HTTP动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的<code>XMLHttpRequest</code>请求，否则就报错。</p><p>下面是一段浏览器的JavaScript脚本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var url = &apos;http://api.alice.com/cors&apos;;</span><br><span class="line">var xhr = new XMLHttpRequest();</span><br><span class="line">xhr.open(&apos;PUT&apos;, url, true);</span><br><span class="line">xhr.setRequestHeader(&apos;X-Custom-Header&apos;, &apos;value&apos;);</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure><p>上面代码中，HTTP请求的方法是PUT，并且发送一个自定义头信息<code>X-Custom-Header</code>。</p><p>浏览器发现，这是一个非简单请求，就自动发出一个”预检”请求，要求服务器确认可以这样请求。下面是这个”预检”请求的HTTP头信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">OPTIONS /cors HTTP/1.1</span><br><span class="line">Origin: http://api.bob.com</span><br><span class="line">Access-Control-Request-Method: PUT</span><br><span class="line">Access-Control-Request-Headers: X-Custom-Header</span><br><span class="line">Host: api.alice.com</span><br><span class="line">Accept-Language: en-US</span><br><span class="line">Connection: keep-alive</span><br><span class="line">User-Agent: Mozilla/5.0...</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">**&quot;预检&quot;请求用的请求方法是`OPTIONS`，表示这个请求是用来询问的。头信息里面，关键字段是`Origin`，表示请求来自哪个源。**</span><br><span class="line"></span><br><span class="line">除了Origin字段，&quot;预检&quot;请求的头信息包括两个特殊字段。</span><br><span class="line"></span><br><span class="line">（1）Access-Control-Request-Method</span><br><span class="line"></span><br><span class="line">该字段是必须的，用来列出浏览器的CORS请求会用到哪些HTTP方法，上例是PUT。</span><br><span class="line"></span><br><span class="line">（2）Access-Control-Request-Headers</span><br><span class="line"></span><br><span class="line">该字段是一个逗号分隔的字符串，指定浏览器CORS请求会额外发送的头信息字段，上例是X-Custom-Header。</span><br><span class="line"></span><br><span class="line">4.2 预检请求的回应</span><br><span class="line">服务器收到&quot;预检&quot;请求以后，检查了Origin、Access-Control-Request-Method和Access-Control-Request-Headers字段以后，确认允许跨源请求，就可以做出回应。</span><br><span class="line"></span><br><span class="line">```JS</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Mon, 01 Dec 2008 01:15:39 GMT</span><br><span class="line">Server: Apache/2.0.61 (Unix)</span><br><span class="line">Access-Control-Allow-Origin: http://api.bob.com</span><br><span class="line">Access-Control-Allow-Methods: GET, POST, PUT</span><br><span class="line">Access-Control-Allow-Headers: X-Custom-Header</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">Content-Encoding: gzip</span><br><span class="line">Content-Length: 0</span><br><span class="line">Keep-Alive: timeout=2, max=100</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Type: text/plain</span><br></pre></td></tr></table></figure><p>上面的HTTP回应中，关键的是<code>Access-Control-Allow-Origin</code>字段，表示<code>http://api.bob.com</code>可以请求数据。该字段也可以设为星号，表示同意任意跨源请求。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin: *</span><br></pre></td></tr></table></figure><p>如果浏览器否定了”预检”请求，会返回一个正常的HTTP回应，但是没有任何CORS相关的头信息字段。这时，浏览器就会认定，服务器不同意预检请求，因此触发一个错误，被XMLHttpRequest对象的onerror回调函数捕获。控制台会打印出如下的报错信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">XMLHttpRequest cannot load http://api.alice.com.</span><br><span class="line">Origin http://api.bob.com is not allowed by Access-Control-Allow-Origin.</span><br></pre></td></tr></table></figure><p>服务器回应的其他CORS相关字段如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Methods: GET, POST, PUT</span><br><span class="line">Access-Control-Allow-Headers: X-Custom-Header</span><br><span class="line">Access-Control-Allow-Credentials: true</span><br><span class="line">Access-Control-Max-Age: 1728000</span><br></pre></td></tr></table></figure><p>（1）Access-Control-Allow-Methods</p><p>该字段必需，它的值是逗号分隔的一个字符串，表明服务器支持的所有跨域请求的方法。注意，返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次”预检”请求。</p><p>（2）Access-Control-Allow-Headers</p><p>如果浏览器请求包括Access-Control-Request-Headers字段，则Access-Control-Allow-Headers字段是必需的。它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段，不限于浏览器在”预检”中请求的字段。</p><p>（3）Access-Control-Allow-Credentials</p><p>该字段与简单请求时的含义相同。</p><p>（4）Access-Control-Max-Age</p><p>该字段可选，用来指定本次预检请求的有效期，单位为秒。上面结果中，有效期是20天（1728000秒），即允许缓存该条回应1728000秒（即20天），在此期间，不用发出另一条预检请求。</p><p>4.3 浏览器的正常请求和回应<br>一旦服务器通过了”预检”请求，以后每次浏览器正常的CORS请求，就都跟简单请求一样，会有一个Origin头信息字段。服务器的回应，也都会有一个Access-Control-Allow-Origin头信息字段。</p><p>下面是”预检”请求之后，浏览器的正常CORS请求。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PUT /cors HTTP/1.1</span><br><span class="line">Origin: http://api.bob.com</span><br><span class="line">Host: api.alice.com</span><br><span class="line">X-Custom-Header: value</span><br><span class="line">Accept-Language: en-US</span><br><span class="line">Connection: keep-alive</span><br><span class="line">User-Agent: Mozilla/5.0...</span><br></pre></td></tr></table></figure><p>上面头信息的Origin字段是浏览器自动添加的。</p><p>下面是服务器正常的回应。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin: http://api.bob.com</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br></pre></td></tr></table></figure><p>上面头信息中，Access-Control-Allow-Origin字段是每次回应都必定包含的。</p></script></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是跨域？&quot;&gt;&lt;a href=&quot;#什么是跨域？&quot; class=&quot;headerlink&quot; title=&quot;什么是跨域？&quot;&gt;&lt;/a&gt;什么是跨域？&lt;/h3&gt;&lt;p&gt;跨域是指一个域下的文档或脚本试图去请求另一个域下的资源，这里跨域是广义的。&lt;/p&gt;
&lt;p&gt;广义的跨域：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;资源跳转： A链接、重定向、表单提交&lt;/li&gt;
&lt;li&gt;资源嵌入： &lt;link&gt;、&lt;script&gt;、&lt;img&gt;、&lt;frame&gt;等dom标签，还有样式中background:url()、@font-face()等文件外链&lt;/li&gt;
&lt;li&gt;脚本请求： js发起的ajax请求、dom和js对象的跨域操作等&lt;br&gt;其实我们通常所说的跨域是狭义的，是由浏览器同源策略限制的一类请求场景。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;什么是同源策略？&quot;&gt;&lt;a href=&quot;#什么是同源策略？&quot; class=&quot;headerlink&quot; title=&quot;什么是同源策略？&quot;&gt;&lt;/a&gt;什么是同源策略？&lt;/h3&gt;&lt;p&gt;同源策略/SOP（Same origin policy）是一种约定，由Netscape公司1995年引入浏览器，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSFR等攻击。所谓同源是指”协议+域名+端口”三者相同，即便两个不同的域名指向同一个ip地址，也非同源。&lt;/p&gt;
&lt;p&gt;同源策略限制以下几种行为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Cookie、LocalStorage 和 IndexDB 无法读取&lt;/li&gt;
&lt;li&gt;DOM 和 Js对象无法获得&lt;/li&gt;
&lt;li&gt;AJAX 请求不能发送&lt;/li&gt;
&lt;/ol&gt;&lt;/script&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>webpack插件关于autoprefixer的冲突</title>
    <link href="http://wangytbest.github.io/2018/08/27/webpack-%E6%8F%92%E4%BB%B6%E5%85%B3%E4%BA%8Eautoprefixer%E7%9A%84%E5%86%B2%E7%AA%81/"/>
    <id>http://wangytbest.github.io/2018/08/27/webpack-插件关于autoprefixer的冲突/</id>
    <published>2018-08-27T03:15:54.000Z</published>
    <updated>2019-04-09T07:45:27.031Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-实际遇到的问题"><a href="#1-实际遇到的问题" class="headerlink" title="1. 实际遇到的问题"></a>1. 实际遇到的问题</h3><p>项目中经常会遇到css的一些奇怪问题，有些css属性的设置在在本地编译运行的时候是好的，但是打包上线之后这个属性就平白无故的没有了？</p><p>具体场景<br>在处理多行文本溢出时，需要使用<code>-webkit-box-orient: vertial</code>，在本地开发测试一切正常，但是在webpack编译之后，检查样式并没有这个属性，其他的属性都有。</p><a id="more"></a><figure class="highlight scss hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 多行文本</span></span><br><span class="line">@<span class="hljs-keyword">mixin</span> textmultiline(<span class="hljs-variable">$line</span>:<span class="hljs-number">2</span>) &#123;</span><br><span class="line">  <span class="hljs-attribute">display</span>: -webkit-box;</span><br><span class="line">  <span class="hljs-comment">/* autoprefixer: off*/</span></span><br><span class="line">  -webkit-box-orient: vertical;</span><br><span class="line">  <span class="hljs-comment">/* autoprefixer: on*/</span></span><br><span class="line">  -webkit-line-clamp: <span class="hljs-variable">$line</span>;</span><br><span class="line">  <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="hljs-attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-为什么啊？"><a href="#2-为什么啊？" class="headerlink" title="2. 为什么啊？"></a>2. 为什么啊？</h3><ol><li><p><a href="https://github.com/cssnano/cssnano/issues/357" target="_blank" rel="noopener">why remove -webkit-box-orient property? #357</a></p></li><li><p><a href="https://github.com/cssnano/cssnano/issues/252" target="_blank" rel="noopener">Autoprefixer setting should be false by default #252</a></p></li></ol><p>原因：<br>  autoprefixer自动的删除了一些它觉得没有必要的属性，所以解决办法就是设autoprefixer为false，或者针对某个属性忽autoprefixer</p><h3 id="3-怎么办"><a href="#3-怎么办" class="headerlink" title="3. 怎么办"></a>3. 怎么办</h3><ol><li><p>属性忽略autoprefixer</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// eslint-disable-next-line</span><br><span class="line"><span class="hljs-comment">/* autoprefixer: off*/</span></span><br><span class="line"><span class="hljs-selector-tag">-webkit-box-orient</span>: <span class="hljs-selector-tag">vertical</span>;</span><br><span class="line"><span class="hljs-comment">/* autoprefixer: on*/</span></span><br></pre></td></tr></table></figure></li><li><p>关闭cssnano的autoprefixer</p></li></ol><p>just remove the postcss config in vue-loader’s config</p><p>Add the following option to prevent autoprefixer from removing prefixes (<strong>for cssnano v3 only</strong>):</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  autoprefixer: &#123;</span><br><span class="line">    remove: false</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then -webkit-box-orient will be preserved.</p><ol start="3"><li><figure class="highlight plain hljs"><figcaption><span>插件问题</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```cs</span><br><span class="line">new OptimizeCSSPlugin(&#123;</span><br><span class="line">  cssProcessorOptions: config.build.productionSourceMap</span><br><span class="line">    ? &#123; safe: true, map: &#123; inline: false &#125; &#125;</span><br><span class="line">    : &#123; safe: true &#125;</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-实际遇到的问题&quot;&gt;&lt;a href=&quot;#1-实际遇到的问题&quot; class=&quot;headerlink&quot; title=&quot;1. 实际遇到的问题&quot;&gt;&lt;/a&gt;1. 实际遇到的问题&lt;/h3&gt;&lt;p&gt;项目中经常会遇到css的一些奇怪问题，有些css属性的设置在在本地编译运行的时候是好的，但是打包上线之后这个属性就平白无故的没有了？&lt;/p&gt;
&lt;p&gt;具体场景&lt;br&gt;在处理多行文本溢出时，需要使用&lt;code&gt;-webkit-box-orient: vertial&lt;/code&gt;，在本地开发测试一切正常，但是在webpack编译之后，检查样式并没有这个属性，其他的属性都有。&lt;/p&gt;
    
    </summary>
    
      <category term="webpack" scheme="http://wangytbest.github.io/categories/webpack/"/>
    
    
      <category term="webpack" scheme="http://wangytbest.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>URL操作处理</title>
    <link href="http://wangytbest.github.io/2018/05/30/URL%E6%93%8D%E4%BD%9C%E5%A4%84%E7%90%86/"/>
    <id>http://wangytbest.github.io/2018/05/30/URL操作处理/</id>
    <published>2018-05-30T07:02:33.000Z</published>
    <updated>2019-04-09T06:59:54.514Z</updated>
    
    <content type="html"><![CDATA[<p>URL<br><a id="more"></a><br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * URL模块</span></span><br><span class="line"><span class="hljs-comment"> * @param  &#123;[type]&#125; require [description]</span></span><br><span class="line"><span class="hljs-comment"> * @param  &#123;[type]&#125; exports [description]</span></span><br><span class="line"><span class="hljs-comment"> * @param  &#123;[type]&#125; module  [description]</span></span><br><span class="line"><span class="hljs-comment"> * @return &#123;[type]&#125;         [description]</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line">define(<span class="hljs-string">'url'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">require, exports, module</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> _cacheThisModule_;</span><br><span class="line">    <span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">        <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">         * 设置hash</span></span><br><span class="line"><span class="hljs-comment">         * @param name</span></span><br><span class="line"><span class="hljs-comment">         */</span></span><br><span class="line">        setHash: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">name</span>) </span>&#123;</span><br><span class="line">            setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                location.hash = name;</span><br><span class="line">            &#125;, <span class="hljs-number">0</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">         * 获取当前url中的hash值</span></span><br><span class="line"><span class="hljs-comment">         * @param url</span></span><br><span class="line"><span class="hljs-comment">         * @return String</span></span><br><span class="line"><span class="hljs-comment">         */</span></span><br><span class="line">        getHash: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">url</span>) </span>&#123;</span><br><span class="line">            <span class="hljs-keyword">var</span> u = url || location.hash;</span><br><span class="line">            <span class="hljs-keyword">return</span> u ? u.replace(<span class="hljs-regexp">/.*#/</span>, <span class="hljs-string">""</span>) : <span class="hljs-string">""</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">         *根据hash获取对应的模块名</span></span><br><span class="line"><span class="hljs-comment">         */</span></span><br><span class="line">        getHashModelName: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            <span class="hljs-keyword">var</span> hash = <span class="hljs-keyword">this</span>.getHash();</span><br><span class="line">            <span class="hljs-keyword">return</span> (hash ? hash.split(<span class="hljs-string">"&amp;"</span>)[<span class="hljs-number">0</span>].split(<span class="hljs-string">"="</span>)[<span class="hljs-number">0</span>] : []);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">         *从hash中获取action</span></span><br><span class="line"><span class="hljs-comment">         */</span></span><br><span class="line">        getHashActionName: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            <span class="hljs-keyword">var</span> hash = <span class="hljs-keyword">this</span>.getHash();</span><br><span class="line">            <span class="hljs-keyword">if</span> (hash == <span class="hljs-string">""</span>)<span class="hljs-keyword">return</span> <span class="hljs-string">""</span>;</span><br><span class="line">            <span class="hljs-keyword">return</span> (hash ? hash.split(<span class="hljs-string">"&amp;"</span>) : [])[<span class="hljs-number">0</span>].split(<span class="hljs-string">"="</span>)[<span class="hljs-number">1</span>];</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">         * 从hash中获取name对应的值</span></span><br><span class="line"><span class="hljs-comment">         */</span></span><br><span class="line">        getHashParam: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">name</span>) </span>&#123;</span><br><span class="line">            <span class="hljs-keyword">var</span> result = <span class="hljs-keyword">this</span>.getHash().match(<span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">"(^|&amp;)"</span> + name + <span class="hljs-string">"=([^&amp;]*)(&amp;|$)"</span>));</span><br><span class="line">            <span class="hljs-keyword">return</span> result != <span class="hljs-literal">null</span> ? result[<span class="hljs-number">2</span>] : <span class="hljs-string">""</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">         *从URL中获取参数对应的值</span></span><br><span class="line"><span class="hljs-comment">         */</span></span><br><span class="line">        getUrlParam: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">name, url</span>) </span>&#123;</span><br><span class="line">            <span class="hljs-comment">//参数：变量名，url为空则表从当前页面的url中取</span></span><br><span class="line">            <span class="hljs-keyword">var</span> u = <span class="hljs-built_in">arguments</span>[<span class="hljs-number">1</span>] || <span class="hljs-built_in">window</span>.location.search,</span><br><span class="line">                reg = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">"(^|&amp;)"</span> + name + <span class="hljs-string">"=([^&amp;]*)(&amp;|$)"</span>, <span class="hljs-string">'i'</span>),</span><br><span class="line">                r = u.substr(u.indexOf(<span class="hljs-string">"\?"</span>) + <span class="hljs-number">1</span>).match(reg);</span><br><span class="line">            <span class="hljs-keyword">return</span> r != <span class="hljs-literal">null</span> ? r[<span class="hljs-number">2</span>] : <span class="hljs-string">""</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">         *获取所有HASH的参数，剔除model.</span></span><br><span class="line"><span class="hljs-comment">         */</span></span><br><span class="line">        getParams: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            <span class="hljs-keyword">var</span> param = [],</span><br><span class="line">                hash = <span class="hljs-keyword">this</span>.getHash();</span><br><span class="line">            paramArr = hash ? hash.split(<span class="hljs-string">"&amp;"</span>) : [];</span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>, l = paramArr.length; i &lt; l; i++) &#123;</span><br><span class="line">                param.push(paramArr[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">return</span> param;</span><br><span class="line">        &#125;,</span><br><span class="line">        decodeUrl: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">url</span>) </span>&#123;</span><br><span class="line">            url = <span class="hljs-built_in">decodeURIComponent</span>(url);</span><br><span class="line">            <span class="hljs-keyword">var</span> urlObj = <span class="hljs-keyword">this</span>.parseUrl(url), decodedParam = [];</span><br><span class="line">            $.each(urlObj.params, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">key, value</span>) </span>&#123;</span><br><span class="line">                value = <span class="hljs-built_in">decodeURIComponent</span>(value);</span><br><span class="line">                decodedParam.push(key + <span class="hljs-string">"="</span> + value);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="hljs-keyword">var</span> urlPrefix = url.split(<span class="hljs-string">"?"</span>)[<span class="hljs-number">0</span>];</span><br><span class="line">            <span class="hljs-keyword">return</span> urlPrefix + <span class="hljs-string">"?"</span> + decodedParam.join(<span class="hljs-string">"&amp;"</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        parseUrl: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">url</span>) </span>&#123;</span><br><span class="line">            <span class="hljs-keyword">var</span> a = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'a'</span>);</span><br><span class="line">            a.href = url;</span><br><span class="line">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="line">                source: url,</span><br><span class="line">                protocol: a.protocol.replace(<span class="hljs-string">':'</span>, <span class="hljs-string">''</span>),</span><br><span class="line">                host: a.hostname,</span><br><span class="line">                port: a.port,</span><br><span class="line">                query: a.search,</span><br><span class="line">                params: (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                    <span class="hljs-keyword">var</span> ret = &#123;&#125;,</span><br><span class="line">                        seg = a.search.replace(<span class="hljs-regexp">/^\?/</span>, <span class="hljs-string">''</span>).split(<span class="hljs-string">'&amp;'</span>),</span><br><span class="line">                        len = seg.length, i = <span class="hljs-number">0</span>, s;</span><br><span class="line">                    <span class="hljs-keyword">for</span> (; i &lt; len; i++) &#123;</span><br><span class="line">                        <span class="hljs-keyword">if</span> (!seg[i]) &#123;</span><br><span class="line">                            <span class="hljs-keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        s = seg[i].split(<span class="hljs-string">'='</span>);</span><br><span class="line">                        ret[s[<span class="hljs-number">0</span>]] = s[<span class="hljs-number">1</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="hljs-keyword">return</span> ret;</span><br><span class="line">                &#125;)(),</span><br><span class="line">                file: (a.pathname.match(<span class="hljs-regexp">/([^\/?#]+)$/i</span>) || [, <span class="hljs-string">''</span>])[<span class="hljs-number">1</span>],</span><br><span class="line">                hash: a.hash.replace(<span class="hljs-string">'#'</span>, <span class="hljs-string">''</span>),</span><br><span class="line">                path: a.pathname.replace(<span class="hljs-regexp">/^([^\/])/</span>, <span class="hljs-string">'/$1'</span>),</span><br><span class="line">                relative: (a.href.match(<span class="hljs-regexp">/tps?:\/\/[^\/]+(.+)/</span>) || [, <span class="hljs-string">''</span>])[<span class="hljs-number">1</span>],</span><br><span class="line">                segments: a.pathname.replace(<span class="hljs-regexp">/^\//</span>, <span class="hljs-string">''</span>).split(<span class="hljs-string">'/'</span>)</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        replaceParam: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">param, value, url, forceReplace</span>) </span>&#123;</span><br><span class="line">            url = url || location.href;</span><br><span class="line">            <span class="hljs-keyword">var</span> reg = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">"([\\?&amp;]"</span> + param + <span class="hljs-string">"=)[^&amp;#]*"</span>);</span><br><span class="line">            <span class="hljs-keyword">if</span> (!url.match(reg)) &#123;</span><br><span class="line">                <span class="hljs-keyword">return</span> (url.indexOf(<span class="hljs-string">"?"</span>) == <span class="hljs-number">-1</span>) ? (url + <span class="hljs-string">"?"</span> + param + <span class="hljs-string">"="</span> + value) : (url + <span class="hljs-string">"&amp;"</span> + param + <span class="hljs-string">"="</span> + value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">if</span> (forceReplace) &#123;</span><br><span class="line">                <span class="hljs-keyword">return</span> url.replace(reg, <span class="hljs-string">"$1"</span> + value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">return</span> url;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;URL&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://wangytbest.github.io/categories/Javascript/"/>
    
      <category term="util" scheme="http://wangytbest.github.io/categories/Javascript/util/"/>
    
    
  </entry>
  
  <entry>
    <title>localstroge本地缓存</title>
    <link href="http://wangytbest.github.io/2018/05/30/localstroge%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98/"/>
    <id>http://wangytbest.github.io/2018/05/30/localstroge本地缓存/</id>
    <published>2018-05-30T07:01:25.000Z</published>
    <updated>2019-04-09T07:02:46.230Z</updated>
    
    <content type="html"><![CDATA[<p>localStorage设置过期时间<br><a id="more"></a><br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="hljs-string">"localStorage"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">require, exports, module</span>)</span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> cache = <span class="hljs-built_in">require</span>(<span class="hljs-string">"cachev1"</span>).local;</span><br><span class="line">    <span class="hljs-keyword">var</span> <span class="hljs-built_in">Promise</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">"promise.min"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 将过期时间字符串转换成时间戳</span></span><br><span class="line"><span class="hljs-comment">     *  convertExpire("7d")</span></span><br><span class="line"><span class="hljs-comment">     *  convertExpire(3600)  1小时</span></span><br><span class="line"><span class="hljs-comment">     * @param  &#123;String&#125; val  过期时间，格式为`\d+[smhd]`，其中s 表示秒、m 分钟、h 小时、d 天，如 30d   默认是秒</span></span><br><span class="line"><span class="hljs-comment">     * @return &#123;Number&#125;      时间戳（单位s）</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">convertExpire</span>(<span class="hljs-params">val</span>) </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (!val) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">var</span> matches = (<span class="hljs-string">''</span> + val).match(<span class="hljs-regexp">/(\d+)([smhd])/</span>);</span><br><span class="line">        <span class="hljs-keyword">var</span> ms = <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> (matches) &#123;</span><br><span class="line">            <span class="hljs-keyword">switch</span> (matches[<span class="hljs-number">2</span>]) &#123;</span><br><span class="line">                <span class="hljs-keyword">case</span> <span class="hljs-string">'s'</span>:</span><br><span class="line">                    ms = matches[<span class="hljs-number">1</span>];</span><br><span class="line">                    <span class="hljs-keyword">break</span>;</span><br><span class="line">                <span class="hljs-keyword">case</span> <span class="hljs-string">'m'</span>:</span><br><span class="line">                    ms = matches[<span class="hljs-number">1</span>] * <span class="hljs-number">60</span>;</span><br><span class="line">                    <span class="hljs-keyword">break</span>;</span><br><span class="line">                <span class="hljs-keyword">case</span> <span class="hljs-string">'h'</span>:</span><br><span class="line">                    ms = matches[<span class="hljs-number">1</span>] * <span class="hljs-number">60</span> * <span class="hljs-number">60</span>;</span><br><span class="line">                    <span class="hljs-keyword">break</span>;</span><br><span class="line">                <span class="hljs-keyword">case</span> <span class="hljs-string">'d'</span>:</span><br><span class="line">                    ms = matches[<span class="hljs-number">1</span>] * <span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span>&#123;</span><br><span class="line">            ms = val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> ms;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">var</span> timeout = setTimeout;</span><br><span class="line">    <span class="hljs-keyword">var</span> storage = &#123;</span><br><span class="line">        <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">         * 将数据写入本地缓存</span></span><br><span class="line"><span class="hljs-comment">         *</span></span><br><span class="line"><span class="hljs-comment">         * @param  &#123;String&#125;          key      键名</span></span><br><span class="line"><span class="hljs-comment">         * @param  &#123;Object | String&#125; value    数据</span></span><br><span class="line"><span class="hljs-comment">         * @param  &#123;Object&#125;          options  可选项，可传expire 设定数据过期时间，格式参见convertExpire</span></span><br><span class="line"><span class="hljs-comment">         *</span></span><br><span class="line"><span class="hljs-comment">         * @return &#123;Promise&#125;         Promise实例</span></span><br><span class="line"><span class="hljs-comment">         */</span></span><br><span class="line">        <span class="hljs-keyword">set</span>:function(key, value, options) &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>)</span>&#123;</span><br><span class="line">                <span class="hljs-keyword">var</span> expire = convertExpire(<span class="hljs-keyword">typeof</span> options == <span class="hljs-string">'object'</span> &amp;&amp; options.expire ? options.expire : <span class="hljs-string">'7d'</span>);</span><br><span class="line">                timeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                    cache.setItem(key,value,expire,<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">ret</span>) </span>&#123;</span><br><span class="line">                        <span class="hljs-keyword">if</span>(ret==<span class="hljs-number">0</span>) resolve();</span><br><span class="line">                        <span class="hljs-keyword">else</span> reject();</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">         * 获取本地缓存数据，当数据已过期时会被清理掉</span></span><br><span class="line"><span class="hljs-comment">         *</span></span><br><span class="line"><span class="hljs-comment">         * @param  &#123;String&#125;  key         键名</span></span><br><span class="line"><span class="hljs-comment">         * @param  &#123;Mix&#125;     defaultVal  如设置了默认值，则保证不会被reject</span></span><br><span class="line"><span class="hljs-comment">         *</span></span><br><span class="line"><span class="hljs-comment">         * @return &#123;Promise&#125;      Promise实例</span></span><br><span class="line"><span class="hljs-comment">         */</span></span><br><span class="line">        <span class="hljs-keyword">get</span>:function(key, defaultVal) &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>)</span>&#123;</span><br><span class="line">                timeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                    <span class="hljs-keyword">var</span> value = cache.getItem(key);</span><br><span class="line">                    <span class="hljs-keyword">if</span>(value===<span class="hljs-string">""</span>||value===<span class="hljs-literal">null</span>)&#123;</span><br><span class="line">                        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> defaultVal!=<span class="hljs-string">"undefined"</span>)&#123;</span><br><span class="line">                            resolve(defaultVal);</span><br><span class="line">                        &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="line">                            reject();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="hljs-keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    resolve(value);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">         * 移除本地缓存数据</span></span><br><span class="line"><span class="hljs-comment">         */</span></span><br><span class="line">        remove:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">key</span>) </span>&#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>)</span>&#123;</span><br><span class="line">                timeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                    cache.removeItem(key);</span><br><span class="line">                    resolve();</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">         * 同步地设置本地缓存数据</span></span><br><span class="line"><span class="hljs-comment">         *</span></span><br><span class="line"><span class="hljs-comment">         * @deprecated 此方法只为了暂时兼容旧接口，会极大的影响性，能请勿使用！</span></span><br><span class="line"><span class="hljs-comment">         */</span></span><br><span class="line">        setSync:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">key, value, options</span>) </span>&#123;</span><br><span class="line">            <span class="hljs-keyword">var</span> expire = convertExpire(<span class="hljs-keyword">typeof</span> options == <span class="hljs-string">'object'</span> &amp;&amp; options.expire ? options.expire : <span class="hljs-string">'7d'</span>)</span><br><span class="line">            cache.setItem(key,value,expire);</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">         * 同步地获取本地缓存数据，当数据已过期时会被清理掉</span></span><br><span class="line"><span class="hljs-comment">         *</span></span><br><span class="line"><span class="hljs-comment">         * @deprecated 此方法只为了暂时兼容旧接口，会极大的影响性，能请勿使用！</span></span><br><span class="line"><span class="hljs-comment">         */</span></span><br><span class="line">        getSync:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">key</span>) </span>&#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> cache.getItem(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="hljs-built_in">module</span>.exports = storage;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;localStorage设置过期时间&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://wangytbest.github.io/categories/Javascript/"/>
    
      <category term="util" scheme="http://wangytbest.github.io/categories/Javascript/util/"/>
    
    
  </entry>
  
  <entry>
    <title>时间处理</title>
    <link href="http://wangytbest.github.io/2018/05/30/%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86/"/>
    <id>http://wangytbest.github.io/2018/05/30/时间处理/</id>
    <published>2018-05-30T06:58:34.000Z</published>
    <updated>2019-04-09T06:57:25.715Z</updated>
    
    <content type="html"><![CDATA[<p>时间处理方法</p> <a id="more"></a><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="hljs-string">"date"</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">require,exports,module</span>)</span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> _cacheThisModule_;</span><br><span class="line">    exports.format = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">date,formatStr</span>)</span>&#123;</span><br><span class="line"><span class="hljs-comment">//格式化时间</span></span><br><span class="line"><span class="hljs-keyword">var</span>arrWeek=[<span class="hljs-string">'日'</span>,<span class="hljs-string">'一'</span>,<span class="hljs-string">'二'</span>,<span class="hljs-string">'三'</span>,<span class="hljs-string">'四'</span>,<span class="hljs-string">'五'</span>,<span class="hljs-string">'六'</span>],</span><br><span class="line">str=formatStr</span><br><span class="line">.replace(<span class="hljs-regexp">/yyyy|YYYY/</span>,date.getFullYear())</span><br><span class="line">.replace(<span class="hljs-regexp">/yy|YY/</span>,$addZero(date.getFullYear() % <span class="hljs-number">100</span>,<span class="hljs-number">2</span>))</span><br><span class="line">.replace(<span class="hljs-regexp">/mm|MM/</span>,$addZero(date.getMonth()+<span class="hljs-number">1</span>,<span class="hljs-number">2</span>))</span><br><span class="line">.replace(<span class="hljs-regexp">/m|M/g</span>,date.getMonth()+<span class="hljs-number">1</span>)</span><br><span class="line">.replace(<span class="hljs-regexp">/dd|DD/</span>,$addZero(date.getDate(),<span class="hljs-number">2</span>))</span><br><span class="line">.replace(<span class="hljs-regexp">/d|D/g</span>,date.getDate())</span><br><span class="line">.replace(<span class="hljs-regexp">/hh|HH/</span>,$addZero(date.getHours(),<span class="hljs-number">2</span>))</span><br><span class="line">.replace(<span class="hljs-regexp">/h|H/g</span>,date.getHours())</span><br><span class="line">.replace(<span class="hljs-regexp">/ii|II/</span>,$addZero(date.getMinutes(),<span class="hljs-number">2</span>))</span><br><span class="line">.replace(<span class="hljs-regexp">/i|I/g</span>,date.getMinutes())</span><br><span class="line">.replace(<span class="hljs-regexp">/ss|SS/</span>,$addZero(date.getSeconds(),<span class="hljs-number">2</span>))</span><br><span class="line">.replace(<span class="hljs-regexp">/s|S/g</span>,date.getSeconds())</span><br><span class="line">.replace(<span class="hljs-regexp">/w/g</span>,date.getDay())</span><br><span class="line">.replace(<span class="hljs-regexp">/W/g</span>,arrWeek[date.getDay()]); </span><br><span class="line"><span class="hljs-keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.getTimeDistance = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">ts</span>)</span>&#123;</span><br><span class="line"><span class="hljs-comment">//根据时间差计算剩余的时间，返回[天，小时，分，秒]</span></span><br><span class="line"><span class="hljs-keyword">var</span> timeLeft=[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>];<span class="hljs-comment">//结构：天、小时、分、秒</span></span><br><span class="line">timeLeft[<span class="hljs-number">0</span>]=(ts&gt;<span class="hljs-number">86400</span>)?<span class="hljs-built_in">parseInt</span>(ts/<span class="hljs-number">86400</span>):<span class="hljs-number">0</span>;</span><br><span class="line">ts=ts - timeLeft[<span class="hljs-number">0</span>] * <span class="hljs-number">86400</span>;</span><br><span class="line">timeLeft[<span class="hljs-number">1</span>]=(ts&gt;<span class="hljs-number">3600</span>)?<span class="hljs-built_in">parseInt</span>(ts/<span class="hljs-number">3600</span>):<span class="hljs-number">0</span>;</span><br><span class="line">ts=ts - timeLeft[<span class="hljs-number">1</span>] * <span class="hljs-number">3600</span>;</span><br><span class="line">timeLeft[<span class="hljs-number">2</span>]=(ts&gt;<span class="hljs-number">60</span>)?<span class="hljs-built_in">parseInt</span>(ts/<span class="hljs-number">60</span>):<span class="hljs-number">0</span>;</span><br><span class="line">timeLeft[<span class="hljs-number">3</span>]=ts - timeLeft[<span class="hljs-number">2</span>] * <span class="hljs-number">60</span>;</span><br><span class="line"><span class="hljs-keyword">return</span> timeLeft;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">exports.getTimeInterval = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">st,et</span>)</span>&#123;</span><br><span class="line"><span class="hljs-comment">//返回两个时间之间的间隔的描述字符串</span></span><br><span class="line"><span class="hljs-keyword">var</span> dateLeft = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> hourLeft = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> minuteLeft = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> secondLeft = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> timeLeft=[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>];<span class="hljs-comment">//结构：天、小时、分、秒</span></span><br><span class="line"><span class="hljs-keyword">var</span> timeStr=<span class="hljs-string">""</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> ts=(et&gt;st)?<span class="hljs-built_in">parseInt</span>((et-st)/<span class="hljs-number">1000</span>):<span class="hljs-number">0</span>;</span><br><span class="line">timeLeft[<span class="hljs-number">0</span>]=(ts&gt;<span class="hljs-number">86400</span>)?<span class="hljs-built_in">parseInt</span>(ts/<span class="hljs-number">86400</span>):<span class="hljs-number">0</span>;</span><br><span class="line">ts=ts - timeLeft[<span class="hljs-number">0</span>] * <span class="hljs-number">86400</span>;</span><br><span class="line">timeLeft[<span class="hljs-number">1</span>]=(ts&gt;<span class="hljs-number">3600</span>)?<span class="hljs-built_in">parseInt</span>(ts/<span class="hljs-number">3600</span>):<span class="hljs-number">0</span>;</span><br><span class="line">ts=ts - timeLeft[<span class="hljs-number">1</span>] * <span class="hljs-number">3600</span>;</span><br><span class="line">timeLeft[<span class="hljs-number">2</span>]=(ts&gt;<span class="hljs-number">60</span>)?<span class="hljs-built_in">parseInt</span>(ts/<span class="hljs-number">60</span>):<span class="hljs-number">0</span>;</span><br><span class="line">timeLeft[<span class="hljs-number">3</span>]=ts - timeLeft[<span class="hljs-number">2</span>] * <span class="hljs-number">60</span>;</span><br><span class="line">timeStr=(timeLeft[<span class="hljs-number">0</span>]&gt;<span class="hljs-number">0</span>)?timeLeft[<span class="hljs-number">0</span>]+<span class="hljs-string">"天"</span>:<span class="hljs-string">""</span>;</span><br><span class="line">timeStr+=(timeLeft[<span class="hljs-number">0</span>]&lt;=<span class="hljs-number">0</span> &amp;&amp; timeLeft[<span class="hljs-number">1</span>]&lt;=<span class="hljs-number">0</span>)?<span class="hljs-string">""</span>:(timeLeft[<span class="hljs-number">1</span>]+<span class="hljs-string">"小时"</span>);</span><br><span class="line">timeStr+=(timeLeft[<span class="hljs-number">0</span>]&lt;=<span class="hljs-number">0</span> &amp;&amp; timeLeft[<span class="hljs-number">1</span>]&lt;=<span class="hljs-number">0</span> &amp;&amp; timeLeft[<span class="hljs-number">2</span>]&lt;=<span class="hljs-number">0</span>)?<span class="hljs-string">""</span>:(timeLeft[<span class="hljs-number">2</span>]+<span class="hljs-string">"分钟"</span>);</span><br><span class="line">timeStr+=(timeLeft[<span class="hljs-number">0</span>]&lt;=<span class="hljs-number">0</span> &amp;&amp; timeLeft[<span class="hljs-number">1</span>]&lt;=<span class="hljs-number">0</span> &amp;&amp; timeLeft[<span class="hljs-number">2</span>]&lt;=<span class="hljs-number">0</span> &amp;&amp; timeLeft[<span class="hljs-number">3</span>]&lt;=<span class="hljs-number">0</span>)?<span class="hljs-string">""</span>:timeLeft[<span class="hljs-number">3</span>]+<span class="hljs-string">"秒"</span>;</span><br><span class="line"><span class="hljs-keyword">return</span> timeStr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">$addZero</span>(<span class="hljs-params">v,size</span>)</span>&#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>,len=size-(v+<span class="hljs-string">""</span>).length;i&lt;len;i++)&#123;</span><br><span class="line">v=<span class="hljs-string">"0"</span>+v;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-keyword">return</span> v+<span class="hljs-string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.getServerTime = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">url</span>) </span>&#123;</span><br><span class="line"><span class="hljs-keyword">var</span> sysTime = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'SYSTIME'</span>);</span><br><span class="line"><span class="hljs-keyword">if</span>(sysTime)&#123;</span><br><span class="line"><span class="hljs-keyword">var</span> ts = sysTime.value.substring(<span class="hljs-number">0</span>, <span class="hljs-number">19</span>).split(<span class="hljs-string">'-'</span>),</span><br><span class="line">dObj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(ts[<span class="hljs-number">0</span>], <span class="hljs-built_in">parseInt</span>(ts[<span class="hljs-number">1</span>], <span class="hljs-number">10</span>) - <span class="hljs-number">1</span>, ts[<span class="hljs-number">2</span>], ts[<span class="hljs-number">3</span>], ts[<span class="hljs-number">4</span>], ts[<span class="hljs-number">5</span>]);</span><br><span class="line"><span class="hljs-keyword">return</span> dObj;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="hljs-keyword">var</span> xhr = $xhrMaker(),</span><br><span class="line">    url = url || <span class="hljs-string">"http://"</span> + <span class="hljs-built_in">window</span>.location.hostname+<span class="hljs-string">"/favicon.ico"</span>;</span><br><span class="line"><span class="hljs-keyword">try</span>&#123;</span><br><span class="line">xhr.open(<span class="hljs-string">"HEAD"</span>, url, <span class="hljs-literal">false</span>);</span><br><span class="line">xhr.send();</span><br><span class="line">&#125;<span class="hljs-keyword">catch</span>(e)&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();</span><br><span class="line">&#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(xhr.getResponseHeader(<span class="hljs-string">"Date"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">$xhrMaker</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line"><span class="hljs-keyword">var</span> xhr;</span><br><span class="line"><span class="hljs-keyword">try</span>&#123;<span class="hljs-comment">// Firefox, Opera 8.0+, Safari</span></span><br><span class="line">xhr=<span class="hljs-keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125;<span class="hljs-keyword">catch</span>(e)&#123;<span class="hljs-comment">//Internet Explorer</span></span><br><span class="line"><span class="hljs-keyword">try</span>&#123;</span><br><span class="line">xhr=<span class="hljs-keyword">new</span> ActiveXObject(<span class="hljs-string">"Msxml2.XMLHTTP"</span>);</span><br><span class="line">&#125;<span class="hljs-keyword">catch</span>(e)&#123;</span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line">xhr=<span class="hljs-keyword">new</span> ActiveXObject(<span class="hljs-string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">&#125;<span class="hljs-keyword">catch</span> (e)&#123;</span><br><span class="line">xhr=<span class="hljs-literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-keyword">return</span> xhr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;时间处理方法&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://wangytbest.github.io/categories/Javascript/"/>
    
      <category term="util" scheme="http://wangytbest.github.io/categories/Javascript/util/"/>
    
    
  </entry>
  
  <entry>
    <title>cookie操作</title>
    <link href="http://wangytbest.github.io/2018/05/30/cookie%E6%93%8D%E4%BD%9C/"/>
    <id>http://wangytbest.github.io/2018/05/30/cookie操作/</id>
    <published>2018-05-30T06:57:34.000Z</published>
    <updated>2019-04-09T07:10:41.051Z</updated>
    
    <content type="html"><![CDATA[<p>cookie处理操作<br><a id="more"></a></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="hljs-string">"cookie"</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">require,exports,module</span>)</span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> _cacheThisModule_;</span><br><span class="line">    exports.get = getCookie;</span><br><span class="line">    exports.set = setCookie;</span><br><span class="line">    exports.del = delCookie;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getCookie</span>(<span class="hljs-params">name</span>) </span>&#123;</span><br><span class="line">        <span class="hljs-comment">//读取COOKIE</span></span><br><span class="line">        <span class="hljs-keyword">var</span> reg = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">"(^| )"</span> + name + <span class="hljs-string">"(?:=([^;]*))?(;|$)"</span>), val = <span class="hljs-built_in">document</span>.cookie.match(reg);</span><br><span class="line">        <span class="hljs-keyword">if</span>(!val || !val[<span class="hljs-number">2</span>])&#123;<span class="hljs-keyword">return</span> <span class="hljs-string">""</span>;&#125;</span><br><span class="line">        <span class="hljs-keyword">var</span> res = val[<span class="hljs-number">2</span>];</span><br><span class="line">        <span class="hljs-keyword">try</span>&#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>(<span class="hljs-regexp">/(%[0-9A-F]&#123;2&#125;)&#123;2,&#125;/</span>.test(res))&#123;<span class="hljs-comment">//utf8编码</span></span><br><span class="line">               <span class="hljs-keyword">return</span> <span class="hljs-built_in">decodeURIComponent</span>(res);</span><br><span class="line">            &#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//unicode编码</span></span><br><span class="line">                <span class="hljs-keyword">return</span> <span class="hljs-built_in">unescape</span>(res);</span><br><span class="line">            &#125;            </span><br><span class="line">        &#125;<span class="hljs-keyword">catch</span>(e)&#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-built_in">unescape</span>(res);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setCookie</span>(<span class="hljs-params">name, value, expires, path, domain, secure</span>) </span>&#123;</span><br><span class="line">        <span class="hljs-comment">//写入COOKIES</span></span><br><span class="line">        <span class="hljs-keyword">var</span> exp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(), expires = <span class="hljs-built_in">arguments</span>[<span class="hljs-number">2</span>] || <span class="hljs-literal">null</span>, path = <span class="hljs-built_in">arguments</span>[<span class="hljs-number">3</span>] || <span class="hljs-string">"/"</span>, domain = <span class="hljs-built_in">arguments</span>[<span class="hljs-number">4</span>] || <span class="hljs-literal">null</span>, secure = <span class="hljs-built_in">arguments</span>[<span class="hljs-number">5</span>] || <span class="hljs-literal">false</span>;</span><br><span class="line">        expires ? exp.setMinutes(exp.getMinutes() + <span class="hljs-built_in">parseInt</span>(expires)) : <span class="hljs-string">""</span>;</span><br><span class="line">        <span class="hljs-built_in">document</span>.cookie = name + <span class="hljs-string">'='</span> + <span class="hljs-built_in">escape</span>(value) + ( expires ? <span class="hljs-string">';expires='</span> + exp.toGMTString() : <span class="hljs-string">''</span>) + ( path ? <span class="hljs-string">';path='</span> + path : <span class="hljs-string">''</span>) + ( domain ? <span class="hljs-string">';domain='</span> + domain : <span class="hljs-string">''</span>) + ( secure ? <span class="hljs-string">';secure'</span> : <span class="hljs-string">''</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">delCookie</span>(<span class="hljs-params">name, path, domain, secure</span>) </span>&#123;</span><br><span class="line">        <span class="hljs-comment">//删除cookie</span></span><br><span class="line">        <span class="hljs-keyword">var</span> value = getCookie(name);</span><br><span class="line">        <span class="hljs-keyword">if</span>(value != <span class="hljs-literal">null</span>) &#123;</span><br><span class="line">            <span class="hljs-keyword">var</span> exp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();</span><br><span class="line">            exp.setMinutes(exp.getMinutes() - <span class="hljs-number">1000</span>);</span><br><span class="line">            path = path || <span class="hljs-string">"/"</span>;</span><br><span class="line">            <span class="hljs-built_in">document</span>.cookie = name + <span class="hljs-string">'=;expires='</span> + exp.toGMTString() + ( path ? <span class="hljs-string">';path='</span> + path : <span class="hljs-string">''</span>) + ( domain ? <span class="hljs-string">';domain='</span> + domain : <span class="hljs-string">''</span>) + ( secure ? <span class="hljs-string">';secure'</span> : <span class="hljs-string">''</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;cookie处理操作&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://wangytbest.github.io/categories/Javascript/"/>
    
      <category term="util" scheme="http://wangytbest.github.io/categories/Javascript/util/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL安装教程</title>
    <link href="http://wangytbest.github.io/2018/05/29/MySQL%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <id>http://wangytbest.github.io/2018/05/29/MySQL安装教程/</id>
    <published>2018-05-29T10:34:44.000Z</published>
    <updated>2019-04-09T07:01:42.650Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-下载安装"><a href="#1-下载安装" class="headerlink" title="1. 下载安装"></a>1. 下载安装</h1><h2 id="1-1-下载"><a href="#1-1-下载" class="headerlink" title="1.1 下载"></a>1.1 下载</h2><p>MySQL8.0 For Windows zip包下载地址：<a href="https://dev.mysql.com/downloads/file/?id=476233" target="_blank" rel="noopener">MySQL8.0 For Window</a>，进入页面后可以不登录。后点击底部<code>No thanks, just start my download.</code>即可开始下载。或直接下载：<a href="https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.11-winx64.zip" target="_blank" rel="noopener">https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.11-winx64.zip</a><br><a id="more"></a></p><h2 id="1-2-安装"><a href="#1-2-安装" class="headerlink" title="1.2 安装"></a>1.2 安装</h2><p>解压zip包到安装目录</p><blockquote><p> 配置文件：在Windows系统中，配置文件默认是安装目录下的 <code>my.ini</code> 文件（或<code>my-default.ini</code>），部分配置需要在初始安装时配置，大部分也可以在安装完成后进行更改。当然，极端情况下，所有的都是可以更改的。</p></blockquote><blockquote><p>　　我们发现解压后的目录并没有<code>my.ini</code>文件，没关系可以自行创建。在安装根目录下添加 my.ini，比如我这里是：C:\Program Files\MySQL\my.ini，写入基本配置：</p></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"># 设置3306端口</span><br><span class="line">port=3306</span><br><span class="line"># 设置mysql的安装目录</span><br><span class="line">basedir=C:\Program Files\MySQL</span><br><span class="line"># 设置mysql数据库的数据的存放目录</span><br><span class="line">datadir=E:\database\MySQL\Data</span><br><span class="line"># 允许最大连接数</span><br><span class="line">max_connections=200</span><br><span class="line"># 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统</span><br><span class="line">max_connect_errors=10</span><br><span class="line"># 服务端使用的字符集默认为UTF8</span><br><span class="line">character-set-server=utf8</span><br><span class="line"># 创建新表时将使用的默认存储引擎</span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line"># 默认使用“mysql_native_password”插件认证</span><br><span class="line">default_authentication_plugin=mysql_native_password</span><br><span class="line">[mysql]</span><br><span class="line"># 设置mysql客户端默认字符集</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[client]</span><br><span class="line"># 设置mysql客户端连接服务端时默认使用的端口</span><br><span class="line">port=3306</span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure><p>注意，里面的 basedir 是本地的安装目录，datadir 是我数据库数据文件要存放的位置，各项配置需要根据自己的环境进行配置。<br>查看所有的配置项，可参考：<a href="https://dev.mysql.com/doc/refman/8.0/en/mysqld-option-tables.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/8.0/en/mysqld-option-tables.html</a></p><h1 id="2-初始化数据库"><a href="#2-初始化数据库" class="headerlink" title="2 初始化数据库"></a>2 初始化数据库</h1><p>在MySQL安装目录的 bin 目录下执行命令：</p><blockquote><p><code>mysqld --initialize --console</code></p></blockquote><p>执行完成后，会打印 root 用户的初始默认密码，比如：</p><figure class="highlight cmd hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function">C:\<span class="hljs-title">Users</span>\<span class="hljs-title">Administrator</span>&gt;<span class="hljs-title">cd</span> <span class="hljs-title">C</span>:\<span class="hljs-title">Program</span> <span class="hljs-title">Files</span>\<span class="hljs-title">MySQL</span>\<span class="hljs-title">bin</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-title">C</span>:\<span class="hljs-title">Program</span> <span class="hljs-title">Files</span>\<span class="hljs-title">MySQL</span>\<span class="hljs-title">bin</span>&gt;<span class="hljs-title">mysqld</span> --<span class="hljs-title">initialize</span> --<span class="hljs-title">console</span></span></span><br><span class="line"><span class="hljs-function">2018-04-28<span class="hljs-title">T15</span>:57:17.087519<span class="hljs-title">Z</span> 0 [<span class="hljs-title">System</span>] [<span class="hljs-title">MY</span>-013169] [<span class="hljs-title">Server</span>] <span class="hljs-title">C</span>:\<span class="hljs-title">Program</span> <span class="hljs-title">Files</span>\<span class="hljs-title">MySQL</span>\<span class="hljs-title">bin</span>\<span class="hljs-title">mysqld.exe</span> (<span class="hljs-title">mysqld</span> 8.0.11) <span class="hljs-title">initializing</span> <span class="hljs-title">of</span> <span class="hljs-title">server</span> <span class="hljs-title">in</span> <span class="hljs-title">progress</span> <span class="hljs-title">as</span> <span class="hljs-title">process</span> 4984</span></span><br><span class="line"><span class="hljs-function">2018-04-28<span class="hljs-title">T15</span>:57:24.859249<span class="hljs-title">Z</span> 5 [<span class="hljs-title">Note</span>] [<span class="hljs-title">MY</span>-010454] [<span class="hljs-title">Server</span>] <span class="hljs-title">A</span> <span class="hljs-title">temporary</span> <span class="hljs-title">password</span> <span class="hljs-title">is</span> <span class="hljs-title">generated</span> <span class="hljs-title">for</span> <span class="hljs-title">root</span>@<span class="hljs-title">localhost</span>: <span class="hljs-title">rI5rvf5x5G</span>,<span class="hljs-title">E</span></span></span><br><span class="line"><span class="hljs-function">2018-04-28<span class="hljs-title">T15</span>:57:27.106660<span class="hljs-title">Z</span> 0 [<span class="hljs-title">System</span>] [<span class="hljs-title">MY</span>-013170] [<span class="hljs-title">Server</span>] <span class="hljs-title">C</span>:\<span class="hljs-title">Program</span> <span class="hljs-title">Files</span>\<span class="hljs-title">MySQL</span>\<span class="hljs-title">bin</span>\<span class="hljs-title">mysqld.exe</span> (<span class="hljs-title">mysqld</span> 8.0.11) <span class="hljs-title">initializing</span> <span class="hljs-title">of</span> <span class="hljs-title">server</span> <span class="hljs-title">has</span> <span class="hljs-title">completed</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-title">C</span>:\<span class="hljs-title">Program</span> <span class="hljs-title">Files</span>\<span class="hljs-title">MySQL</span>\<span class="hljs-title">bin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意！执行输出结果里面有一段： <figure class="highlight plain hljs"><figcaption><span>[MY-010454] [Server] A temporary password is generated for root@localhost: rI5rvf5x5G,E``` 其中```root@localhost:```后面的```rI5rvf5x5G,E```就是初始密码（不含首位空格）。在没有更改密码前，需要记住这个密码，后续登录需要用到。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 3 安装数据库</span><br><span class="line"></span><br><span class="line">在MySQL安装目录的 bin 目录下执行命令（以管理员身份打开cmd命令行，或者在安装目录Shift+右键“在此处打开命令行窗口”）：</span><br><span class="line">&gt; ```mysqld --install [服务名]</span><br></pre></td></tr></table></figure></p><p>后面的服务名可以不写，默认的名字为 mysql。</p><p>安装完成之后，就可以通过命令<figure class="highlight plain hljs"><figcaption><span>start mysql```启动MySQL的服务了。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line">```cmd</span><br><span class="line">C:\Program Files\MySQL\bin&gt;mysqld --install</span><br><span class="line">Service successfully installed.</span><br><span class="line">C:\Program Files\MySQL\bin&gt;net start mysql</span><br><span class="line">MySQL 服务正在启动 ..</span><br><span class="line">MySQL 服务已经启动成功。</span><br></pre></td></tr></table></figure></p><h1 id="4-修改密码"><a href="#4-修改密码" class="headerlink" title="4 修改密码"></a>4 修改密码</h1><p>在MySQL安装目录的 bin 目录下执行命令：</p><blockquote><figure class="highlight plain hljs"><figcaption><span>-u root -p```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">这时候会提示输入密码，记住了上面第1.3步安装时的密码，填入即可登录成功，进入MySQL命令模式。</span><br><span class="line"></span><br><span class="line">修改密码:</span><br><span class="line">&gt; ```ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED WITH mysql_native_password BY &apos;新密码&apos;;</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight cmd hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">default_authentication_plugin=mysql_native_password</span><br></pre></td></tr></table></figure><figure class="highlight cmd hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function">C:\<span class="hljs-title">Program</span> <span class="hljs-title">Files</span>\<span class="hljs-title">MySQL</span>\<span class="hljs-title">bin</span>&gt;<span class="hljs-title">mysql</span> -<span class="hljs-title">u</span> <span class="hljs-title">root</span> -<span class="hljs-title">p</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-title">Enter</span> <span class="hljs-title">password</span>: ************</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-title">Welcome</span> <span class="hljs-title">to</span> <span class="hljs-title">the</span> <span class="hljs-title">MySQL</span> <span class="hljs-title">monitor</span>. <span class="hljs-title">Commands</span> <span class="hljs-title">end</span> <span class="hljs-title">with</span> ; <span class="hljs-title">or</span> \<span class="hljs-title">g</span>.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-title">Your</span> <span class="hljs-title">MySQL</span> <span class="hljs-title">connection</span> <span class="hljs-title">id</span> <span class="hljs-title">is</span> 8</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-title">Server</span> <span class="hljs-title">version</span>: 8.0.11</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-title">Copyright</span> (<span class="hljs-title">c</span>) 2000, 2018, <span class="hljs-title">Oracle</span> <span class="hljs-title">and</span>/<span class="hljs-title">or</span> <span class="hljs-title">its</span> <span class="hljs-title">affiliates</span>. <span class="hljs-title">All</span> <span class="hljs-title">rights</span> <span class="hljs-title">reserved</span>.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-title">Oracle</span> <span class="hljs-title">is</span> <span class="hljs-title">a</span> <span class="hljs-title">registered</span> <span class="hljs-title">trademark</span> <span class="hljs-title">of</span> <span class="hljs-title">Oracle</span> <span class="hljs-title">Corporation</span> <span class="hljs-title">and</span>/<span class="hljs-title">or</span> <span class="hljs-title">its</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-title">affiliates</span>. <span class="hljs-title">Other</span> <span class="hljs-title">names</span> <span class="hljs-title">may</span> <span class="hljs-title">be</span> <span class="hljs-title">trademarks</span> <span class="hljs-title">of</span> <span class="hljs-title">their</span> <span class="hljs-title">respective</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-title">owners</span>.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-title">Type</span> '<span class="hljs-title">help</span>;' <span class="hljs-title">or</span> '\<span class="hljs-title">h</span>' <span class="hljs-title">for</span> <span class="hljs-title">help</span>. <span class="hljs-title">Type</span> '\<span class="hljs-title">c</span>' <span class="hljs-title">to</span> <span class="hljs-title">clear</span> <span class="hljs-title">the</span> <span class="hljs-title">current</span> <span class="hljs-title">input</span> <span class="hljs-title">statement</span>.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-title">mysql</span>&gt; <span class="hljs-title">ALTER</span> <span class="hljs-title">USER</span> '<span class="hljs-title">root</span>'@'<span class="hljs-title">localhost</span>' <span class="hljs-title">IDENTIFIED</span> <span class="hljs-title">WITH</span> <span class="hljs-title">mysql_native_password</span> <span class="hljs-title">BY</span> '新密码';</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-title">Query</span> <span class="hljs-title">OK</span>, 0 <span class="hljs-title">rows</span> <span class="hljs-title">affected</span> (0.06 <span class="hljs-title">sec</span>)</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-title">mysql</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-下载安装&quot;&gt;&lt;a href=&quot;#1-下载安装&quot; class=&quot;headerlink&quot; title=&quot;1. 下载安装&quot;&gt;&lt;/a&gt;1. 下载安装&lt;/h1&gt;&lt;h2 id=&quot;1-1-下载&quot;&gt;&lt;a href=&quot;#1-1-下载&quot; class=&quot;headerlink&quot; title=&quot;1.1 下载&quot;&gt;&lt;/a&gt;1.1 下载&lt;/h2&gt;&lt;p&gt;MySQL8.0 For Windows zip包下载地址：&lt;a href=&quot;https://dev.mysql.com/downloads/file/?id=476233&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MySQL8.0 For Window&lt;/a&gt;，进入页面后可以不登录。后点击底部&lt;code&gt;No thanks, just start my download.&lt;/code&gt;即可开始下载。或直接下载：&lt;a href=&quot;https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.11-winx64.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.11-winx64.zip&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://wangytbest.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://wangytbest.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>浏览器判断</title>
    <link href="http://wangytbest.github.io/2018/05/18/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%88%A4%E6%96%AD/"/>
    <id>http://wangytbest.github.io/2018/05/18/浏览器判断/</id>
    <published>2018-05-18T06:09:14.000Z</published>
    <updated>2019-04-09T06:56:40.289Z</updated>
    
    <content type="html"><![CDATA[<p>移动端判断浏览器环境：</p><ul><li>微信浏览器</li><li>小程序</li><li>JD APP</li><li>浏览器</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> uaTypes = &#123;</span><br><span class="line">  APP: <span class="hljs-string">'app'</span>,</span><br><span class="line">  WECHAT: <span class="hljs-string">'webchat'</span>,</span><br><span class="line">  QQ: <span class="hljs-string">'qq'</span>,</span><br><span class="line">  MOBILE: <span class="hljs-string">'mobile'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <a id="more"></a><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> ua = navigator.userAgent</span><br><span class="line"><span class="hljs-keyword">const</span> type = <span class="hljs-function">(<span class="hljs-params">(</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/jdapp/i</span>.test(ua)) &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> uaTypes.APP</span><br><span class="line">  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/MicroMessenger/i</span>.test(ua)) &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> uaTypes.WECHAT</span><br><span class="line">  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/QQ/</span>.test(ua)) &#123;</span><br><span class="line">    <span class="hljs-comment">// 区分手机QQ和QQ浏览器</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/MQQBrowser/i</span>.test(ua)) &#123;</span><br><span class="line">      <span class="hljs-keyword">return</span> uaTypes.MOBILE</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">return</span> uaTypes.QQ</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> uaTypes.MOBILE</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;移动端判断浏览器环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;微信浏览器&lt;/li&gt;
&lt;li&gt;小程序&lt;/li&gt;
&lt;li&gt;JD APP&lt;/li&gt;
&lt;li&gt;浏览器&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; uaTypes = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  APP: &lt;span class=&quot;hljs-string&quot;&gt;&#39;app&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  WECHAT: &lt;span class=&quot;hljs-string&quot;&gt;&#39;webchat&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  QQ: &lt;span class=&quot;hljs-string&quot;&gt;&#39;qq&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  MOBILE: &lt;span class=&quot;hljs-string&quot;&gt;&#39;mobile&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Web / H5" scheme="http://wangytbest.github.io/categories/Web-H5/"/>
    
    
  </entry>
  
  <entry>
    <title>margin、padding的百分比计算</title>
    <link href="http://wangytbest.github.io/2018/04/20/margin%E3%80%81padding%E7%9A%84%E7%99%BE%E5%88%86%E6%AF%94%E8%AE%A1%E7%AE%97/"/>
    <id>http://wangytbest.github.io/2018/04/20/margin、padding的百分比计算/</id>
    <published>2018-04-20T02:54:12.000Z</published>
    <updated>2019-04-09T07:18:48.365Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CSS2-1-Box-model"><a href="#CSS2-1-Box-model" class="headerlink" title="CSS2.1 Box model"></a>CSS2.1 Box model</h3><blockquote><p>The percentage is calculated with respect to the width of the generated box’s containing block. Note that this is true for <code>margin-top</code> and <code>margin-bottom</code> as well.</p></blockquote><p>margin：百分比的计算基于生成框的包含块(父元素)的width（margin-top/bottom也是如此）。<br>padding同理</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;CSS2-1-Box-model&quot;&gt;&lt;a href=&quot;#CSS2-1-Box-model&quot; class=&quot;headerlink&quot; title=&quot;CSS2.1 Box model&quot;&gt;&lt;/a&gt;CSS2.1 Box model&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;T
      
    
    </summary>
    
      <category term="CSS" scheme="http://wangytbest.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://wangytbest.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>canvas精灵</title>
    <link href="http://wangytbest.github.io/2018/04/18/canvas%E7%B2%BE%E7%81%B5/"/>
    <id>http://wangytbest.github.io/2018/04/18/canvas精灵/</id>
    <published>2018-04-18T09:40:26.000Z</published>
    <updated>2019-04-09T07:08:58.895Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p><a href="http://javascript.ruanyifeng.com/htmlapi/requestanimationframe.html" target="_blank" rel="noopener">requestAnimationFrame</a><br><a href="https://segmentfault.com/a/1190000010435543" target="_blank" rel="noopener">使用 canvas 实现精灵动画</a><br><a href="http://www.williammalone.com/articles/create-html5-canvas-javascript-sprite-animation/" target="_blank" rel="noopener">CREATE A SPRITE ANIMATION WITH HTML5 CANVAS AND JAVASCRIPT</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame" target="_blank" rel="noopener">window.requestAnimationFrame</a><br><a href="http://www.zhangxinxu.com/wordpress/2013/09/css3-animation-requestanimationframe-tween-%E5%8A%A8%E7%94%BB%E7%AE%97%E6%B3%95/" target="_blank" rel="noopener">CSS3动画那么强，requestAnimationFrame还有毛线用？</a><br><a href="http://www.w3school.com.cn/tags/canvas_drawimage.asp" target="_blank" rel="noopener">HTML5 canvas drawImage() 方法</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;a href=&quot;http://javascript.ruanyifeng.com/htmlapi/requestanimationframe.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;requestAni
      
    
    </summary>
    
      <category term="Javascript" scheme="http://wangytbest.github.io/categories/Javascript/"/>
    
      <category term="canvas" scheme="http://wangytbest.github.io/categories/Javascript/canvas/"/>
    
    
      <category term="JS" scheme="http://wangytbest.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>数组对象判断</title>
    <link href="http://wangytbest.github.io/2018/04/12/%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E5%88%A4%E6%96%AD/"/>
    <id>http://wangytbest.github.io/2018/04/12/数组对象判断/</id>
    <published>2018-04-12T07:51:26.000Z</published>
    <updated>2019-04-09T07:10:56.977Z</updated>
    
    <content type="html"><![CDATA[<p>数组对象判断方法<br><a id="more"></a></p><h2 id="支付宝base-js"><a href="#支付宝base-js" class="headerlink" title="支付宝base.js"></a>支付宝base.js</h2><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span> ( value <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span> || </span><br><span class="line">  (!(value <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span>) &amp;&amp; </span><br><span class="line">  (<span class="hljs-built_in">Object</span>.prototype.toString.call((value)) == <span class="hljs-string">'[object Array]'</span>) || </span><br><span class="line">  <span class="hljs-keyword">typeof</span> value.length == <span class="hljs-string">'number'</span> &amp;&amp; </span><br><span class="line">  <span class="hljs-keyword">typeof</span> value.splice != <span class="hljs-string">'undefined'</span> &amp;&amp; </span><br><span class="line">  <span class="hljs-keyword">typeof</span> value.propertyIsEnumerable != <span class="hljs-string">'undefined'</span> &amp;&amp; </span><br><span class="line">  !value.propertyIsEnumerable(<span class="hljs-string">'splice'</span>))) &#123; </span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-string">'array'</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> arr = []; </span><br><span class="line">arr <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span>; <span class="hljs-comment">// true </span></span><br><span class="line">arr.constructor == <span class="hljs-built_in">Array</span>; <span class="hljs-comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="call-apply"><a href="#call-apply" class="headerlink" title="call/apply"></a>call/apply</h2><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">Object</span>.prototype.toString.call(value) == <span class="hljs-string">'[object Array]'</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> isArray = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">obj</span>) </span>&#123; </span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.prototype.toString.call(obj) === <span class="hljs-string">'[object Array]'</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h2><blockquote><p>typeof方法返回一个字符串，来表示数据的类型。</p></blockquote><table><thead><tr><th>数据类型</th><th style="text-align:center">type</th></tr></thead><tbody><tr><td>数据类型</td><td style="text-align:center">Type</td></tr><tr><td>Undefined</td><td style="text-align:center">undefined</td></tr><tr><td>Null</td><td style="text-align:center">object</td></tr><tr><td>布尔值</td><td style="text-align:center">boolean</td></tr><tr><td>数值</td><td style="text-align:center">number</td></tr><tr><td>字符串</td><td style="text-align:center">string</td></tr><tr><td>Symbol (ECMAScript 6 新增)</td><td style="text-align:center">symbol</td></tr><tr><td>宿主对象(JS环境提供的，比如浏览器)</td><td style="text-align:center">Implementation-dependent</td></tr><tr><td>函数对象</td><td style="text-align:center">function</td></tr><tr><td>任何其他对象</td><td style="text-align:center">object</td></tr></tbody></table><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> a = [];</span><br><span class="line"><span class="hljs-keyword">var</span> b = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">typeof</span> a; <span class="hljs-comment">// "object"</span></span><br><span class="line"><span class="hljs-keyword">typeof</span> b; <span class="hljs-comment">// "object"</span></span><br><span class="line"></span><br><span class="line">a <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span> <span class="hljs-comment">// true</span></span><br><span class="line">b <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span> <span class="hljs-comment">// true</span></span><br><span class="line"></span><br><span class="line">a <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span> <span class="hljs-comment">// true</span></span><br><span class="line">b <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span> <span class="hljs-comment">// false</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数组对象判断方法&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://wangytbest.github.io/categories/Javascript/"/>
    
      <category term="util" scheme="http://wangytbest.github.io/categories/Javascript/util/"/>
    
    
      <category term="Javascript" scheme="http://wangytbest.github.io/tags/Javascript/"/>
    
      <category term="util" scheme="http://wangytbest.github.io/tags/util/"/>
    
  </entry>
  
  <entry>
    <title>sass基础入门</title>
    <link href="http://wangytbest.github.io/2018/04/03/sass%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    <id>http://wangytbest.github.io/2018/04/03/sass基础入门/</id>
    <published>2018-04-03T12:39:08.000Z</published>
    <updated>2019-04-09T07:00:51.928Z</updated>
    
    <content type="html"><![CDATA[<h2 id="css功能拓展"><a href="#css功能拓展" class="headerlink" title="css功能拓展"></a>css功能拓展</h2><h3 id="嵌套（Nested-Rules）"><a href="#嵌套（Nested-Rules）" class="headerlink" title="嵌套（Nested Rules）"></a>嵌套（Nested Rules）</h3><p>sass允许将css样式嵌套进另一套样式中，内层的样式将他的外层的选择器作为父选择器。</p><h3 id="父选择器-amp-Referencing-Parent-Selectors-amp"><a href="#父选择器-amp-Referencing-Parent-Selectors-amp" class="headerlink" title="父选择器 &amp; (Referencing Parent Selectors: &amp;)"></a>父选择器 &amp; (Referencing Parent Selectors: &amp;)</h3><h3 id="属性嵌套-Nested-Properties"><a href="#属性嵌套-Nested-Properties" class="headerlink" title="属性嵌套 (Nested Properties)"></a>属性嵌套 (Nested Properties)</h3><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.funky</span> &#123;</span><br><span class="line">  <span class="hljs-attribute">font</span>: &#123;</span><br><span class="line">    family: fantasy;</span><br><span class="line">    <span class="hljs-attribute">size</span>: <span class="hljs-number">30em</span>;</span><br><span class="line">    <span class="hljs-attribute">weight</span>: bold;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="占位符选择器-foo-Placeholder-Selectors-foo"><a href="#占位符选择器-foo-Placeholder-Selectors-foo" class="headerlink" title="占位符选择器 %foo (Placeholder Selectors: %foo)"></a>占位符选择器 %foo (Placeholder Selectors: %foo)</h3><a id="more"></a><h2 id="SassScript"><a href="#SassScript" class="headerlink" title="SassScript"></a>SassScript</h2><h3 id="变量-Variables"><a href="#变量-Variables" class="headerlink" title="变量 $ (Variables: $)"></a>变量 $ (Variables: $)</h3><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$width: 5em;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-id">#main</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">width</span>: $width;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>变量支持块级作用域，嵌套规则内定义的变量只能在嵌套规则内使用（局部变量），不在嵌套规则内定义的变量则可在任何地方使用（全局变量）。将局部变量转换为全局变量可以添加 <code>!global</code> 声明<br><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-id">#main</span> &#123;</span><br><span class="line">    $width: 5em !global;</span><br><span class="line">    width: $width;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-id">#sidebar</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">width</span>: $width;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;css功能拓展&quot;&gt;&lt;a href=&quot;#css功能拓展&quot; class=&quot;headerlink&quot; title=&quot;css功能拓展&quot;&gt;&lt;/a&gt;css功能拓展&lt;/h2&gt;&lt;h3 id=&quot;嵌套（Nested-Rules）&quot;&gt;&lt;a href=&quot;#嵌套（Nested-Rules）&quot; class=&quot;headerlink&quot; title=&quot;嵌套（Nested Rules）&quot;&gt;&lt;/a&gt;嵌套（Nested Rules）&lt;/h3&gt;&lt;p&gt;sass允许将css样式嵌套进另一套样式中，内层的样式将他的外层的选择器作为父选择器。&lt;/p&gt;
&lt;h3 id=&quot;父选择器-amp-Referencing-Parent-Selectors-amp&quot;&gt;&lt;a href=&quot;#父选择器-amp-Referencing-Parent-Selectors-amp&quot; class=&quot;headerlink&quot; title=&quot;父选择器 &amp;amp; (Referencing Parent Selectors: &amp;amp;)&quot;&gt;&lt;/a&gt;父选择器 &amp;amp; (Referencing Parent Selectors: &amp;amp;)&lt;/h3&gt;&lt;h3 id=&quot;属性嵌套-Nested-Properties&quot;&gt;&lt;a href=&quot;#属性嵌套-Nested-Properties&quot; class=&quot;headerlink&quot; title=&quot;属性嵌套 (Nested Properties)&quot;&gt;&lt;/a&gt;属性嵌套 (Nested Properties)&lt;/h3&gt;&lt;figure class=&quot;highlight css hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.funky&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;hljs-attribute&quot;&gt;font&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    family: fantasy;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;hljs-attribute&quot;&gt;size&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;30em&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;hljs-attribute&quot;&gt;weight&lt;/span&gt;: bold;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;占位符选择器-foo-Placeholder-Selectors-foo&quot;&gt;&lt;a href=&quot;#占位符选择器-foo-Placeholder-Selectors-foo&quot; class=&quot;headerlink&quot; title=&quot;占位符选择器 %foo (Placeholder Selectors: %foo)&quot;&gt;&lt;/a&gt;占位符选择器 %foo (Placeholder Selectors: %foo)&lt;/h3&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://wangytbest.github.io/categories/CSS/"/>
    
      <category term="SCSS" scheme="http://wangytbest.github.io/categories/CSS/SCSS/"/>
    
    
  </entry>
  
  <entry>
    <title>vue中keep-alive</title>
    <link href="http://wangytbest.github.io/2018/04/03/vue%E4%B8%ADkeep-alive/"/>
    <id>http://wangytbest.github.io/2018/04/03/vue中keep-alive/</id>
    <published>2018-04-03T12:07:54.000Z</published>
    <updated>2019-04-09T06:59:26.625Z</updated>
    
    <content type="html"><![CDATA[<h2 id="keep-alive使用"><a href="#keep-alive使用" class="headerlink" title="keep-alive使用"></a>keep-alive使用</h2><p><code>&lt;keep-alive&gt;</code>包裹动态的组件，会缓存不活动的组件实例，而不是销毁他们。<code>&lt;keep-alive&gt;</code>是一个抽象的组件，他自身不会渲染一个DOM元素，也不会出现在父组件链中。<br>当组件在<code>&lt;keep-alive&gt;</code>组件内被切换，它的<code>actived</code>和<code>deactived</code>这两个生命周期钩子函数将会被对应执行。</p><blockquote><p>Vue2.2.0及以上版本，<code>activated</code> 和 <code>deactivated</code> 将会在 <code>&lt;keep-alive&gt;</code> 树内的所有嵌套组件中触发。<br><strong>主要用于保留组件状态或避免重新渲染。</strong></p></blockquote><a id="more"></a><p>当引入<code>&lt;keep-alive&gt;</code>的时候，页面第一次进入，钩子的触发顺序<code>created</code> -&gt; <code>mounted</code> -&gt; <code>activated</code>，退出时触发<code>deactivated</code>。当再次进入（前进或者后退）时，只触发<code>activated</code>。</p><p><code>&lt;keep-alive&gt;</code>之后页面模板第一次初始化解析变成HTML片段后，再次进入就不在重新解析而是读取内存中的数据，即，只有当数据变化时，才使用VirtualDOM进行diff更新。故，页面进入的数据获取应该在<code>activated</code>中也放一份。数据下载完毕手动操作DOM的部分也应该在<code>activated</code>中执行才会生效。</p><p>所以，应该<code>activated</code>中留一份数据获取的代码，或者不要<code>created</code>部分，直接将<code>created</code>中的代码转移到<code>activated</code>中。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">&lt;!-- 基本 --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">keep-alive</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">"view"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">keep-alive</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">&lt;!-- 多个条件判断的子组件 --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">keep-alive</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">comp-a</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"a &gt; 1"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">comp-a</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">comp-b</span> <span class="hljs-attr">v-else</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">comp-b</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">keep-alive</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">&lt;!-- 和 `&lt;transition&gt;` 一起使用 --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">transition</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">keep-alive</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">"view"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">keep-alive</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="include-和-exclude"><a href="#include-和-exclude" class="headerlink" title="include 和 exclude"></a>include 和 exclude</h2><p><strong>include 和 exclude 属性允许组件有条件地缓存。</strong>二者都可以用逗号分隔字符串、正则表达式或一个数组来表示：<br><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">&lt;!-- 逗号分隔字符串 --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">keep-alive</span> <span class="hljs-attr">include</span>=<span class="hljs-string">"a,b"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">"view"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">keep-alive</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">&lt;!-- 正则表达式 (使用 `v-bind`) --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">keep-alive</span> <span class="hljs-attr">:include</span>=<span class="hljs-string">"/a|b/"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">"view"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">keep-alive</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">&lt;!-- 数组 (使用 `v-bind`) --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">keep-alive</span> <span class="hljs-attr">:include</span>=<span class="hljs-string">"['a', 'b']"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">"view"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="actived-和-deactived"><a href="#actived-和-deactived" class="headerlink" title="actived 和 deactived"></a>actived 和 deactived</h2><ul><li>类型：<code>Function</code></li><li>说明：<code>&lt;keep-alive&gt;</code>组件 <strong>激活/停用</strong> 时调用（该钩子在服务器端渲染期间不被调用）</li></ul><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>项目开发中，使用<code>Vue2.0</code> 搭配路由切换<code>vue-router</code>，所有路径匹配到的视图组件都会被缓存。<br>如何使某些组件不缓存？</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">keep-alive</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span></span><br><span class="line">        <span class="hljs-comment">&lt;!-- 所有路径匹配到的视图组件都会被缓存！ --&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><p>#1. 使用<code>include</code>和<code>exclude</code><br><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">keep-alive</span> <span class="hljs-attr">include</span>=<span class="hljs-string">'a,b,c'</span> <span class="hljs-attr">exclude</span>=<span class="hljs-string">'d,e,f'</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span></span><br><span class="line">        <span class="hljs-comment">&lt;!-- 所有路径匹配到的视图组件都会被缓存！ --&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>#2. 使用router.meta属性<br>设置路由，通过meta属性判断组件是否需要缓存</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// routes 配置</span></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="hljs-string">'/'</span>,</span><br><span class="line">    name: <span class="hljs-string">'home'</span>,</span><br><span class="line">    component: Home,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      keepAlive: <span class="hljs-literal">true</span> <span class="hljs-comment">// 需要被缓存</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    path: <span class="hljs-string">'/:id'</span>,</span><br><span class="line">    name: <span class="hljs-string">'edit'</span>,</span><br><span class="line">    component: Edit,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      keepAlive: <span class="hljs-literal">false</span> <span class="hljs-comment">// 不需要被缓存</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">keep-alive</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"$route.meta.keepAlive"</span>&gt;</span></span><br><span class="line">        <span class="hljs-comment">&lt;!-- 这里是会被缓存的视图组件，比如 Home！ --&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">keep-alive</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"!$route.meta.keepAlive"</span>&gt;</span></span><br><span class="line">    <span class="hljs-comment">&lt;!-- 这里是不被缓存的视图组件，比如 Edit！ --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>部分转载<a href="https://blog.csdn.net/zgrkaka/article/details/73480947?locationNum=1&amp;fps=1" target="_blank" rel="noopener">vue-router 之 keep-alive</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;keep-alive使用&quot;&gt;&lt;a href=&quot;#keep-alive使用&quot; class=&quot;headerlink&quot; title=&quot;keep-alive使用&quot;&gt;&lt;/a&gt;keep-alive使用&lt;/h2&gt;&lt;p&gt;&lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt;包裹动态的组件，会缓存不活动的组件实例，而不是销毁他们。&lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt;是一个抽象的组件，他自身不会渲染一个DOM元素，也不会出现在父组件链中。&lt;br&gt;当组件在&lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt;组件内被切换，它的&lt;code&gt;actived&lt;/code&gt;和&lt;code&gt;deactived&lt;/code&gt;这两个生命周期钩子函数将会被对应执行。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Vue2.2.0及以上版本，&lt;code&gt;activated&lt;/code&gt; 和 &lt;code&gt;deactivated&lt;/code&gt; 将会在 &lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt; 树内的所有嵌套组件中触发。&lt;br&gt;&lt;strong&gt;主要用于保留组件状态或避免重新渲染。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://wangytbest.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://wangytbest.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>flex布局在UC和微信浏览器下的兼容性问题</title>
    <link href="http://wangytbest.github.io/2018/04/03/flex%E5%B8%83%E5%B1%80%E5%9C%A8UC%E5%92%8C%E5%BE%AE%E4%BF%A1%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8B%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98/"/>
    <id>http://wangytbest.github.io/2018/04/03/flex布局在UC和微信浏览器下的兼容性问题/</id>
    <published>2018-04-03T11:56:59.000Z</published>
    <updated>2019-04-09T07:05:48.563Z</updated>
    
    <content type="html"><![CDATA[<h2 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h2><h2 id="UC和微信浏览器下的兼容性问题"><a href="#UC和微信浏览器下的兼容性问题" class="headerlink" title="UC和微信浏览器下的兼容性问题"></a>UC和微信浏览器下的兼容性问题</h2><p>所有<code>webkit</code>内核的浏览器（包括移动端）都支持 flex 布局，只不过一些浏览器只支持旧语法，如：<code>display: -webkit-box</code> 。<br>旧语法和标准的 <code>flex</code> 语法有较大区别，需要做好兼容。不过可以来使用 <code>autoprefixer</code> 来自动处理这些兼容性问题，而开发时只需要写标准的语法就好了。</p><p>假如没有使用<code>autoprefixer</code>，在UC浏览器和微信内置浏览器中，使用<code>display:flex;</code>时会不起作用，要加上兼容性写法。<br><a id="more"></a><br><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">display</span>: <span class="hljs-selector-tag">-webkit-box</span>;      <span class="hljs-comment">/* OLD - iOS 6-, Safari 3.1-6 */</span></span><br><span class="line"><span class="hljs-selector-tag">display</span>: <span class="hljs-selector-tag">-moz-box</span>;         <span class="hljs-comment">/* OLD - Firefox 19- (buggy but mostly works) */</span></span><br><span class="line"><span class="hljs-selector-tag">display</span>: <span class="hljs-selector-tag">-ms-flexbox</span>;      <span class="hljs-comment">/* TWEENER - IE 10 */</span></span><br><span class="line"><span class="hljs-selector-tag">display</span>: <span class="hljs-selector-tag">-webkit-flex</span>;     <span class="hljs-comment">/* NEW - Chrome */</span></span><br><span class="line"><span class="hljs-selector-tag">display</span>: <span class="hljs-selector-tag">flex</span>;</span><br></pre></td></tr></table></figure></p><p>使用<code>flex:1;</code>时也要添加兼容性写法</p><pre class=" language-css">           <span class="selector-tag">width</span>: 20%;       <span class="comment"><code class="language-css">           <span class="selector-tag">width</span>: 20%;       <span class="comment">/* For old syntax, otherwise collapses. */</span><span class="selector-tag">-webkit-box-flex</span>: 1;         <span class="comment">/* OLD - iOS 6-, Safari 3.1-6 */</span>   <span class="selector-tag">-moz-box-flex</span>: 1;         <span class="comment">/* OLD - Firefox 19- */</span>    <span class="selector-tag">-webkit-flex</span>: 1;         <span class="comment">/* Chrome */</span>        <span class="selector-tag">-ms-flex</span>: 1;         <span class="comment">/* IE 10 */</span>            <span class="selector-tag">flex</span>: 1;  </code></span></pre><p><a href="https://github.com/lzxb/flex.css" target="_blank" rel="noopener">flex.css</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;flex布局&quot;&gt;&lt;a href=&quot;#flex布局&quot; class=&quot;headerlink&quot; title=&quot;flex布局&quot;&gt;&lt;/a&gt;flex布局&lt;/h2&gt;&lt;h2 id=&quot;UC和微信浏览器下的兼容性问题&quot;&gt;&lt;a href=&quot;#UC和微信浏览器下的兼容性问题&quot; class=&quot;headerlink&quot; title=&quot;UC和微信浏览器下的兼容性问题&quot;&gt;&lt;/a&gt;UC和微信浏览器下的兼容性问题&lt;/h2&gt;&lt;p&gt;所有&lt;code&gt;webkit&lt;/code&gt;内核的浏览器（包括移动端）都支持 flex 布局，只不过一些浏览器只支持旧语法，如：&lt;code&gt;display: -webkit-box&lt;/code&gt; 。&lt;br&gt;旧语法和标准的 &lt;code&gt;flex&lt;/code&gt; 语法有较大区别，需要做好兼容。不过可以来使用 &lt;code&gt;autoprefixer&lt;/code&gt; 来自动处理这些兼容性问题，而开发时只需要写标准的语法就好了。&lt;/p&gt;
&lt;p&gt;假如没有使用&lt;code&gt;autoprefixer&lt;/code&gt;，在UC浏览器和微信内置浏览器中，使用&lt;code&gt;display:flex;&lt;/code&gt;时会不起作用，要加上兼容性写法。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://wangytbest.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://wangytbest.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序使用阿里字体图标</title>
    <link href="http://wangytbest.github.io/2018/03/21/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E5%AD%97%E4%BD%93%E5%9B%BE%E6%A0%87/"/>
    <id>http://wangytbest.github.io/2018/03/21/微信小程序使用阿里字体图标/</id>
    <published>2018-03-21T09:19:02.000Z</published>
    <updated>2019-04-09T06:58:19.759Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为了美化微信小程序，可以使用适当的图标来美化页面，体验更好。<br><a href="http://www.iconfont.cn/" target="_blank" rel="noopener">阿里字体图标库</a>提供了丰富的字体，各种场景下项目中所需要字体几乎都能找到。</p><p>微信小程序中设置元素的背景图片不能使用本地图片，本地资源无法通过WXSS获取，<code>background-img</code>可以使用网络图片或者base64，或者使用<code>image</code>标签，所以不能直接下载阿里字体图标库的图片设置为背景图片，可以将下载的图片转成字体文件使用。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="1-下载字体"><a href="#1-下载字体" class="headerlink" title="1. 下载字体"></a>1. 下载字体</h3><p><img src="https://hexo-blog-1256208212.cos.ap-beijing.myqcloud.com/1521625432192.jpg" alt="下载字体文件"></p><h3 id="2-解压转成base64文件"><a href="#2-解压转成base64文件" class="headerlink" title="2. 解压转成base64文件"></a>2. 解压转成base64文件</h3><p>下载字体文件，解压缩后将<code>.ttf</code>文件转化，<a href="https://transfonter.org/" target="_blank" rel="noopener">transfonter</a><br><img src="https://hexo-blog-1256208212.cos.ap-beijing.myqcloud.com/1521628758409.jpg" alt="转换成base64字体文件"></p><h3 id="3-拷贝字体文件至小程序"><a href="#3-拷贝字体文件至小程序" class="headerlink" title="3. 拷贝字体文件至小程序"></a>3. 拷贝字体文件至小程序</h3><p>将下载好的文件夹中stylesheet.css样式表中的内容拷贝, 粘贴至小程序的<code>wxss</code>文件中,即可引用该iconfont字体图标.</p><h3 id="4-引用字体文件"><a href="#4-引用字体文件" class="headerlink" title="4. 引用字体文件"></a>4. 引用字体文件</h3><p>小程序只能识别<code>wxss</code>为后缀的<code>css</code>文件，不能识别<code>.css</code>文件。<br><code>@import &quot;/assets/iconfont/iconfont.wxss</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;为了美化微信小程序，可以使用适当的图标来美化页面，体验更好。&lt;br&gt;&lt;a href=&quot;http://www.iconfont.cn/&quot; ta
      
    
    </summary>
    
      <category term="Javascript" scheme="http://wangytbest.github.io/categories/Javascript/"/>
    
      <category term="阿里字体" scheme="http://wangytbest.github.io/categories/Javascript/%E9%98%BF%E9%87%8C%E5%AD%97%E4%BD%93/"/>
    
    
      <category term="Javascript" scheme="http://wangytbest.github.io/tags/Javascript/"/>
    
      <category term="阿里字体" scheme="http://wangytbest.github.io/tags/%E9%98%BF%E9%87%8C%E5%AD%97%E4%BD%93/"/>
    
  </entry>
  
  <entry>
    <title>移动端适配方案</title>
    <link href="http://wangytbest.github.io/2018/03/21/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88/"/>
    <id>http://wangytbest.github.io/2018/03/21/移动端适配方案/</id>
    <published>2018-03-21T09:17:24.000Z</published>
    <updated>2019-04-09T07:26:42.090Z</updated>
    
    <content type="html"><![CDATA[<h3 id="视窗（viewport）"><a href="#视窗（viewport）" class="headerlink" title="视窗（viewport）"></a>视窗（viewport）</h3><p>简单理解<code>viewport</code>就是浏览器窗口大小。在桌面浏览器中，viewport就是浏览器窗口的高度和宽度。在移动设备中，由于移动端的viewport太窄，为了更好为CSS布局服务，所以提供了两个viewport。</p><blockquote><p><code>虚拟viewport</code> ： <code>visual viewport</code><br><code>布局viewport</code> ： <code>layout viewport</code></p></blockquote><h3 id="物理像素-physical-pixel"><a href="#物理像素-physical-pixel" class="headerlink" title="物理像素 physical pixel"></a>物理像素 physical pixel</h3><p>物理像素也被称为设备像素，他是显示设备中一个最小的物理设备，物理像素单位。每个像素可以根据操作系统设置自己的颜色和亮度。</p> <a id="more"></a><h3 id="设备独立像素-device-independent-pixel-逻辑像素"><a href="#设备独立像素-device-independent-pixel-逻辑像素" class="headerlink" title="设备独立像素 device-independent pixel - 逻辑像素"></a>设备独立像素 device-independent pixel - 逻辑像素</h3><p>设备独立像素也称为密度无关像素，可以认为是计算机坐标系统中的一个点，这个点代表一个可以程序使用的虚拟像素，比如CSS像素，然后由相关系统转换为物理像素。</p><h3 id="CSS像素（与设备无关像素-device-independent-piexl）"><a href="#CSS像素（与设备无关像素-device-independent-piexl）" class="headerlink" title="CSS像素（与设备无关像素 device-independent piexl）"></a>CSS像素（与设备无关像素 device-independent piexl）</h3><p>一个抽象单位，主要使用在浏览器上，用来精确度量Web页面上点内容。一般CSS像素称为与设备无关的像素（device-independent piexl），DIPs。</p><h3 id="屏幕密度"><a href="#屏幕密度" class="headerlink" title="屏幕密度"></a>屏幕密度</h3><p>屏幕密度是指一个设备表面上存在的像素数量，通常以<strong>每英寸有多少像素来计算</strong>（PPI）</p><h3 id="设备像素比（device-pixel-ratio）"><a href="#设备像素比（device-pixel-ratio）" class="headerlink" title="设备像素比（device pixel ratio）"></a>设备像素比（device pixel ratio）</h3><p>设备像素比简称为<strong>dpr</strong>，定义了物理像素和设备独立像素之间的对应关系</p><blockquote><p>设备像素 = 物理像素 / 设备独立像素</p></blockquote><ul><li>在JavaScript中，可以通过<code>window.devicePiexlRatio</code>获取当前设备的dpr。</li><li>在css中，可以通过<code>-webkit-device-piexl-ratio</code>、<code>-webkit-min-device-piexl-ratio</code>、<code>-webkit-max-device-piexl-ratio</code>进行媒体查询。</li></ul><h3 id="常见终端设备参数"><a href="#常见终端设备参数" class="headerlink" title="常见终端设备参数"></a>常见终端设备参数</h3><p><img src="https://hexo-blog-1256208212.cos.ap-beijing.myqcloud.com/1521689499823.jpg" alt="常见设备终端"><br><a href="https://design.google.com/devices/" target="_blank" rel="noopener">终端设备的参数</a></p><h3 id="UI设计与前端开发适配的协作"><a href="#UI设计与前端开发适配的协作" class="headerlink" title="UI设计与前端开发适配的协作"></a>UI设计与前端开发适配的协作</h3><p>选择一种尺寸作为设计和开发的基准，定义其余尺寸的适配规则，对于特殊适配给出设计效果</p><p>淘宝手淘团队适配协作模式<br><img src="https://hexo-blog-1256208212.cos.ap-beijing.myqcloud.com/taobaotuanduishipei.jpeg" alt="淘宝手淘团队适配协作模式"></p><p>视觉稿</p><p>在开发之前，UI设计师提供含有标注的PSD文件，为视觉稿。<br>对于移动端而言，为了做到页面高清的效果，视觉稿会遵循以下两点：</p><ol><li>选取一款手机的<code>屏幕宽度</code>最为基准，<code>iphone6（375pt * 667pt）</code></li><li>对于retina屏幕（如<code>dpr = 2</code>）,为了达到高清的效果，视觉稿的画布大小会是<code>基准</code>的<code>2倍</code>，也就是说像素点个数是原来的4倍。</li></ol><blockquote><p>iphone6：<br><code>dpr</code>：2<br><code>设备独立像素</code>：375pt * 667pt (设备宽度为375pt，设备高度667pt)<br><code>物理像素</code>：750pt * 1334pt</p></blockquote><p><em>视觉稿按照设备独立像素设计，放大两倍</em><br>UI设计师常选择iPhone6作为基准设计尺寸，交付给前端的设计尺寸是按<code>750px * 1334px</code>为准(高度会随着内容多少而改变)。前端开发人员通过一套适配规则自动适配到其他的尺寸。</p><p><strong>位图像素</strong><br>一个位图像素是栅格图像最小的数据单元，如png、jpg、gif等。每一个位图像素都包含着一些自身的显示信息，包括显示位置、颜色值、透明度等</p><p>理论上，<strong>一个位图像素对应一个物理像素</strong>，图片才能得到完美清晰的展示。<br>在Retina屏幕下，<strong>一个位图像素对应4个物理像素</strong>。由于单个位图像素不可以在分割，所以只能就近取色，就会出现位图像素点不够，从而导致图片模糊。</p><h3 id="rem单位"><a href="#rem单位" class="headerlink" title="rem单位"></a>rem单位</h3><blockquote><p>font size of the root element.</p></blockquote><p><code>rem</code>就是相对于根元素<code>&lt;html&gt;</code>的<code>font-size</code>来做计算。而我们的方案中使用rem单位，是能轻易的根据<html>的<code>font-size</code>计算出元素的盒模型大小。</html></p><p><code>em</code>是根据父元素的<code>font-size</code>计算。</p><h3 id="flexible的实质"><a href="#flexible的实质" class="headerlink" title="flexible的实质"></a>flexible的实质</h3><blockquote><p><code>flexible</code>实际上就是通过JS来动态改写meta标签</p></blockquote><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1, maximum-scale=1"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>源代码：<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> meta = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'meta'</span>);</span><br><span class="line"><span class="hljs-keyword">var</span> scale = isRetina ? <span class="hljs-number">0.5</span> : <span class="hljs-number">1</span>;</span><br><span class="line">meta.setAttribute(<span class="hljs-string">'name'</span>, <span class="hljs-string">'viewport'</span>);</span><br><span class="line">meta.setAttribute(<span class="hljs-string">'content'</span>, <span class="hljs-string">'initial-scale='</span> + scale + <span class="hljs-string">' ,maximun-scale='</span> + scale + <span class="hljs-string">' ,minimum-scale='</span> + scale + <span class="hljs-string">' ,user-scalable=no, width=device-width'</span>);</span><br><span class="line"><span class="hljs-keyword">if</span>(<span class="hljs-built_in">document</span>.doucmentElement.firstElementChild) &#123;</span><br><span class="line">  <span class="hljs-built_in">document</span>.doucmentElement.firstElementChild.appendChild(meta);</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">  <span class="hljs-keyword">var</span> wrap = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'div'</span>);</span><br><span class="line">  wrap.appendChild(meta);</span><br><span class="line">  <span class="hljs-built_in">document</span>.write(wrap.innerHTML);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>动态改写<code>&lt;meta&gt;</code>标签</li><li><code>html</code>标签上加上<code>data-dpr</code>属性，并且动态改写<code>data-dpr</code>的值。</li><li><code>html</code>标签上加上<code>font-size</code>属性，并且动态改写<code>font-size</code>的值。</li></ul><p><code>&lt;meta&gt;</code>中<code>initial-dpr</code>会把<code>dpr</code>强制设置为给定的值。如果手动设置了<code>dpr</code>之后，不管设备是多少<code>dpr</code>，都会强制设置其<code>dpr</code>为你设置的值。不建议设置这个<code>meta</code>标签值(<code>initial-dpr</code>)，因为在<code>flexible</code>中，只有对<code>iOS</code>设备进行<code>dpr</code>的判断，对于<code>Android</code>系列，始终认为其<code>dpr</code>为<strong>1</strong></p><h2 id="px和rem转换"><a href="#px和rem转换" class="headerlink" title="px和rem转换"></a>px和rem转换</h2><p>目前Flexible会将设计稿分成100份，为了更好的兼容vw和vh，同时1rem单位被认定为10a。<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">width为750px设计稿</span><br><span class="line">750px = 100vw = 100a</span><br><span class="line">1rem = 10a</span><br><span class="line">1rem = 75px</span><br></pre></td></tr></table></figure></p><p>我们设计稿都是750px宽度，分成10份，每份为10a（10vw），也就是整个宽度为10rem，所以html对应的font-size为75px。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://www.quirksmode.org/mobile/viewports.html" target="_blank" rel="noopener">A tale of two viewports - Part One</a></li><li><a href="https://www.quirksmode.org/mobile/viewports2.html" target="_blank" rel="noopener">A tale of two viewports - Part Two</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;视窗（viewport）&quot;&gt;&lt;a href=&quot;#视窗（viewport）&quot; class=&quot;headerlink&quot; title=&quot;视窗（viewport）&quot;&gt;&lt;/a&gt;视窗（viewport）&lt;/h3&gt;&lt;p&gt;简单理解&lt;code&gt;viewport&lt;/code&gt;就是浏览器窗口大小。在桌面浏览器中，viewport就是浏览器窗口的高度和宽度。在移动设备中，由于移动端的viewport太窄，为了更好为CSS布局服务，所以提供了两个viewport。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;虚拟viewport&lt;/code&gt; ： &lt;code&gt;visual viewport&lt;/code&gt;&lt;br&gt;&lt;code&gt;布局viewport&lt;/code&gt; ： &lt;code&gt;layout viewport&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;物理像素-physical-pixel&quot;&gt;&lt;a href=&quot;#物理像素-physical-pixel&quot; class=&quot;headerlink&quot; title=&quot;物理像素 physical pixel&quot;&gt;&lt;/a&gt;物理像素 physical pixel&lt;/h3&gt;&lt;p&gt;物理像素也被称为设备像素，他是显示设备中一个最小的物理设备，物理像素单位。每个像素可以根据操作系统设置自己的颜色和亮度。&lt;/p&gt;
    
    </summary>
    
      <category term="Web H5" scheme="http://wangytbest.github.io/categories/Web-H5/"/>
    
    
  </entry>
  
  <entry>
    <title>JS控制GIF动画</title>
    <link href="http://wangytbest.github.io/2018/02/02/js-contro-gif-md/"/>
    <id>http://wangytbest.github.io/2018/02/02/js-contro-gif-md/</id>
    <published>2018-02-02T02:14:25.000Z</published>
    <updated>2019-04-09T07:03:14.797Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>JS控制Gif动画</p></blockquote><p>思想： 使用canvas获取Gif第一帧图片，静止的时候使用图片，播放的时候使用Gif。<br><a id="more"></a><br><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span> (<span class="hljs-string">'getContext'</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'canvas'</span>)) &#123;</span><br><span class="line">    HTMLImageElement.prototype.play = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.storeCanvas) &#123;</span><br><span class="line">            <span class="hljs-comment">// 移除存储的canvas</span></span><br><span class="line">            <span class="hljs-keyword">this</span>.storeCanvas.parentElement.removeChild(<span class="hljs-keyword">this</span>.storeCanvas);</span><br><span class="line">            <span class="hljs-keyword">this</span>.storeCanvas = <span class="hljs-literal">null</span>;</span><br><span class="line">            <span class="hljs-comment">// 透明度还原c</span></span><br><span class="line">            <span class="hljs-keyword">this</span>.style.opacity = <span class="hljs-string">''</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.storeUrl) &#123;</span><br><span class="line">            <span class="hljs-keyword">this</span>.src = <span class="hljs-keyword">this</span>.storeUrl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    HTMLImageElement.prototype.stop = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        <span class="hljs-comment">// polyfill 提供了这个方法用来获取设备的 pixel ratio</span></span><br><span class="line">        <span class="hljs-keyword">let</span> getPixelRatio = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">context</span>) </span>&#123;</span><br><span class="line">            <span class="hljs-keyword">let</span> backingStore = context.backingStorePixelRatio ||</span><br><span class="line">                context.webkitBackingStorePixelRatio ||</span><br><span class="line">                context.mozBackingStorePixelRatio ||</span><br><span class="line">                context.msBackingStorePixelRatio ||</span><br><span class="line">                context.oBackingStorePixelRatio ||</span><br><span class="line">                context.backingStorePixelRatio || <span class="hljs-number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">return</span> (<span class="hljs-built_in">window</span>.devicePixelRatio || <span class="hljs-number">1</span>) / backingStore;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="hljs-keyword">let</span> canvas = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'canvas'</span>);</span><br><span class="line">        <span class="hljs-keyword">let</span> ratio = getPixelRatio(canvas);</span><br><span class="line">        <span class="hljs-comment">// 尺寸</span></span><br><span class="line">        <span class="hljs-keyword">let</span> width = +<span class="hljs-keyword">this</span>.width;</span><br><span class="line">        <span class="hljs-keyword">let</span> height = +<span class="hljs-keyword">this</span>.height;</span><br><span class="line">        <span class="hljs-keyword">if</span> (width &amp;&amp; height) &#123;</span><br><span class="line">            <span class="hljs-comment">// 存储之前的地址</span></span><br><span class="line">            <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.storeUrl) &#123;</span><br><span class="line">                <span class="hljs-keyword">this</span>.storeUrl = <span class="hljs-keyword">this</span>.src;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-comment">// canvas大小</span></span><br><span class="line">            canvas.width = width * ratio;</span><br><span class="line">            canvas.height = height * ratio;</span><br><span class="line">            <span class="hljs-comment">// 绘制图片帧（第一帧）</span></span><br><span class="line">            <span class="hljs-comment">// 注意，这里的 width 和 height 变成了 width * ratio 和 height * ratio</span></span><br><span class="line">            canvas.getContext(<span class="hljs-string">'2d'</span>).drawImage(<span class="hljs-keyword">this</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, width * ratio, height * ratio);</span><br><span class="line">            canvas.style.width = width;</span><br><span class="line">            canvas.style.height = height;</span><br><span class="line">            <span class="hljs-comment">// 重置当前图片</span></span><br><span class="line">            <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">                <span class="hljs-keyword">this</span>.src = canvas.toDataURL(<span class="hljs-string">'image/gif'</span>);</span><br><span class="line">            &#125; <span class="hljs-keyword">catch</span> (e) &#123;</span><br><span class="line">                <span class="hljs-built_in">console</span>.log(e);</span><br><span class="line">                <span class="hljs-comment">// 跨域</span></span><br><span class="line">                <span class="hljs-keyword">this</span>.removeAttribute(<span class="hljs-string">'src'</span>);</span><br><span class="line">                <span class="hljs-comment">// 载入canvas元素</span></span><br><span class="line">                canvas.style.position = <span class="hljs-string">'absolute'</span>;</span><br><span class="line">                <span class="hljs-comment">// 前面插入图片</span></span><br><span class="line">                <span class="hljs-keyword">this</span>.parentElement.insertBefore(canvas, <span class="hljs-keyword">this</span>);</span><br><span class="line">                <span class="hljs-comment">// 隐藏原图</span></span><br><span class="line">                <span class="hljs-keyword">this</span>.style.opacity = <span class="hljs-string">'0'</span>;</span><br><span class="line">                <span class="hljs-comment">// 存储canvas</span></span><br><span class="line">                <span class="hljs-keyword">this</span>.storeCanvas = canvas;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;JS控制Gif动画&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;思想： 使用canvas获取Gif第一帧图片，静止的时候使用图片，播放的时候使用Gif。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://wangytbest.github.io/categories/Javascript/"/>
    
      <category term="util" scheme="http://wangytbest.github.io/categories/Javascript/util/"/>
    
    
  </entry>
  
  <entry>
    <title>css控制文本内容溢出截断</title>
    <link href="http://wangytbest.github.io/2017/10/19/css-text-overflow/"/>
    <id>http://wangytbest.github.io/2017/10/19/css-text-overflow/</id>
    <published>2017-10-19T02:39:12.000Z</published>
    <updated>2019-04-09T07:06:02.422Z</updated>
    
    <content type="html"><![CDATA[<p>css控制文字内容的溢出显示，溢出截断后末尾出现省略<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- more --&gt;</span><br><span class="line">**单行文本**</span><br><span class="line">```css</span><br><span class="line">overfolw: hidden;</span><br><span class="line">text-overflow: ellipsis;</span><br><span class="line">white-space: nowrap;</span><br></pre></td></tr></table></figure></p><p><strong>多行文本</strong><br><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">display</span><span class="hljs-selector-pseudo">:-webkit-box</span>;</span><br><span class="line"><span class="hljs-selector-tag">-webkit-line-clamp</span>: 1;</span><br><span class="line"><span class="hljs-selector-tag">-webkit-box-orient</span>: <span class="hljs-selector-tag">vertical</span>;</span><br><span class="line"><span class="hljs-selector-tag">overflow</span>: <span class="hljs-selector-tag">hidden</span>;</span><br></pre></td></tr></table></figure></p><p><strong>知识点</strong></p><p><code>text-overflow</code> 确定内容的溢出显示，可以被剪切(<code>clip</code>)、显示一个省略号（<code>...</code>）或者显示一个自定义字符串。</p><blockquote><ul><li>需要设置<code>overflow: hidden</code>属性才能生效，否则不会强制溢出事件发生。</li><li>属性只对<strong>块级元素</strong>溢出的内容有效，但必须与块级元素内联（<code>inline</code>）方向一致。如内容在盒子下方溢出，则属性不会生效。</li><li>文本溢出：1、文本无法换行，设置了<code>white-space: nowrap;</code>。2、单词太长。 </li></ul></blockquote><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text-overflow: [ clip | ellipise | &lt;string&gt; ]&#123;1, 2&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li><code>clip</code>: 内容区域的极限处截断文本，因此可能在字符的中间可能会发生截断。<strong>为了能够在两个字符过度处截断，必须使用一个空字符串值（<code></code>）</strong>。</li><li><code>ellipse</code>: 用省略号<code>...</code>来表示截断的文本。如果空间太小连省略号也不能显示，那么省略号也会被截断。</li><li><code>&lt;string&gt;</code>: <code>&lt;string&gt;</code>用来表示被截断的文本。字符串内容将被添加在内容区域中，所以会减少显示出的文本。如果空间太小到连省略号的容纳下，那么这个字符串也会被截断。</li></ol></blockquote><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/* Overflow behavior at line end</span></span><br><span class="line"><span class="hljs-comment">Right end if ltr, left end if rtl */</span></span><br><span class="line"><span class="hljs-selector-tag">text-overflow</span>: <span class="hljs-selector-tag">clip</span>;</span><br><span class="line"><span class="hljs-selector-tag">text-overflow</span>: <span class="hljs-selector-tag">ellipsis</span>;</span><br><span class="line"><span class="hljs-selector-tag">text-overflow</span>: "…";</span><br><span class="line"><span class="hljs-selector-tag">text-overflow</span>: <span class="hljs-selector-tag">fade</span>;</span><br><span class="line"><span class="hljs-selector-tag">text-overflow</span>: <span class="hljs-selector-tag">fade</span>(10<span class="hljs-selector-tag">px</span>);</span><br><span class="line"><span class="hljs-selector-tag">text-overflow</span>: <span class="hljs-selector-tag">fade</span>(5%);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/* Overflow behavior at left end | at right end</span></span><br><span class="line"><span class="hljs-comment">Directionality has no influence */</span></span><br><span class="line"><span class="hljs-selector-tag">text-overflow</span>: <span class="hljs-selector-tag">clip</span> <span class="hljs-selector-tag">ellipsis</span>;</span><br><span class="line"><span class="hljs-selector-tag">text-overflow</span>: "…" "…";</span><br><span class="line"><span class="hljs-selector-tag">text-overflow</span>: <span class="hljs-selector-tag">fade</span> <span class="hljs-selector-tag">clip</span>;</span><br><span class="line"><span class="hljs-selector-tag">text-overflow</span>: <span class="hljs-selector-tag">fade</span>(10<span class="hljs-selector-tag">px</span>) <span class="hljs-selector-tag">fade</span>(10<span class="hljs-selector-tag">px</span>);</span><br><span class="line"><span class="hljs-selector-tag">text-overflow</span>: <span class="hljs-selector-tag">fade</span>(5%) <span class="hljs-selector-tag">fade</span>(5%);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/* Global values */</span></span><br><span class="line"><span class="hljs-selector-tag">text-overflow</span>: <span class="hljs-selector-tag">inherit</span>;</span><br><span class="line"><span class="hljs-selector-tag">text-overflow</span>: <span class="hljs-selector-tag">initial</span>;</span><br><span class="line"><span class="hljs-selector-tag">text-overflow</span>: <span class="hljs-selector-tag">unset</span>;</span><br></pre></td></tr></table></figure><style type="text/css">    div br{        display: none;    }</style><div><br>    <table><br>        <thead><br>            <tr><br>                <th colspan="1" rowspan="2" scope="col">CSS value</th><br>                <th colspan="2" rowspan="1" scope="col"><code>direction: ltr</code></th><br>                <th colspan="2" rowspan="1" scope="col"><code>direction: rtl</code></th><br>            </tr><br>            <tr><br>                <th scope="col">Expected Result</th><br>                <th scope="col">Live result</th><br>                <th scope="col">Expected Result</th><br>                <th scope="col">Live result</th><br>            </tr><br>        </thead><br>        <tbody><br>            <tr><br>                <td><em>visible overflow</em></td><br>                <td>1234567890</td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>                <td>0987654321</td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>            </tr><br>            <tr><br>                <td><code>text-overflow: clip</code></td><br>                <td><img src="https://developer.mozilla.org/@api/deki/files/6056/=t-o_clip.png" alt="t-o_clip.png"></td><br>                <td><br>                    <p>123456</p><br>                </td><br>                <td><img src="https://developer.mozilla.org/@api/deki/files/6057/=t-o_clip_rtl.png" alt="t-o_clip_rtl.png"></td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>            </tr><br>            <tr><br>                <td><code>text-overflow: ‘’</code></td><br>                <td>12345</td><br>                <td><br>                    <p>123456</p><br>                </td><br>                <td>54321</td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>            </tr><br>            <tr><br>                <td><code>text-overflow: ellipsis</code></td><br>                <td>1234…</td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>                <td>…4321</td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>            </tr><br>            <tr><br>                <td><code>text-overflow: ‘.’</code></td><br>                <td>1234.</td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>                <td>.4321</td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>            </tr><br>            <tr><br>                <td><code>text-overflow: clip clip</code></td><br>                <td>123456</td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>                <td>654321</td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>            </tr><br>            <tr><br>                <td><code>text-overflow: clip ellipsis</code></td><br>                <td>1234…</td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>                <td>6543…</td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>            </tr><br>            <tr><br>                <td><code>text-overflow: clip ‘.’</code></td><br>                <td>1234.</td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>                <td>6543.</td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>            </tr><br>            <tr><br>                <td><code>text-overflow: ellipsis clip</code></td><br>                <td>…3456</td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>                <td>…4321</td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>            </tr><br>            <tr><br>                <td><code>text-overflow: ellipsis ellipsis</code></td><br>                <td>…34…</td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>                <td>…43…</td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>            </tr><br>            <tr><br>                <td><code>text-overflow: ellipsis ‘.’</code></td><br>                <td>…34.</td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>                <td>…43.</td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>            </tr><br>            <tr><br>                <td><code>text-overflow: ‘,’ clip</code></td><br>                <td>,3456</td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>                <td>,4321</td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>            </tr><br>            <tr><br>                <td><code>text-overflow: ‘,’ ellipsis</code></td><br>                <td>,34…</td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>                <td>,43…</td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>            </tr><br>            <tr><br>                <td><code>text-overflow: ‘,’ ‘.’</code></td><br>                <td>,34.</td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>                <td>,53.</td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>            </tr><br>        </tbody><br>    </table><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;css控制文字内容的溢出显示，溢出截断后末尾出现省略&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span cl
      
    
    </summary>
    
      <category term="CSS" scheme="http://wangytbest.github.io/categories/CSS/"/>
    
    
      <category term="css" scheme="http://wangytbest.github.io/tags/css/"/>
    
      <category term="text-overflow" scheme="http://wangytbest.github.io/tags/text-overflow/"/>
    
  </entry>
  
  <entry>
    <title>css文字两端对齐</title>
    <link href="http://wangytbest.github.io/2017/10/16/css-text-align-justify/"/>
    <id>http://wangytbest.github.io/2017/10/16/css-text-align-justify/</id>
    <published>2017-10-16T06:37:17.000Z</published>
    <updated>2019-04-09T07:06:33.557Z</updated>
    
    <content type="html"><![CDATA[<p>文本内容可以实现左对齐、右对齐以及居中对齐，如何实现两端对齐？很多时候为了对齐文字中间使用空格来隔开，这样每个内容需要计算空格个数，当内容不一样长短的时候又通过JS进行麻烦的计算。</p><p><code>text-align</code>是控制文字的对齐与显示，从其属性名上就可以看出来。从其渲染与解析上来看，其主要是用来控制<code>inline</code>水平元素或<code>inline-block</code>元素的对齐与显示的，例如嵌套行内标签的文字、图片、input表单控件等；而对block水平的元素是没有作用的。</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">text-align: center | left | right | start | end | justify | inherit | initial | unset</span><br><span class="line"><span class="hljs-selector-tag">text-align</span>: <span class="hljs-selector-tag">justify</span></span><br></pre></td></tr></table></figure><p>css2中<code>text-align</code>有一个属性为<code>justify</code>，居中对齐。其实现的效果就是可以让一行文字两端对齐显示（文字内容要超过一行）<br><a id="more"></a></p><ul><li>有多行文字<blockquote><p>多行文字内容时直接使用<code>justify</code>可以实现两端对齐效果</p></blockquote></li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Vue.js (读音 /vjuː/，类似于 view) 是一套构建用户界面的渐进式框架。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。Vue 的核心库只关注视图层，它不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与单文件组件和 Vue 生态系统支持的库结合使用时，Vue 也完全能够为复杂的单页应用程序提供驱动。<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">div</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;</span><br><span class="line">    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#000</span>;</span><br><span class="line">    <span class="hljs-attribute">text-align</span>: justify;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>只有一行文字</li></ul><blockquote><p>需要在文字后面加一个占位元素，可以使用伪类元素实现，或者加<code>&lt;span&gt;&lt;/span&gt;</code>、<code>&lt;i&gt;&lt;/i&gt;</code>空元素。</p></blockquote><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>css文字两端对齐！<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">div</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;</span><br><span class="line">    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#000</span>;</span><br><span class="line">    <span class="hljs-attribute">text-align</span>: justify;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时的效果并没有实现两端对齐，因为文字内容没有换行。可以使用伪类元素实现。<br><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">div</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;</span><br><span class="line">    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#000</span>;</span><br><span class="line">    <span class="hljs-attribute">text-align</span>: justify;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">content</span>: <span class="hljs-string">''</span>;   </span><br><span class="line">    <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="line">    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文本内容可以实现左对齐、右对齐以及居中对齐，如何实现两端对齐？很多时候为了对齐文字中间使用空格来隔开，这样每个内容需要计算空格个数，当内容不一样长短的时候又通过JS进行麻烦的计算。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;text-align&lt;/code&gt;是控制文字的对齐与显示，从其属性名上就可以看出来。从其渲染与解析上来看，其主要是用来控制&lt;code&gt;inline&lt;/code&gt;水平元素或&lt;code&gt;inline-block&lt;/code&gt;元素的对齐与显示的，例如嵌套行内标签的文字、图片、input表单控件等；而对block水平的元素是没有作用的。&lt;/p&gt;
&lt;figure class=&quot;highlight css hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;text-align: center | left | right | start | end | justify | inherit | initial | unset&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;text-align&lt;/span&gt;: &lt;span class=&quot;hljs-selector-tag&quot;&gt;justify&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;css2中&lt;code&gt;text-align&lt;/code&gt;有一个属性为&lt;code&gt;justify&lt;/code&gt;，居中对齐。其实现的效果就是可以让一行文字两端对齐显示（文字内容要超过一行）&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://wangytbest.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://wangytbest.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>git基础</title>
    <link href="http://wangytbest.github.io/2017/10/13/github-project-init/"/>
    <id>http://wangytbest.github.io/2017/10/13/github-project-init/</id>
    <published>2017-10-13T08:07:26.000Z</published>
    <updated>2019-04-09T07:04:41.246Z</updated>
    
    <content type="html"><![CDATA[<p>github上创建新的项目后，在本地拉取项目或者将本地的项目关联到建立的仓库。</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> git <span class="hljs-built_in">clone</span> git@github.com:xxxxxxxxx.git</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="命令行新建一个新的仓库"><a href="#命令行新建一个新的仓库" class="headerlink" title="命令行新建一个新的仓库"></a>命令行新建一个新的仓库</h2><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> mkdir myProject</span></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> <span class="hljs-built_in">cd</span> myProject </span></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">'# my new project'</span> &gt;&gt; README.md</span></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> git init</span></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> git add .</span></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> git commit -m <span class="hljs-string">"first commit"</span></span></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> git remote add origin git@github.com:xxxxxxxxx.git</span></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> git push origin master</span></span><br></pre></td></tr></table></figure><h2 id="本地项目关联远程git仓库"><a href="#本地项目关联远程git仓库" class="headerlink" title="本地项目关联远程git仓库"></a>本地项目关联远程git仓库</h2><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> <span class="hljs-built_in">cd</span> myProject</span></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> git remote add origin git@github.com:xxxxx/xxxx/git</span></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> git push origin master</span></span><br></pre></td></tr></table></figure><h1 id="本地分支关联远程分支"><a href="#本地分支关联远程分支" class="headerlink" title="本地分支关联远程分支"></a>本地分支关联远程分支</h1><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> git checkout <span class="hljs-built_in">test</span></span></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> git remote add origin git@github.com:xxxx/test.git</span></span><br></pre></td></tr></table></figure><h2 id="fatal"><a href="#fatal" class="headerlink" title="fatal"></a>fatal</h2><p>首次拉取代码失败</p><blockquote><p>git pull错误信息 :<br><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* branch       master     -&gt; FETCH_HEAD</span><br><span class="line">fatal: refusing to merge unrelated histories</span><br></pre></td></tr></table></figure></p></blockquote><p>解决：<br><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> git pull origin master --allow-unrelated-histories</span></span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"><span class="hljs-comment"># 首次安装git设置</span></span></span><br><span class="line">```shell</span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> git config -global user.nme <span class="hljs-string">"xxxxxx"</span></span></span><br><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> git config -global user.email <span class="hljs-string">"xxxxxx@jd.com"</span></span></span><br></pre></td></tr></table></figure></p><h1 id="公钥密钥配置"><a href="#公钥密钥配置" class="headerlink" title="公钥密钥配置"></a>公钥密钥配置</h1><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> ssh-keygen -t rsa</span></span><br></pre></td></tr></table></figure><p>会生成两个文件：<code>id_rsa</code>（密钥）和<code>id_rsa.pub</code>（公钥）<br>在github中设置公钥。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;github上创建新的项目后，在本地拉取项目或者将本地的项目关联到建立的仓库。&lt;/p&gt;
&lt;figure class=&quot;highlight shell hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;hljs-bash&quot;&gt; git &lt;span class=&quot;hljs-built_in&quot;&gt;clone&lt;/span&gt; git@github.com:xxxxxxxxx.git&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Git" scheme="http://wangytbest.github.io/categories/Git/"/>
    
    
      <category term="git" scheme="http://wangytbest.github.io/tags/git/"/>
    
      <category term="github" scheme="http://wangytbest.github.io/tags/github/"/>
    
  </entry>
  
</feed>
