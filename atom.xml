<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>王小贱</title>
  
  <subtitle>Write the Code Change the World.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wangytbest.github.io/"/>
  <updated>2019-04-09T07:16:19.871Z</updated>
  <id>http://wangytbest.github.io/</id>
  
  <author>
    <name>Wangyutao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>webpack插件关于autoprefixer的冲突</title>
    <link href="http://wangytbest.github.io/2018/08/27/webpack-%E6%8F%92%E4%BB%B6%E5%85%B3%E4%BA%8Eautoprefixer%E7%9A%84%E5%86%B2%E7%AA%81/"/>
    <id>http://wangytbest.github.io/2018/08/27/webpack-插件关于autoprefixer的冲突/</id>
    <published>2018-08-27T03:15:54.000Z</published>
    <updated>2019-04-09T07:16:19.871Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-实际遇到的问题"><a href="#1-实际遇到的问题" class="headerlink" title="1. 实际遇到的问题"></a>1. 实际遇到的问题</h3><p>项目中经常会遇到css的一些奇怪问题，有些css属性的设置在在本地编译运行的时候是好的，但是打包上线之后这个属性就平白无故的没有了？</p><p>具体场景</p><blockquote><p>在处理多行文本溢出时，需要使用<code>-webkit-box-orient: vertial</code>，在本地开发测试一切正常，但是在webpack编译之后，检查样式并没有这个属性，其他的属性都有。</p></blockquote><pre class=" language-scss"><code class="language-scss"><span class="token comment" spellcheck="true">// 多行文本</span><span class="token keyword">@mixin</span> <span class="token function">textmultiline</span><span class="token punctuation">(</span><span class="token property"><span class="token variable">$line</span></span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* autoprefixer: off*/</span>  <span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span> vertical<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* autoprefixer: on*/</span>  <span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span> <span class="token variable">$line</span><span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><a id="more"></a><h3 id="2-为什么啊？"><a href="#2-为什么啊？" class="headerlink" title="2. 为什么啊？"></a>2. 为什么啊？</h3><ol><li><p><a href="https://github.com/cssnano/cssnano/issues/357" target="_blank" rel="noopener">why remove -webkit-box-orient property? #357</a></p></li><li><p><a href="https://github.com/cssnano/cssnano/issues/252" target="_blank" rel="noopener">Autoprefixer setting should be false by default #252</a></p></li></ol><p>原因：<br>  autoprefixer自动的删除了一些它觉得没有必要的属性，所以解决办法就是设autoprefixer为false，或者针对某个属性忽autoprefixer</p><h3 id="3-怎么办"><a href="#3-怎么办" class="headerlink" title="3. 怎么办"></a>3. 怎么办</h3><ol><li><p>属性忽略autoprefixer</p><pre class=" language-css"><code class="language-css">// eslint-disable-next-line<span class="token comment" spellcheck="true">/* autoprefixer: off*/</span><span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span> vertical<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* autoprefixer: on*/</span></code></pre></li><li><p>关闭cssnano的autoprefixer</p></li></ol><p>just remove the postcss config in vue-loader’s config</p><p>Add the following option to prevent autoprefixer from removing prefixes (<strong>for cssnano v3 only</strong>):</p><pre class=" language-shell"><code class="language-shell">{  autoprefixer: {    remove: false  }}</code></pre><p>Then -webkit-box-orient will be preserved.</p><ol start="3"><li><code>optimize-css-assets-webpack-plugin</code> 插件问题</li></ol><pre class=" language-cs"><code class="language-cs">new OptimizeCSSPlugin({  cssProcessorOptions: config.build.productionSourceMap    ? { safe: true, map: { inline: false } }    : { safe: true }}),</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-实际遇到的问题&quot;&gt;&lt;a href=&quot;#1-实际遇到的问题&quot; class=&quot;headerlink&quot; title=&quot;1. 实际遇到的问题&quot;&gt;&lt;/a&gt;1. 实际遇到的问题&lt;/h3&gt;&lt;p&gt;项目中经常会遇到css的一些奇怪问题，有些css属性的设置在在本地编译运行的时候是好的，但是打包上线之后这个属性就平白无故的没有了？&lt;/p&gt;
&lt;p&gt;具体场景&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在处理多行文本溢出时，需要使用&lt;code&gt;-webkit-box-orient: vertial&lt;/code&gt;，在本地开发测试一切正常，但是在webpack编译之后，检查样式并没有这个属性，其他的属性都有。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&quot;scss&quot;&gt;// 多行文本
@mixin textmultiline($line:2) {
  display: -webkit-box;
  /* autoprefixer: off*/
  -webkit-box-orient: vertical;
  /* autoprefixer: on*/
  -webkit-line-clamp: $line;
  overflow: hidden;
  text-overflow: ellipsis;
}
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="webpack" scheme="http://wangytbest.github.io/categories/webpack/"/>
    
    
  </entry>
  
  <entry>
    <title>URL操作处理</title>
    <link href="http://wangytbest.github.io/2018/05/30/URL%E6%93%8D%E4%BD%9C%E5%A4%84%E7%90%86/"/>
    <id>http://wangytbest.github.io/2018/05/30/URL操作处理/</id>
    <published>2018-05-30T07:02:33.000Z</published>
    <updated>2019-04-09T06:59:54.514Z</updated>
    
    <content type="html"><![CDATA[<p>URL<br><a id="more"></a></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * URL模块 * @param  {[type]} require [description] * @param  {[type]} exports [description] * @param  {[type]} module  [description] * @return {[type]}         [description] */</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> module<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> _cacheThisModule_<span class="token punctuation">;</span>    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 设置hash         * @param name         */</span>        setHash<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                location<span class="token punctuation">.</span>hash <span class="token operator">=</span> name<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">/**         * 获取当前url中的hash值         * @param url         * @return String         */</span>        getHash<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> u <span class="token operator">=</span> url <span class="token operator">||</span> location<span class="token punctuation">.</span>hash<span class="token punctuation">;</span>            <span class="token keyword">return</span> u <span class="token operator">?</span> u<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/.*#/</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">/*         *    根据hash获取对应的模块名         */</span>        getHashModelName<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> hash <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>hash <span class="token operator">?</span> hash<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">/*         *    从hash中获取action         */</span>        getHashActionName<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> hash <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>hash <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>hash <span class="token operator">?</span> hash<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">/*         * 从hash中获取name对应的值         */</span>        getHashParam<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"(^|&amp;)"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"=([^&amp;]*)(&amp;|$)"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> result <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> result<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">/*         *    从URL中获取参数对应的值         */</span>        getUrlParam<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//参数：变量名，url为空则表从当前页面的url中取</span>            <span class="token keyword">var</span> u <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">,</span>                reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"(^|&amp;)"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"=([^&amp;]*)(&amp;|$)"</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                r <span class="token operator">=</span> u<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"\?"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> r <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> r<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">/*         *    获取所有HASH的参数，剔除model.         */</span>        getParams<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> param <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                hash <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            paramArr <span class="token operator">=</span> hash <span class="token operator">?</span> hash<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> l <span class="token operator">=</span> paramArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                param<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>paramArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> param<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        decodeUrl<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>            url <span class="token operator">=</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> urlObj <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">parseUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">,</span> decodedParam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            $<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>urlObj<span class="token punctuation">.</span>params<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>                value <span class="token operator">=</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                decodedParam<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> urlPrefix <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> urlPrefix <span class="token operator">+</span> <span class="token string">"?"</span> <span class="token operator">+</span> decodedParam<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        parseUrl<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">.</span>href <span class="token operator">=</span> url<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                source<span class="token punctuation">:</span> url<span class="token punctuation">,</span>                protocol<span class="token punctuation">:</span> a<span class="token punctuation">.</span>protocol<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                host<span class="token punctuation">:</span> a<span class="token punctuation">.</span>hostname<span class="token punctuation">,</span>                port<span class="token punctuation">:</span> a<span class="token punctuation">.</span>port<span class="token punctuation">,</span>                query<span class="token punctuation">:</span> a<span class="token punctuation">.</span>search<span class="token punctuation">,</span>                params<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">var</span> ret <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                        seg <span class="token operator">=</span> a<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/^\?/</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        len <span class="token operator">=</span> seg<span class="token punctuation">.</span>length<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> s<span class="token punctuation">;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>seg<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">continue</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        s <span class="token operator">=</span> seg<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        ret<span class="token punctuation">[</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                file<span class="token punctuation">:</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>pathname<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/([^\/?#]+)$/i</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                hash<span class="token punctuation">:</span> a<span class="token punctuation">.</span>hash<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                path<span class="token punctuation">:</span> a<span class="token punctuation">.</span>pathname<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/^([^\/])/</span><span class="token punctuation">,</span> <span class="token string">'/$1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                relative<span class="token punctuation">:</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>href<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/tps?:\/\/[^\/]+(.+)/</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                segments<span class="token punctuation">:</span> a<span class="token punctuation">.</span>pathname<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/^\//</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        replaceParam<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>param<span class="token punctuation">,</span> value<span class="token punctuation">,</span> url<span class="token punctuation">,</span> forceReplace<span class="token punctuation">)</span> <span class="token punctuation">{</span>            url <span class="token operator">=</span> url <span class="token operator">||</span> location<span class="token punctuation">.</span>href<span class="token punctuation">;</span>            <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"([\\?&amp;]"</span> <span class="token operator">+</span> param <span class="token operator">+</span> <span class="token string">"=)[^&amp;#]*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>url<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>url <span class="token operator">+</span> <span class="token string">"?"</span> <span class="token operator">+</span> param <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> value<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>url <span class="token operator">+</span> <span class="token string">"&amp;"</span> <span class="token operator">+</span> param <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>forceReplace<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> url<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">"$1"</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> url<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;URL&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://wangytbest.github.io/categories/Javascript/"/>
    
      <category term="util" scheme="http://wangytbest.github.io/categories/Javascript/util/"/>
    
    
  </entry>
  
  <entry>
    <title>localstroge本地缓存</title>
    <link href="http://wangytbest.github.io/2018/05/30/localstroge%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98/"/>
    <id>http://wangytbest.github.io/2018/05/30/localstroge本地缓存/</id>
    <published>2018-05-30T07:01:25.000Z</published>
    <updated>2019-04-09T07:02:46.230Z</updated>
    
    <content type="html"><![CDATA[<p>localStorage设置过期时间<br><a id="more"></a></p><pre class=" language-js"><code class="language-js"><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"localStorage"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> module<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> cache <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"cachev1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>local<span class="token punctuation">;</span>    <span class="token keyword">var</span> Promise <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"promise.min"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 将过期时间字符串转换成时间戳     *  convertExpire("7d")     *  convertExpire(3600)  1小时     * @param  {String} val  过期时间，格式为`\d+[smhd]`，其中s 表示秒、m 分钟、h 小时、d 天，如 30d   默认是秒     * @return {Number}      时间戳（单位s）     */</span>    <span class="token keyword">function</span> <span class="token function">convertExpire</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> matches <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">''</span> <span class="token operator">+</span> val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/(\d+)([smhd])/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> ms <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>matches<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>matches<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token string">'s'</span><span class="token punctuation">:</span>                    ms <span class="token operator">=</span> matches<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'m'</span><span class="token punctuation">:</span>                    ms <span class="token operator">=</span> matches<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'h'</span><span class="token punctuation">:</span>                    ms <span class="token operator">=</span> matches<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'d'</span><span class="token punctuation">:</span>                    ms <span class="token operator">=</span> matches<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>            ms <span class="token operator">=</span> val<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ms<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> timeout <span class="token operator">=</span> setTimeout<span class="token punctuation">;</span>    <span class="token keyword">var</span> storage <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 将数据写入本地缓存         *         * @param  {String}          key      键名         * @param  {Object | String} value    数据         * @param  {Object}          options  可选项，可传expire 设定数据过期时间，格式参见convertExpire         *         * @return {Promise}         Promise实例         */</span>        <span class="token keyword">set</span><span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">var</span> expire <span class="token operator">=</span> <span class="token function">convertExpire</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> options <span class="token operator">==</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>expire <span class="token operator">?</span> options<span class="token punctuation">.</span>expire <span class="token punctuation">:</span> <span class="token string">'7d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    cache<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">,</span>expire<span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>ret<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">else</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">/**         * 获取本地缓存数据，当数据已过期时会被清理掉         *         * @param  {String}  key         键名         * @param  {Mix}     defaultVal  如设置了默认值，则保证不会被reject         *         * @return {Promise}      Promise实例         */</span>        <span class="token keyword">get</span><span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> defaultVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">var</span> value <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>value<span class="token operator">===</span><span class="token string">""</span><span class="token operator">||</span>value<span class="token operator">===</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> defaultVal<span class="token operator">!=</span><span class="token string">"undefined"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            <span class="token function">resolve</span><span class="token punctuation">(</span>defaultVal<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                            <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">return</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">/**         * 移除本地缓存数据         */</span>        remove<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    cache<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">/**         * 同步地设置本地缓存数据         *         * @deprecated 此方法只为了暂时兼容旧接口，会极大的影响性，能请勿使用！         */</span>        setSync<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> expire <span class="token operator">=</span> <span class="token function">convertExpire</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> options <span class="token operator">==</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>expire <span class="token operator">?</span> options<span class="token punctuation">.</span>expire <span class="token punctuation">:</span> <span class="token string">'7d'</span><span class="token punctuation">)</span>            cache<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">,</span>expire<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">/**         * 同步地获取本地缓存数据，当数据已过期时会被清理掉         *         * @deprecated 此方法只为了暂时兼容旧接口，会极大的影响性，能请勿使用！         */</span>        getSync<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> cache<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> storage<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;localStorage设置过期时间&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://wangytbest.github.io/categories/Javascript/"/>
    
      <category term="util" scheme="http://wangytbest.github.io/categories/Javascript/util/"/>
    
    
  </entry>
  
  <entry>
    <title>时间处理</title>
    <link href="http://wangytbest.github.io/2018/05/30/%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86/"/>
    <id>http://wangytbest.github.io/2018/05/30/时间处理/</id>
    <published>2018-05-30T06:58:34.000Z</published>
    <updated>2019-04-09T06:57:25.715Z</updated>
    
    <content type="html"><![CDATA[<p>时间处理方法</p> <a id="more"></a><pre class=" language-javascript"><code class="language-javascript"><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"date"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>require<span class="token punctuation">,</span>exports<span class="token punctuation">,</span>module<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> _cacheThisModule_<span class="token punctuation">;</span>    exports<span class="token punctuation">.</span>format <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>date<span class="token punctuation">,</span>formatStr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//格式化时间</span>        <span class="token keyword">var</span>    arrWeek<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'日'</span><span class="token punctuation">,</span><span class="token string">'一'</span><span class="token punctuation">,</span><span class="token string">'二'</span><span class="token punctuation">,</span><span class="token string">'三'</span><span class="token punctuation">,</span><span class="token string">'四'</span><span class="token punctuation">,</span><span class="token string">'五'</span><span class="token punctuation">,</span><span class="token string">'六'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        str<span class="token operator">=</span>formatStr            <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/yyyy|YYYY/</span><span class="token punctuation">,</span>date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/yy|YY/</span><span class="token punctuation">,</span><span class="token function">$addZero</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/mm|MM/</span><span class="token punctuation">,</span><span class="token function">$addZero</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/m|M/g</span><span class="token punctuation">,</span>date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/dd|DD/</span><span class="token punctuation">,</span><span class="token function">$addZero</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/d|D/g</span><span class="token punctuation">,</span>date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/hh|HH/</span><span class="token punctuation">,</span><span class="token function">$addZero</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/h|H/g</span><span class="token punctuation">,</span>date<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/ii|II/</span><span class="token punctuation">,</span><span class="token function">$addZero</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/i|I/g</span><span class="token punctuation">,</span>date<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/ss|SS/</span><span class="token punctuation">,</span><span class="token function">$addZero</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/s|S/g</span><span class="token punctuation">,</span>date<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/w/g</span><span class="token punctuation">,</span>date<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/W/g</span><span class="token punctuation">,</span>arrWeek<span class="token punctuation">[</span>date<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    exports<span class="token punctuation">.</span>getTimeDistance <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>ts<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//根据时间差计算剩余的时间，返回[天，小时，分，秒]</span>        <span class="token keyword">var</span> timeLeft<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结构：天、小时、分、秒</span>        timeLeft<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>ts<span class="token operator">></span><span class="token number">86400</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token function">parseInt</span><span class="token punctuation">(</span>ts<span class="token operator">/</span><span class="token number">86400</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>        ts<span class="token operator">=</span>ts <span class="token operator">-</span> timeLeft<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">86400</span><span class="token punctuation">;</span>        timeLeft<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>ts<span class="token operator">></span><span class="token number">3600</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token function">parseInt</span><span class="token punctuation">(</span>ts<span class="token operator">/</span><span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>        ts<span class="token operator">=</span>ts <span class="token operator">-</span> timeLeft<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3600</span><span class="token punctuation">;</span>        timeLeft<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>ts<span class="token operator">></span><span class="token number">60</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token function">parseInt</span><span class="token punctuation">(</span>ts<span class="token operator">/</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>        timeLeft<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>ts <span class="token operator">-</span> timeLeft<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> timeLeft<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    exports<span class="token punctuation">.</span>getTimeInterval <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>st<span class="token punctuation">,</span>et<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//返回两个时间之间的间隔的描述字符串</span>        <span class="token keyword">var</span> dateLeft <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> hourLeft <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> minuteLeft <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> secondLeft <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> timeLeft<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结构：天、小时、分、秒</span>        <span class="token keyword">var</span> timeStr<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> ts<span class="token operator">=</span><span class="token punctuation">(</span>et<span class="token operator">></span>st<span class="token punctuation">)</span><span class="token operator">?</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>et<span class="token operator">-</span>st<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>        timeLeft<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>ts<span class="token operator">></span><span class="token number">86400</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token function">parseInt</span><span class="token punctuation">(</span>ts<span class="token operator">/</span><span class="token number">86400</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>        ts<span class="token operator">=</span>ts <span class="token operator">-</span> timeLeft<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">86400</span><span class="token punctuation">;</span>        timeLeft<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>ts<span class="token operator">></span><span class="token number">3600</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token function">parseInt</span><span class="token punctuation">(</span>ts<span class="token operator">/</span><span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>        ts<span class="token operator">=</span>ts <span class="token operator">-</span> timeLeft<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3600</span><span class="token punctuation">;</span>        timeLeft<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>ts<span class="token operator">></span><span class="token number">60</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token function">parseInt</span><span class="token punctuation">(</span>ts<span class="token operator">/</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>        timeLeft<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>ts <span class="token operator">-</span> timeLeft<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span>        timeStr<span class="token operator">=</span><span class="token punctuation">(</span>timeLeft<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">?</span>timeLeft<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"天"</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">;</span>        timeStr<span class="token operator">+</span><span class="token operator">=</span><span class="token punctuation">(</span>timeLeft<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> timeLeft<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token string">""</span><span class="token punctuation">:</span><span class="token punctuation">(</span>timeLeft<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"小时"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        timeStr<span class="token operator">+</span><span class="token operator">=</span><span class="token punctuation">(</span>timeLeft<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> timeLeft<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> timeLeft<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token string">""</span><span class="token punctuation">:</span><span class="token punctuation">(</span>timeLeft<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"分钟"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        timeStr<span class="token operator">+</span><span class="token operator">=</span><span class="token punctuation">(</span>timeLeft<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> timeLeft<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> timeLeft<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> timeLeft<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token string">""</span><span class="token punctuation">:</span>timeLeft<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"秒"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> timeStr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">$addZero</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token operator">=</span>size<span class="token operator">-</span><span class="token punctuation">(</span>v<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            v<span class="token operator">=</span><span class="token string">"0"</span><span class="token operator">+</span>v<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> v<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    exports<span class="token punctuation">.</span>getServerTime <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> sysTime <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'SYSTIME'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sysTime<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> ts <span class="token operator">=</span> sysTime<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                dObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>ts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>ts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> ts<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ts<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ts<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ts<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> dObj<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token function">$xhrMaker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        url <span class="token operator">=</span> url <span class="token operator">||</span> <span class="token string">"http://"</span> <span class="token operator">+</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hostname<span class="token operator">+</span><span class="token string">"/favicon.ico"</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"HEAD"</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span><span class="token function">getResponseHeader</span><span class="token punctuation">(</span><span class="token string">"Date"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">$xhrMaker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> xhr<span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">// Firefox, Opera 8.0+, Safari</span>            xhr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//Internet Explorer</span>            <span class="token keyword">try</span><span class="token punctuation">{</span>                xhr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Msxml2.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    xhr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    xhr<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> xhr<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;时间处理方法&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://wangytbest.github.io/categories/Javascript/"/>
    
      <category term="util" scheme="http://wangytbest.github.io/categories/Javascript/util/"/>
    
    
  </entry>
  
  <entry>
    <title>cookie操作</title>
    <link href="http://wangytbest.github.io/2018/05/30/cookie%E6%93%8D%E4%BD%9C/"/>
    <id>http://wangytbest.github.io/2018/05/30/cookie操作/</id>
    <published>2018-05-30T06:57:34.000Z</published>
    <updated>2019-04-09T07:10:41.051Z</updated>
    
    <content type="html"><![CDATA[<p>cookie处理操作<br><a id="more"></a></p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"cookie"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>require<span class="token punctuation">,</span>exports<span class="token punctuation">,</span>module<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> _cacheThisModule_<span class="token punctuation">;</span>    exports<span class="token punctuation">.</span><span class="token keyword">get</span> <span class="token operator">=</span> getCookie<span class="token punctuation">;</span>    exports<span class="token punctuation">.</span><span class="token keyword">set</span> <span class="token operator">=</span> setCookie<span class="token punctuation">;</span>    exports<span class="token punctuation">.</span>del <span class="token operator">=</span> delCookie<span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">getCookie</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//读取COOKIE</span>        <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"(^| )"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"(?:=([^;]*))?(;|$)"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> val <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>val <span class="token operator">||</span> <span class="token operator">!</span>val<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">var</span> res <span class="token operator">=</span> val<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token regex">/(%[0-9A-F]{2}){2,}/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//utf8编码</span>               <span class="token keyword">return</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//unicode编码</span>                <span class="token keyword">return</span> <span class="token function">unescape</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">unescape</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">setCookie</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">,</span> expires<span class="token punctuation">,</span> path<span class="token punctuation">,</span> domain<span class="token punctuation">,</span> secure<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//写入COOKIES</span>        <span class="token keyword">var</span> exp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> expires <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">,</span> path <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">"/"</span><span class="token punctuation">,</span> domain <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">,</span> secure <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        expires <span class="token operator">?</span> exp<span class="token punctuation">.</span><span class="token function">setMinutes</span><span class="token punctuation">(</span>exp<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>expires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> name <span class="token operator">+</span> <span class="token string">'='</span> <span class="token operator">+</span> <span class="token function">escape</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span> expires <span class="token operator">?</span> <span class="token string">';expires='</span> <span class="token operator">+</span> exp<span class="token punctuation">.</span><span class="token function">toGMTString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span> path <span class="token operator">?</span> <span class="token string">';path='</span> <span class="token operator">+</span> path <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span> domain <span class="token operator">?</span> <span class="token string">';domain='</span> <span class="token operator">+</span> domain <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span> secure <span class="token operator">?</span> <span class="token string">';secure'</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">delCookie</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> path<span class="token punctuation">,</span> domain<span class="token punctuation">,</span> secure<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//删除cookie</span>        <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token function">getCookie</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> exp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            exp<span class="token punctuation">.</span><span class="token function">setMinutes</span><span class="token punctuation">(</span>exp<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            path <span class="token operator">=</span> path <span class="token operator">||</span> <span class="token string">"/"</span><span class="token punctuation">;</span>            document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> name <span class="token operator">+</span> <span class="token string">'=;expires='</span> <span class="token operator">+</span> exp<span class="token punctuation">.</span><span class="token function">toGMTString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span> path <span class="token operator">?</span> <span class="token string">';path='</span> <span class="token operator">+</span> path <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span> domain <span class="token operator">?</span> <span class="token string">';domain='</span> <span class="token operator">+</span> domain <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span> secure <span class="token operator">?</span> <span class="token string">';secure'</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;cookie处理操作&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://wangytbest.github.io/categories/Javascript/"/>
    
      <category term="util" scheme="http://wangytbest.github.io/categories/Javascript/util/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL安装教程</title>
    <link href="http://wangytbest.github.io/2018/05/29/MySQL%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <id>http://wangytbest.github.io/2018/05/29/MySQL安装教程/</id>
    <published>2018-05-29T10:34:44.000Z</published>
    <updated>2019-04-09T07:01:42.650Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-下载安装"><a href="#1-下载安装" class="headerlink" title="1. 下载安装"></a>1. 下载安装</h1><h2 id="1-1-下载"><a href="#1-1-下载" class="headerlink" title="1.1 下载"></a>1.1 下载</h2><p>MySQL8.0 For Windows zip包下载地址：<a href="https://dev.mysql.com/downloads/file/?id=476233" target="_blank" rel="noopener">MySQL8.0 For Window</a>，进入页面后可以不登录。后点击底部<code>No thanks, just start my download.</code>即可开始下载。或直接下载：<a href="https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.11-winx64.zip" target="_blank" rel="noopener">https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.11-winx64.zip</a><br><a id="more"></a></p><h2 id="1-2-安装"><a href="#1-2-安装" class="headerlink" title="1.2 安装"></a>1.2 安装</h2><p>解压zip包到安装目录</p><blockquote><p> 配置文件：在Windows系统中，配置文件默认是安装目录下的 <code>my.ini</code> 文件（或<code>my-default.ini</code>），部分配置需要在初始安装时配置，大部分也可以在安装完成后进行更改。当然，极端情况下，所有的都是可以更改的。</p></blockquote><blockquote><p>　　我们发现解压后的目录并没有<code>my.ini</code>文件，没关系可以自行创建。在安装根目录下添加 my.ini，比如我这里是：C:\Program Files\MySQL\my.ini，写入基本配置：</p></blockquote><pre><code>[mysqld]# 设置3306端口port=3306# 设置mysql的安装目录basedir=C:\Program Files\MySQL# 设置mysql数据库的数据的存放目录datadir=E:\database\MySQL\Data# 允许最大连接数max_connections=200# 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统max_connect_errors=10# 服务端使用的字符集默认为UTF8character-set-server=utf8# 创建新表时将使用的默认存储引擎default-storage-engine=INNODB# 默认使用“mysql_native_password”插件认证default_authentication_plugin=mysql_native_password[mysql]# 设置mysql客户端默认字符集default-character-set=utf8[client]# 设置mysql客户端连接服务端时默认使用的端口port=3306default-character-set=utf8</code></pre><p>注意，里面的 basedir 是本地的安装目录，datadir 是我数据库数据文件要存放的位置，各项配置需要根据自己的环境进行配置。<br>查看所有的配置项，可参考：<a href="https://dev.mysql.com/doc/refman/8.0/en/mysqld-option-tables.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/8.0/en/mysqld-option-tables.html</a></p><h1 id="2-初始化数据库"><a href="#2-初始化数据库" class="headerlink" title="2 初始化数据库"></a>2 初始化数据库</h1><p>在MySQL安装目录的 bin 目录下执行命令：</p><blockquote><p><code>mysqld --initialize --console</code></p></blockquote><p>执行完成后，会打印 root 用户的初始默认密码，比如：</p><pre class=" language-cmd"><code class="language-cmd">C:\Users\Administrator>cd C:\Program Files\MySQL\binC:\Program Files\MySQL\bin>mysqld --initialize --console2018-04-28T15:57:17.087519Z 0 [System] [MY-013169] [Server] C:\Program Files\MySQL\bin\mysqld.exe (mysqld 8.0.11) initializing of server in progress as process 49842018-04-28T15:57:24.859249Z 5 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: rI5rvf5x5G,E2018-04-28T15:57:27.106660Z 0 [System] [MY-013170] [Server] C:\Program Files\MySQL\bin\mysqld.exe (mysqld 8.0.11) initializing of server has completedC:\Program Files\MySQL\bin></code></pre><p>注意！执行输出结果里面有一段： <code>[Note] [MY-010454] [Server] A temporary password is generated for root@localhost: rI5rvf5x5G,E</code> 其中<code>root@localhost:</code>后面的<code>rI5rvf5x5G,E</code>就是初始密码（不含首位空格）。在没有更改密码前，需要记住这个密码，后续登录需要用到。</p><h1 id="3-安装数据库"><a href="#3-安装数据库" class="headerlink" title="3 安装数据库"></a>3 安装数据库</h1><p>在MySQL安装目录的 bin 目录下执行命令（以管理员身份打开cmd命令行，或者在安装目录Shift+右键“在此处打开命令行窗口”）：</p><blockquote><p><code>mysqld --install [服务名]</code></p></blockquote><p>后面的服务名可以不写，默认的名字为 mysql。</p><p>安装完成之后，就可以通过命令<code>net start mysql</code>启动MySQL的服务了。<br>示例：</p><pre class=" language-cmd"><code class="language-cmd">C:\Program Files\MySQL\bin>mysqld --installService successfully installed.C:\Program Files\MySQL\bin>net start mysqlMySQL 服务正在启动 ..MySQL 服务已经启动成功。</code></pre><h1 id="4-修改密码"><a href="#4-修改密码" class="headerlink" title="4 修改密码"></a>4 修改密码</h1><p>在MySQL安装目录的 bin 目录下执行命令：</p><blockquote><p><code>mysql -u root -p</code></p></blockquote><p>这时候会提示输入密码，记住了上面第1.3步安装时的密码，填入即可登录成功，进入MySQL命令模式。</p><p>修改密码:</p><blockquote><p><code>ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;新密码&#39;;</code></p></blockquote><pre class=" language-cmd"><code class="language-cmd">[mysqld]default_authentication_plugin=mysql_native_password</code></pre><pre class=" language-cmd"><code class="language-cmd">C:\Program Files\MySQL\bin>mysql -u root -pEnter password: ************Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 8Server version: 8.0.11Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.mysql> ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '新密码';Query OK, 0 rows affected (0.06 sec)mysql></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-下载安装&quot;&gt;&lt;a href=&quot;#1-下载安装&quot; class=&quot;headerlink&quot; title=&quot;1. 下载安装&quot;&gt;&lt;/a&gt;1. 下载安装&lt;/h1&gt;&lt;h2 id=&quot;1-1-下载&quot;&gt;&lt;a href=&quot;#1-1-下载&quot; class=&quot;headerlink&quot; title=&quot;1.1 下载&quot;&gt;&lt;/a&gt;1.1 下载&lt;/h2&gt;&lt;p&gt;MySQL8.0 For Windows zip包下载地址：&lt;a href=&quot;https://dev.mysql.com/downloads/file/?id=476233&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MySQL8.0 For Window&lt;/a&gt;，进入页面后可以不登录。后点击底部&lt;code&gt;No thanks, just start my download.&lt;/code&gt;即可开始下载。或直接下载：&lt;a href=&quot;https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.11-winx64.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.11-winx64.zip&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://wangytbest.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://wangytbest.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>浏览器判断</title>
    <link href="http://wangytbest.github.io/2018/05/18/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%88%A4%E6%96%AD/"/>
    <id>http://wangytbest.github.io/2018/05/18/浏览器判断/</id>
    <published>2018-05-18T06:09:14.000Z</published>
    <updated>2019-04-09T06:56:40.289Z</updated>
    
    <content type="html"><![CDATA[<p>移动端判断浏览器环境：</p><ul><li>微信浏览器</li><li>小程序</li><li>JD APP</li><li>浏览器</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> uaTypes <span class="token operator">=</span> <span class="token punctuation">{</span>  APP<span class="token punctuation">:</span> <span class="token string">'app'</span><span class="token punctuation">,</span>  WECHAT<span class="token punctuation">:</span> <span class="token string">'webchat'</span><span class="token punctuation">,</span>  QQ<span class="token punctuation">:</span> <span class="token string">'qq'</span><span class="token punctuation">,</span>  MOBILE<span class="token punctuation">:</span> <span class="token string">'mobile'</span><span class="token punctuation">}</span></code></pre> <a id="more"></a><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> ua <span class="token operator">=</span> navigator<span class="token punctuation">.</span>userAgent<span class="token keyword">const</span> type <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex">/jdapp/i</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>ua<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> uaTypes<span class="token punctuation">.</span>APP  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex">/MicroMessenger/i</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>ua<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> uaTypes<span class="token punctuation">.</span>WECHAT  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex">/QQ/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>ua<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 区分手机QQ和QQ浏览器</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex">/MQQBrowser/i</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>ua<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> uaTypes<span class="token punctuation">.</span>MOBILE    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> uaTypes<span class="token punctuation">.</span>QQ    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> uaTypes<span class="token punctuation">.</span>MOBILE  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;移动端判断浏览器环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;微信浏览器&lt;/li&gt;
&lt;li&gt;小程序&lt;/li&gt;
&lt;li&gt;JD APP&lt;/li&gt;
&lt;li&gt;浏览器&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;const uaTypes = {
  APP: &amp;#39;app&amp;#39;,
  WECHAT: &amp;#39;webchat&amp;#39;,
  QQ: &amp;#39;qq&amp;#39;,
  MOBILE: &amp;#39;mobile&amp;#39;
}
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Web / H5" scheme="http://wangytbest.github.io/categories/Web-H5/"/>
    
    
  </entry>
  
  <entry>
    <title>margin、padding的百分比计算</title>
    <link href="http://wangytbest.github.io/2018/04/20/margin%E3%80%81padding%E7%9A%84%E7%99%BE%E5%88%86%E6%AF%94%E8%AE%A1%E7%AE%97/"/>
    <id>http://wangytbest.github.io/2018/04/20/margin、padding的百分比计算/</id>
    <published>2018-04-20T02:54:12.000Z</published>
    <updated>2019-04-09T07:02:55.169Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS2-1-Box-model"><a href="#CSS2-1-Box-model" class="headerlink" title="CSS2.1 Box model"></a>CSS2.1 Box model</h1><blockquote><p>The percentage is calculated with respect to the width of the generated box’s containing block. Note that this is true for <code>margin-top</code> and <code>margin-bottom</code> as well.</p></blockquote><p>margin：百分比的计算基于生成框的包含块(父元素)的width（margin-top/bottom也是如此）。<br>padding同理</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CSS2-1-Box-model&quot;&gt;&lt;a href=&quot;#CSS2-1-Box-model&quot; class=&quot;headerlink&quot; title=&quot;CSS2.1 Box model&quot;&gt;&lt;/a&gt;CSS2.1 Box model&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;T
      
    
    </summary>
    
      <category term="CSS" scheme="http://wangytbest.github.io/categories/CSS/"/>
    
    
  </entry>
  
  <entry>
    <title>canvas精灵</title>
    <link href="http://wangytbest.github.io/2018/04/18/canvas%E7%B2%BE%E7%81%B5/"/>
    <id>http://wangytbest.github.io/2018/04/18/canvas精灵/</id>
    <published>2018-04-18T09:40:26.000Z</published>
    <updated>2019-04-09T07:08:58.895Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p><a href="http://javascript.ruanyifeng.com/htmlapi/requestanimationframe.html" target="_blank" rel="noopener">requestAnimationFrame</a><br><a href="https://segmentfault.com/a/1190000010435543" target="_blank" rel="noopener">使用 canvas 实现精灵动画</a><br><a href="http://www.williammalone.com/articles/create-html5-canvas-javascript-sprite-animation/" target="_blank" rel="noopener">CREATE A SPRITE ANIMATION WITH HTML5 CANVAS AND JAVASCRIPT</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame" target="_blank" rel="noopener">window.requestAnimationFrame</a><br><a href="http://www.zhangxinxu.com/wordpress/2013/09/css3-animation-requestanimationframe-tween-%E5%8A%A8%E7%94%BB%E7%AE%97%E6%B3%95/" target="_blank" rel="noopener">CSS3动画那么强，requestAnimationFrame还有毛线用？</a><br><a href="http://www.w3school.com.cn/tags/canvas_drawimage.asp" target="_blank" rel="noopener">HTML5 canvas drawImage() 方法</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;a href=&quot;http://javascript.ruanyifeng.com/htmlapi/requestanimationframe.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;requestAni
      
    
    </summary>
    
      <category term="Javascript" scheme="http://wangytbest.github.io/categories/Javascript/"/>
    
      <category term="canvas" scheme="http://wangytbest.github.io/categories/Javascript/canvas/"/>
    
    
      <category term="JS" scheme="http://wangytbest.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>数组对象判断</title>
    <link href="http://wangytbest.github.io/2018/04/12/%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E5%88%A4%E6%96%AD/"/>
    <id>http://wangytbest.github.io/2018/04/12/数组对象判断/</id>
    <published>2018-04-12T07:51:26.000Z</published>
    <updated>2019-04-09T07:10:56.977Z</updated>
    
    <content type="html"><![CDATA[<p>数组对象判断方法<br><a id="more"></a></p><h2 id="支付宝base-js"><a href="#支付宝base-js" class="headerlink" title="支付宝base.js"></a>支付宝base.js</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span> value <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token operator">||</span>   <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>   <span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'[object Array]'</span><span class="token punctuation">)</span> <span class="token operator">||</span>   <span class="token keyword">typeof</span> value<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token string">'number'</span> <span class="token operator">&amp;&amp;</span>   <span class="token keyword">typeof</span> value<span class="token punctuation">.</span>splice <span class="token operator">!=</span> <span class="token string">'undefined'</span> <span class="token operator">&amp;&amp;</span>   <span class="token keyword">typeof</span> value<span class="token punctuation">.</span>propertyIsEnumerable <span class="token operator">!=</span> <span class="token string">'undefined'</span> <span class="token operator">&amp;&amp;</span>   <span class="token operator">!</span>value<span class="token punctuation">.</span><span class="token function">propertyIsEnumerable</span><span class="token punctuation">(</span><span class="token string">'splice'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token string">'array'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> arr <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true </span>arr<span class="token punctuation">.</span>constructor <span class="token operator">==</span> Array<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true </span></code></pre><h2 id="call-apply"><a href="#call-apply" class="headerlink" title="call/apply"></a>call/apply</h2><pre class=" language-javascript"><code class="language-javascript">Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'[object Array]'</span><span class="token keyword">var</span> isArray <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Array]'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre><h2 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h2><blockquote><p>typeof方法返回一个字符串，来表示数据的类型。</p></blockquote><table><thead><tr><th>数据类型</th><th style="text-align:center">type</th></tr></thead><tbody><tr><td>数据类型</td><td style="text-align:center">Type</td></tr><tr><td>Undefined</td><td style="text-align:center">undefined</td></tr><tr><td>Null</td><td style="text-align:center">object</td></tr><tr><td>布尔值</td><td style="text-align:center">boolean</td></tr><tr><td>数值</td><td style="text-align:center">number</td></tr><tr><td>字符串</td><td style="text-align:center">string</td></tr><tr><td>Symbol (ECMAScript 6 新增)</td><td style="text-align:center">symbol</td></tr><tr><td>宿主对象(JS环境提供的，比如浏览器)</td><td style="text-align:center">Implementation-dependent</td></tr><tr><td>函数对象</td><td style="text-align:center">function</td></tr><tr><td>任何其他对象</td><td style="text-align:center">object</td></tr></tbody></table><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">typeof</span> a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "object"</span><span class="token keyword">typeof</span> b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "object"</span>a <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token comment" spellcheck="true">// true</span>b <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token comment" spellcheck="true">// true</span>a <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token comment" spellcheck="true">// true</span>b <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token comment" spellcheck="true">// false</span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数组对象判断方法&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://wangytbest.github.io/categories/Javascript/"/>
    
      <category term="util" scheme="http://wangytbest.github.io/categories/Javascript/util/"/>
    
    
      <category term="Javascript" scheme="http://wangytbest.github.io/tags/Javascript/"/>
    
      <category term="util" scheme="http://wangytbest.github.io/tags/util/"/>
    
  </entry>
  
  <entry>
    <title>sass基础入门</title>
    <link href="http://wangytbest.github.io/2018/04/03/sass%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    <id>http://wangytbest.github.io/2018/04/03/sass基础入门/</id>
    <published>2018-04-03T12:39:08.000Z</published>
    <updated>2019-04-09T07:00:51.928Z</updated>
    
    <content type="html"><![CDATA[<h2 id="css功能拓展"><a href="#css功能拓展" class="headerlink" title="css功能拓展"></a>css功能拓展</h2><h3 id="嵌套（Nested-Rules）"><a href="#嵌套（Nested-Rules）" class="headerlink" title="嵌套（Nested Rules）"></a>嵌套（Nested Rules）</h3><p>sass允许将css样式嵌套进另一套样式中，内层的样式将他的外层的选择器作为父选择器。</p><h3 id="父选择器-amp-Referencing-Parent-Selectors-amp"><a href="#父选择器-amp-Referencing-Parent-Selectors-amp" class="headerlink" title="父选择器 &amp; (Referencing Parent Selectors: &amp;)"></a>父选择器 &amp; (Referencing Parent Selectors: &amp;)</h3><h3 id="属性嵌套-Nested-Properties"><a href="#属性嵌套-Nested-Properties" class="headerlink" title="属性嵌套 (Nested Properties)"></a>属性嵌套 (Nested Properties)</h3><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.funky</span> </span><span class="token punctuation">{</span>  <span class="token selector">font: </span><span class="token punctuation">{</span>    <span class="token property">family</span><span class="token punctuation">:</span> fantasy<span class="token punctuation">;</span>    <span class="token property">size</span><span class="token punctuation">:</span> <span class="token number">30</span>em<span class="token punctuation">;</span>    <span class="token property">weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="占位符选择器-foo-Placeholder-Selectors-foo"><a href="#占位符选择器-foo-Placeholder-Selectors-foo" class="headerlink" title="占位符选择器 %foo (Placeholder Selectors: %foo)"></a>占位符选择器 %foo (Placeholder Selectors: %foo)</h3><a id="more"></a><h2 id="SassScript"><a href="#SassScript" class="headerlink" title="SassScript"></a>SassScript</h2><h3 id="变量-Variables"><a href="#变量-Variables" class="headerlink" title="变量 $ (Variables: $)"></a>变量 $ (Variables: $)</h3><pre class=" language-css"><code class="language-css"><span class="token selector">$width: 5em;<span class="token id">#main</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> $width<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>变量支持块级作用域，嵌套规则内定义的变量只能在嵌套规则内使用（局部变量），不在嵌套规则内定义的变量则可在任何地方使用（全局变量）。将局部变量转换为全局变量可以添加 <code>!global</code> 声明</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token id">#main</span> </span><span class="token punctuation">{</span>    $<span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">5</span>em !global<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> $width<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token id">#sidebar</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> $width<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;css功能拓展&quot;&gt;&lt;a href=&quot;#css功能拓展&quot; class=&quot;headerlink&quot; title=&quot;css功能拓展&quot;&gt;&lt;/a&gt;css功能拓展&lt;/h2&gt;&lt;h3 id=&quot;嵌套（Nested-Rules）&quot;&gt;&lt;a href=&quot;#嵌套（Nested-Rules）&quot; class=&quot;headerlink&quot; title=&quot;嵌套（Nested Rules）&quot;&gt;&lt;/a&gt;嵌套（Nested Rules）&lt;/h3&gt;&lt;p&gt;sass允许将css样式嵌套进另一套样式中，内层的样式将他的外层的选择器作为父选择器。&lt;/p&gt;
&lt;h3 id=&quot;父选择器-amp-Referencing-Parent-Selectors-amp&quot;&gt;&lt;a href=&quot;#父选择器-amp-Referencing-Parent-Selectors-amp&quot; class=&quot;headerlink&quot; title=&quot;父选择器 &amp;amp; (Referencing Parent Selectors: &amp;amp;)&quot;&gt;&lt;/a&gt;父选择器 &amp;amp; (Referencing Parent Selectors: &amp;amp;)&lt;/h3&gt;&lt;h3 id=&quot;属性嵌套-Nested-Properties&quot;&gt;&lt;a href=&quot;#属性嵌套-Nested-Properties&quot; class=&quot;headerlink&quot; title=&quot;属性嵌套 (Nested Properties)&quot;&gt;&lt;/a&gt;属性嵌套 (Nested Properties)&lt;/h3&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;.funky {
  font: {
    family: fantasy;
    size: 30em;
    weight: bold;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;占位符选择器-foo-Placeholder-Selectors-foo&quot;&gt;&lt;a href=&quot;#占位符选择器-foo-Placeholder-Selectors-foo&quot; class=&quot;headerlink&quot; title=&quot;占位符选择器 %foo (Placeholder Selectors: %foo)&quot;&gt;&lt;/a&gt;占位符选择器 %foo (Placeholder Selectors: %foo)&lt;/h3&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://wangytbest.github.io/categories/CSS/"/>
    
      <category term="SCSS" scheme="http://wangytbest.github.io/categories/CSS/SCSS/"/>
    
    
  </entry>
  
  <entry>
    <title>vue中keep-alive</title>
    <link href="http://wangytbest.github.io/2018/04/03/vue%E4%B8%ADkeep-alive/"/>
    <id>http://wangytbest.github.io/2018/04/03/vue中keep-alive/</id>
    <published>2018-04-03T12:07:54.000Z</published>
    <updated>2019-04-09T06:59:26.625Z</updated>
    
    <content type="html"><![CDATA[<h2 id="keep-alive使用"><a href="#keep-alive使用" class="headerlink" title="keep-alive使用"></a>keep-alive使用</h2><p><code>&lt;keep-alive&gt;</code>包裹动态的组件，会缓存不活动的组件实例，而不是销毁他们。<code>&lt;keep-alive&gt;</code>是一个抽象的组件，他自身不会渲染一个DOM元素，也不会出现在父组件链中。<br>当组件在<code>&lt;keep-alive&gt;</code>组件内被切换，它的<code>actived</code>和<code>deactived</code>这两个生命周期钩子函数将会被对应执行。</p><blockquote><p>Vue2.2.0及以上版本，<code>activated</code> 和 <code>deactivated</code> 将会在 <code>&lt;keep-alive&gt;</code> 树内的所有嵌套组件中触发。<br><strong>主要用于保留组件状态或避免重新渲染。</strong></p></blockquote><a id="more"></a><p>当引入<code>&lt;keep-alive&gt;</code>的时候，页面第一次进入，钩子的触发顺序<code>created</code> -&gt; <code>mounted</code> -&gt; <code>activated</code>，退出时触发<code>deactivated</code>。当再次进入（前进或者后退）时，只触发<code>activated</code>。</p><p><code>&lt;keep-alive&gt;</code>之后页面模板第一次初始化解析变成HTML片段后，再次进入就不在重新解析而是读取内存中的数据，即，只有当数据变化时，才使用VirtualDOM进行diff更新。故，页面进入的数据获取应该在<code>activated</code>中也放一份。数据下载完毕手动操作DOM的部分也应该在<code>activated</code>中执行才会生效。</p><p>所以，应该<code>activated</code>中留一份数据获取的代码，或者不要<code>created</code>部分，直接将<code>created</code>中的代码转移到<code>activated</code>中。</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 基本 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>view<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 多个条件判断的子组件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comp-a</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a <span class="token punctuation">></span> 1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>comp-a</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comp-b</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>comp-b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 和 `&lt;transition>` 一起使用 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>view<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span></code></pre><h2 id="include-和-exclude"><a href="#include-和-exclude" class="headerlink" title="include 和 exclude"></a>include 和 exclude</h2><p><strong>include 和 exclude 属性允许组件有条件地缓存。</strong>二者都可以用逗号分隔字符串、正则表达式或一个数组来表示：</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 逗号分隔字符串 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span> <span class="token attr-name">include</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a,b<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>view<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 正则表达式 (使用 `v-bind`) --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span> <span class="token attr-name">:include</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/a|b/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>view<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 数组 (使用 `v-bind`) --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span> <span class="token attr-name">:include</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[<span class="token punctuation">'</span>a<span class="token punctuation">'</span>, <span class="token punctuation">'</span>b<span class="token punctuation">'</span>]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>view<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span></code></pre><h2 id="actived-和-deactived"><a href="#actived-和-deactived" class="headerlink" title="actived 和 deactived"></a>actived 和 deactived</h2><ul><li>类型：<code>Function</code></li><li>说明：<code>&lt;keep-alive&gt;</code>组件 <strong>激活/停用</strong> 时调用（该钩子在服务器端渲染期间不被调用）</li></ul><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>项目开发中，使用<code>Vue2.0</code> 搭配路由切换<code>vue-router</code>，所有路径匹配到的视图组件都会被缓存。<br>如何使某些组件不缓存？</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 所有路径匹配到的视图组件都会被缓存！ --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span></code></pre><p>#1. 使用<code>include</code>和<code>exclude</code></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span> <span class="token attr-name">include</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>a,b,c<span class="token punctuation">'</span></span> <span class="token attr-name">exclude</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>d,e,f<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 所有路径匹配到的视图组件都会被缓存！ --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span></code></pre><p>#2. 使用router.meta属性<br>设置路由，通过meta属性判断组件是否需要缓存</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// routes 配置</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'home'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> Home<span class="token punctuation">,</span>    meta<span class="token punctuation">:</span> <span class="token punctuation">{</span>      keepAlive<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// 需要被缓存</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/:id'</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'edit'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> Edit<span class="token punctuation">,</span>    meta<span class="token punctuation">:</span> <span class="token punctuation">{</span>      keepAlive<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">// 不需要被缓存</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$route.meta.keepAlive<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 这里是会被缓存的视图组件，比如 Home！ --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>!$route.meta.keepAlive<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 这里是不被缓存的视图组件，比如 Edit！ --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span></code></pre><p>部分转载<a href="https://blog.csdn.net/zgrkaka/article/details/73480947?locationNum=1&amp;fps=1" target="_blank" rel="noopener">vue-router 之 keep-alive</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;keep-alive使用&quot;&gt;&lt;a href=&quot;#keep-alive使用&quot; class=&quot;headerlink&quot; title=&quot;keep-alive使用&quot;&gt;&lt;/a&gt;keep-alive使用&lt;/h2&gt;&lt;p&gt;&lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt;包裹动态的组件，会缓存不活动的组件实例，而不是销毁他们。&lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt;是一个抽象的组件，他自身不会渲染一个DOM元素，也不会出现在父组件链中。&lt;br&gt;当组件在&lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt;组件内被切换，它的&lt;code&gt;actived&lt;/code&gt;和&lt;code&gt;deactived&lt;/code&gt;这两个生命周期钩子函数将会被对应执行。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Vue2.2.0及以上版本，&lt;code&gt;activated&lt;/code&gt; 和 &lt;code&gt;deactivated&lt;/code&gt; 将会在 &lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt; 树内的所有嵌套组件中触发。&lt;br&gt;&lt;strong&gt;主要用于保留组件状态或避免重新渲染。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://wangytbest.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://wangytbest.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>flex布局在UC和微信浏览器下的兼容性问题</title>
    <link href="http://wangytbest.github.io/2018/04/03/flex%E5%B8%83%E5%B1%80%E5%9C%A8UC%E5%92%8C%E5%BE%AE%E4%BF%A1%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8B%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98/"/>
    <id>http://wangytbest.github.io/2018/04/03/flex布局在UC和微信浏览器下的兼容性问题/</id>
    <published>2018-04-03T11:56:59.000Z</published>
    <updated>2019-04-09T07:05:48.563Z</updated>
    
    <content type="html"><![CDATA[<h2 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h2><h2 id="UC和微信浏览器下的兼容性问题"><a href="#UC和微信浏览器下的兼容性问题" class="headerlink" title="UC和微信浏览器下的兼容性问题"></a>UC和微信浏览器下的兼容性问题</h2><p>所有<code>webkit</code>内核的浏览器（包括移动端）都支持 flex 布局，只不过一些浏览器只支持旧语法，如：<code>display: -webkit-box</code> 。<br>旧语法和标准的 <code>flex</code> 语法有较大区别，需要做好兼容。不过可以来使用 <code>autoprefixer</code> 来自动处理这些兼容性问题，而开发时只需要写标准的语法就好了。</p><p>假如没有使用<code>autoprefixer</code>，在UC浏览器和微信内置浏览器中，使用<code>display:flex;</code>时会不起作用，要加上兼容性写法。<br><a id="more"></a></p><pre class=" language-css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/* OLD - iOS 6-, Safari 3.1-6 */</span><span class="token property">display</span><span class="token punctuation">:</span> -moz-box<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">/* OLD - Firefox 19- (buggy but mostly works) */</span><span class="token property">display</span><span class="token punctuation">:</span> -ms-flexbox<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/* TWEENER - IE 10 */</span><span class="token property">display</span><span class="token punctuation">:</span> -webkit-flex<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* NEW - Chrome */</span><span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span></code></pre><p>使用<code>flex:1;</code>时也要添加兼容性写法</p><pre class=" language-css"><code class="language-css">           <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">20%</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">/* For old syntax, otherwise collapses. */</span><span class="token property">-webkit-box-flex</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">/* OLD - iOS 6-, Safari 3.1-6 */</span>   <span class="token property">-moz-box-flex</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">/* OLD - Firefox 19- */</span>    <span class="token property">-webkit-flex</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">/* Chrome */</span>        <span class="token property">-ms-flex</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">/* IE 10 */</span>            <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  </code></pre><p><a href="https://github.com/lzxb/flex.css" target="_blank" rel="noopener">flex.css</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;flex布局&quot;&gt;&lt;a href=&quot;#flex布局&quot; class=&quot;headerlink&quot; title=&quot;flex布局&quot;&gt;&lt;/a&gt;flex布局&lt;/h2&gt;&lt;h2 id=&quot;UC和微信浏览器下的兼容性问题&quot;&gt;&lt;a href=&quot;#UC和微信浏览器下的兼容性问题&quot; class=&quot;headerlink&quot; title=&quot;UC和微信浏览器下的兼容性问题&quot;&gt;&lt;/a&gt;UC和微信浏览器下的兼容性问题&lt;/h2&gt;&lt;p&gt;所有&lt;code&gt;webkit&lt;/code&gt;内核的浏览器（包括移动端）都支持 flex 布局，只不过一些浏览器只支持旧语法，如：&lt;code&gt;display: -webkit-box&lt;/code&gt; 。&lt;br&gt;旧语法和标准的 &lt;code&gt;flex&lt;/code&gt; 语法有较大区别，需要做好兼容。不过可以来使用 &lt;code&gt;autoprefixer&lt;/code&gt; 来自动处理这些兼容性问题，而开发时只需要写标准的语法就好了。&lt;/p&gt;
&lt;p&gt;假如没有使用&lt;code&gt;autoprefixer&lt;/code&gt;，在UC浏览器和微信内置浏览器中，使用&lt;code&gt;display:flex;&lt;/code&gt;时会不起作用，要加上兼容性写法。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://wangytbest.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://wangytbest.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序使用阿里字体图标</title>
    <link href="http://wangytbest.github.io/2018/03/21/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E5%AD%97%E4%BD%93%E5%9B%BE%E6%A0%87/"/>
    <id>http://wangytbest.github.io/2018/03/21/微信小程序使用阿里字体图标/</id>
    <published>2018-03-21T09:19:02.000Z</published>
    <updated>2019-04-09T06:58:19.759Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为了美化微信小程序，可以使用适当的图标来美化页面，体验更好。<br><a href="http://www.iconfont.cn/" target="_blank" rel="noopener">阿里字体图标库</a>提供了丰富的字体，各种场景下项目中所需要字体几乎都能找到。</p><p>微信小程序中设置元素的背景图片不能使用本地图片，本地资源无法通过WXSS获取，<code>background-img</code>可以使用网络图片或者base64，或者使用<code>image</code>标签，所以不能直接下载阿里字体图标库的图片设置为背景图片，可以将下载的图片转成字体文件使用。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="1-下载字体"><a href="#1-下载字体" class="headerlink" title="1. 下载字体"></a>1. 下载字体</h3><p><img src="https://hexo-blog-1256208212.cos.ap-beijing.myqcloud.com/1521625432192.jpg" alt="下载字体文件"></p><h3 id="2-解压转成base64文件"><a href="#2-解压转成base64文件" class="headerlink" title="2. 解压转成base64文件"></a>2. 解压转成base64文件</h3><p>下载字体文件，解压缩后将<code>.ttf</code>文件转化，<a href="https://transfonter.org/" target="_blank" rel="noopener">transfonter</a><br><img src="https://hexo-blog-1256208212.cos.ap-beijing.myqcloud.com/1521628758409.jpg" alt="转换成base64字体文件"></p><h3 id="3-拷贝字体文件至小程序"><a href="#3-拷贝字体文件至小程序" class="headerlink" title="3. 拷贝字体文件至小程序"></a>3. 拷贝字体文件至小程序</h3><p>将下载好的文件夹中stylesheet.css样式表中的内容拷贝, 粘贴至小程序的<code>wxss</code>文件中,即可引用该iconfont字体图标.</p><h3 id="4-引用字体文件"><a href="#4-引用字体文件" class="headerlink" title="4. 引用字体文件"></a>4. 引用字体文件</h3><p>小程序只能识别<code>wxss</code>为后缀的<code>css</code>文件，不能识别<code>.css</code>文件。<br><code>@import &quot;/assets/iconfont/iconfont.wxss</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;为了美化微信小程序，可以使用适当的图标来美化页面，体验更好。&lt;br&gt;&lt;a href=&quot;http://www.iconfont.cn/&quot; ta
      
    
    </summary>
    
      <category term="Javascript" scheme="http://wangytbest.github.io/categories/Javascript/"/>
    
      <category term="阿里字体" scheme="http://wangytbest.github.io/categories/Javascript/%E9%98%BF%E9%87%8C%E5%AD%97%E4%BD%93/"/>
    
    
      <category term="Javascript" scheme="http://wangytbest.github.io/tags/Javascript/"/>
    
      <category term="阿里字体" scheme="http://wangytbest.github.io/tags/%E9%98%BF%E9%87%8C%E5%AD%97%E4%BD%93/"/>
    
  </entry>
  
  <entry>
    <title>移动端适配方案</title>
    <link href="http://wangytbest.github.io/2018/03/21/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88/"/>
    <id>http://wangytbest.github.io/2018/03/21/移动端适配方案/</id>
    <published>2018-03-21T09:17:24.000Z</published>
    <updated>2019-04-09T06:56:33.111Z</updated>
    
    <content type="html"><![CDATA[<h3 id="视窗（viewport）"><a href="#视窗（viewport）" class="headerlink" title="视窗（viewport）"></a>视窗（viewport）</h3><p>简单理解<code>viewport</code>就是浏览器窗口大小。在桌面浏览器中，viewport就是浏览器窗口的高度和宽度。在移动设备中，由于移动端的viewport太窄，为了更好为CSS布局服务，所以提供了两个viewport。</p><blockquote><p><code>虚拟viewport</code> ： <code>visual viewport</code><br><code>布局viewport</code> ： <code>layout viewport</code></p></blockquote><h3 id="物理像素-physical-pixel"><a href="#物理像素-physical-pixel" class="headerlink" title="物理像素 physical pixel"></a>物理像素 physical pixel</h3><p>物理像素也被称为设备像素，他是显示设备中一个最小的物理设备，物理像素单位。每个像素可以根据操作系统设置自己的颜色和亮度。</p> <a id="more"></a><h3 id="设备独立像素-device-independent-pixel-逻辑像素"><a href="#设备独立像素-device-independent-pixel-逻辑像素" class="headerlink" title="设备独立像素 device-independent pixel - 逻辑像素"></a>设备独立像素 device-independent pixel - 逻辑像素</h3><p>设备独立像素也称为密度无关像素，可以认为是计算机坐标系统中的一个点，这个点代表一个可以程序使用的虚拟像素，比如CSS像素，然后由相关系统转换为物理像素。</p><h3 id="CSS像素（与设备无关像素-device-independent-piexl）"><a href="#CSS像素（与设备无关像素-device-independent-piexl）" class="headerlink" title="CSS像素（与设备无关像素 device-independent piexl）"></a>CSS像素（与设备无关像素 device-independent piexl）</h3><p>一个抽象单位，主要使用在浏览器上，用来精确度量Web页面上点内容。一般CSS像素称为与设备无关的像素（device-independent piexl），DIPs。</p><h3 id="屏幕密度"><a href="#屏幕密度" class="headerlink" title="屏幕密度"></a>屏幕密度</h3><p>屏幕密度是指一个设备表面上存在的像素数量，通常以<strong>每英寸有多少像素来计算</strong>（PPI）</p><h3 id="设备像素比（device-pixel-ratio）"><a href="#设备像素比（device-pixel-ratio）" class="headerlink" title="设备像素比（device pixel ratio）"></a>设备像素比（device pixel ratio）</h3><p>设备像素比简称为<strong>dpr</strong>，定义了物理像素和设备独立像素之间的对应关系</p><blockquote><p>设备像素 = 物理像素 / 设备独立像素</p></blockquote><ul><li>在JavaScript中，可以通过<code>window.devicePiexlRatio</code>获取当前设备的dpr。</li><li>在css中，可以通过<code>-webkit-device-piexl-ratio</code>、<code>-webkit-min-device-piexl-ratio</code>、<code>-webkit-max-device-piexl-ratio</code>进行媒体查询。</li></ul><h3 id="常见终端设备参数"><a href="#常见终端设备参数" class="headerlink" title="常见终端设备参数"></a>常见终端设备参数</h3><p><img src="https://hexo-blog-1256208212.cos.ap-beijing.myqcloud.com/1521689499823.jpg" alt="常见设备终端"><br><a href="https://design.google.com/devices/" target="_blank" rel="noopener">终端设备的参数</a></p><h3 id="UI设计与前端开发适配的协作"><a href="#UI设计与前端开发适配的协作" class="headerlink" title="UI设计与前端开发适配的协作"></a>UI设计与前端开发适配的协作</h3><p>选择一种尺寸作为设计和开发的基准，定义其余尺寸的适配规则，对于特殊适配给出设计效果</p><p>淘宝手淘团队适配协作模式<br><img src="https://hexo-blog-1256208212.cos.ap-beijing.myqcloud.com/taobaotuanduishipei.jpeg" alt="淘宝手淘团队适配协作模式"></p><p>视觉稿</p><p>在开发之前，UI设计师提供含有标注的PSD文件，为视觉稿。<br>对于移动端而言，为了做到页面高清的效果，视觉稿会遵循以下两点：</p><ol><li>选取一款手机的<code>屏幕宽度</code>最为基准，<code>iphone6（375pt * 667pt）</code></li><li>对于retina屏幕（如<code>dpr = 2</code>）,为了达到高清的效果，视觉稿的画布大小会是<code>基准</code>的<code>2倍</code>，也就是说像素点个数是原来的4倍。</li></ol><blockquote><p>iphone6：<br><code>dpr</code>：2<br><code>设备独立像素</code>：375pt * 667pt (设备宽度为375pt，设备高度667pt)<br><code>物理像素</code>：750pt * 1334pt</p></blockquote><p><em>视觉稿按照设备独立像素设计，放大两倍</em><br>UI设计师常选择iPhone6作为基准设计尺寸，交付给前端的设计尺寸是按<code>750px * 1334px</code>为准(高度会随着内容多少而改变)。前端开发人员通过一套适配规则自动适配到其他的尺寸。</p><p><strong>位图像素</strong><br>一个位图像素是栅格图像最小的数据单元，如png、jpg、gif等。每一个位图像素都包含着一些自身的显示信息，包括显示位置、颜色值、透明度等</p><p>理论上，<strong>一个位图像素对应一个物理像素</strong>，图片才能得到完美清晰的展示。<br>在Retina屏幕下，<strong>一个位图像素对应4个物理像素</strong>。由于单个位图像素不可以在分割，所以只能就近取色，就会出现位图像素点不够，从而导致图片模糊。</p><h3 id="rem单位"><a href="#rem单位" class="headerlink" title="rem单位"></a>rem单位</h3><blockquote><p>font size of the root element.</p></blockquote><p><code>rem</code>就是相对于根元素<code>&lt;html&gt;</code>的<code>font-size</code>来做计算。而我们的方案中使用rem单位，是能轻易的根据<html>的<code>font-size</code>计算出元素的盒模型大小。</html></p><p><code>em</code>是根据父元素的<code>font-size</code>计算。</p><h3 id="flexible的实质"><a href="#flexible的实质" class="headerlink" title="flexible的实质"></a>flexible的实质</h3><blockquote><p><code>flexible</code>实际上就是通过JS来动态改写meta标签</p></blockquote><pre class=" language-HTML"><code class="language-HTML"><meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"></code></pre><p>源代码：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> meta <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'meta'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> scale <span class="token operator">=</span> isRetina <span class="token operator">?</span> <span class="token number">0.5</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>meta<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'viewport'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>meta<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'content'</span><span class="token punctuation">,</span> <span class="token string">'initial-scale='</span> <span class="token operator">+</span> scale <span class="token operator">+</span> <span class="token string">' ,maximun-scale='</span> <span class="token operator">+</span> scale <span class="token operator">+</span> <span class="token string">' ,minimum-scale='</span> <span class="token operator">+</span> scale <span class="token operator">+</span> <span class="token string">' ,user-scalable=no, width=device-width'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>doucmentElement<span class="token punctuation">.</span>firstElementChild<span class="token punctuation">)</span> <span class="token punctuation">{</span>  document<span class="token punctuation">.</span>doucmentElement<span class="token punctuation">.</span>firstElementChild<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>meta<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> wrap <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  wrap<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>meta<span class="token punctuation">)</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>wrap<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>动态改写<code>&lt;meta&gt;</code>标签</li><li><code>html</code>标签上加上<code>data-dpr</code>属性，并且动态改写<code>data-dpr</code>的值。</li><li><code>html</code>标签上加上<code>font-size</code>属性，并且动态改写<code>font-size</code>的值。</li></ul><p><code>&lt;meta&gt;</code>中<code>initial-dpr</code>会把<code>dpr</code>强制设置为给定的值。如果手动设置了<code>dpr</code>之后，不管设备是多少<code>dpr</code>，都会强制设置其<code>dpr</code>为你设置的值。不建议设置这个<code>meta</code>标签值(<code>initial-dpr</code>)，因为在<code>flexible</code>中，只有对<code>iOS</code>设备进行<code>dpr</code>的判断，对于<code>Android</code>系列，始终认为其<code>dpr</code>为<strong>1</strong></p><h2 id="px和rem转换"><a href="#px和rem转换" class="headerlink" title="px和rem转换"></a>px和rem转换</h2><p>目前Flexible会将设计稿分成100份，为了更好的兼容vw和vh，同时1rem单位被认定为10a。</p><pre><code>width为750px设计稿750px = 100vw = 100a1rem = 10a1rem = 75px</code></pre><p>我们设计稿都是750px宽度，分成10份，每份为10a（10vw），也就是整个宽度为10rem，所以html对应的font-size为75px。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://www.quirksmode.org/mobile/viewports.html" target="_blank" rel="noopener">A tale of two viewports - Part One</a></li><li><a href="https://www.quirksmode.org/mobile/viewports2.html" target="_blank" rel="noopener">A tale of two viewports - Part Two</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;视窗（viewport）&quot;&gt;&lt;a href=&quot;#视窗（viewport）&quot; class=&quot;headerlink&quot; title=&quot;视窗（viewport）&quot;&gt;&lt;/a&gt;视窗（viewport）&lt;/h3&gt;&lt;p&gt;简单理解&lt;code&gt;viewport&lt;/code&gt;就是浏览器窗口大小。在桌面浏览器中，viewport就是浏览器窗口的高度和宽度。在移动设备中，由于移动端的viewport太窄，为了更好为CSS布局服务，所以提供了两个viewport。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;虚拟viewport&lt;/code&gt; ： &lt;code&gt;visual viewport&lt;/code&gt;&lt;br&gt;&lt;code&gt;布局viewport&lt;/code&gt; ： &lt;code&gt;layout viewport&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;物理像素-physical-pixel&quot;&gt;&lt;a href=&quot;#物理像素-physical-pixel&quot; class=&quot;headerlink&quot; title=&quot;物理像素 physical pixel&quot;&gt;&lt;/a&gt;物理像素 physical pixel&lt;/h3&gt;&lt;p&gt;物理像素也被称为设备像素，他是显示设备中一个最小的物理设备，物理像素单位。每个像素可以根据操作系统设置自己的颜色和亮度。&lt;/p&gt;
    
    </summary>
    
      <category term="Web H5" scheme="http://wangytbest.github.io/categories/Web-H5/"/>
    
    
  </entry>
  
  <entry>
    <title>JS控制GIF动画</title>
    <link href="http://wangytbest.github.io/2018/02/02/js-contro-gif-md/"/>
    <id>http://wangytbest.github.io/2018/02/02/js-contro-gif-md/</id>
    <published>2018-02-02T02:14:25.000Z</published>
    <updated>2019-04-09T07:03:14.797Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>JS控制Gif动画</p></blockquote><p>思想： 使用canvas获取Gif第一帧图片，静止的时候使用图片，播放的时候使用Gif。<br><a id="more"></a></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'getContext'</span> <span class="token keyword">in</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    HTMLImageElement<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>play <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>storeCanvas<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 移除存储的canvas</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>storeCanvas<span class="token punctuation">.</span>parentElement<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>storeCanvas<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>storeCanvas <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 透明度还原c</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>opacity <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>storeUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storeUrl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    HTMLImageElement<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>stop <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// polyfill 提供了这个方法用来获取设备的 pixel ratio</span>        <span class="token keyword">let</span> getPixelRatio <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> backingStore <span class="token operator">=</span> context<span class="token punctuation">.</span>backingStorePixelRatio <span class="token operator">||</span>                context<span class="token punctuation">.</span>webkitBackingStorePixelRatio <span class="token operator">||</span>                context<span class="token punctuation">.</span>mozBackingStorePixelRatio <span class="token operator">||</span>                context<span class="token punctuation">.</span>msBackingStorePixelRatio <span class="token operator">||</span>                context<span class="token punctuation">.</span>oBackingStorePixelRatio <span class="token operator">||</span>                context<span class="token punctuation">.</span>backingStorePixelRatio <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>devicePixelRatio <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> backingStore<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> ratio <span class="token operator">=</span> <span class="token function">getPixelRatio</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 尺寸</span>        <span class="token keyword">let</span> width <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>width<span class="token punctuation">;</span>        <span class="token keyword">let</span> height <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>height<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>width <span class="token operator">&amp;&amp;</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 存储之前的地址</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>storeUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>storeUrl <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>src<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// canvas大小</span>            canvas<span class="token punctuation">.</span>width <span class="token operator">=</span> width <span class="token operator">*</span> ratio<span class="token punctuation">;</span>            canvas<span class="token punctuation">.</span>height <span class="token operator">=</span> height <span class="token operator">*</span> ratio<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 绘制图片帧（第一帧）</span>            <span class="token comment" spellcheck="true">// 注意，这里的 width 和 height 变成了 width * ratio 和 height * ratio</span>            canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> width <span class="token operator">*</span> ratio<span class="token punctuation">,</span> height <span class="token operator">*</span> ratio<span class="token punctuation">)</span><span class="token punctuation">;</span>            canvas<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>            canvas<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 重置当前图片</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>src <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">toDataURL</span><span class="token punctuation">(</span><span class="token string">'image/gif'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 跨域</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 载入canvas元素</span>                canvas<span class="token punctuation">.</span>style<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token string">'absolute'</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 前面插入图片</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>parentElement<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>canvas<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 隐藏原图</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>opacity <span class="token operator">=</span> <span class="token string">'0'</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 存储canvas</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>storeCanvas <span class="token operator">=</span> canvas<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;JS控制Gif动画&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;思想： 使用canvas获取Gif第一帧图片，静止的时候使用图片，播放的时候使用Gif。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://wangytbest.github.io/categories/Javascript/"/>
    
      <category term="util" scheme="http://wangytbest.github.io/categories/Javascript/util/"/>
    
    
  </entry>
  
  <entry>
    <title>css控制文本内容溢出截断</title>
    <link href="http://wangytbest.github.io/2017/10/19/css-text-overflow/"/>
    <id>http://wangytbest.github.io/2017/10/19/css-text-overflow/</id>
    <published>2017-10-19T02:39:12.000Z</published>
    <updated>2019-04-09T07:06:02.422Z</updated>
    
    <content type="html"><![CDATA[<p>css控制文字内容的溢出显示，溢出截断后末尾出现省略<code>...</code>，单行文本与多行文本的控制又有区别。<br><a id="more"></a><br><strong>单行文本</strong></p><pre class=" language-css"><code class="language-css"><span class="token property">overfolw</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span><span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span></code></pre><p><strong>多行文本</strong></p><pre class=" language-css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span>-webkit-box<span class="token punctuation">;</span><span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span> vertical<span class="token punctuation">;</span><span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span></code></pre><p><strong>知识点</strong></p><p><code>text-overflow</code> 确定内容的溢出显示，可以被剪切(<code>clip</code>)、显示一个省略号（<code>...</code>）或者显示一个自定义字符串。</p><blockquote><ul><li>需要设置<code>overflow: hidden</code>属性才能生效，否则不会强制溢出事件发生。</li><li>属性只对<strong>块级元素</strong>溢出的内容有效，但必须与块级元素内联（<code>inline</code>）方向一致。如内容在盒子下方溢出，则属性不会生效。</li><li>文本溢出：1、文本无法换行，设置了<code>white-space: nowrap;</code>。2、单词太长。 </li></ul></blockquote><pre class=" language-css"><code class="language-css"><span class="token selector">text-overflow: <span class="token attribute">[ clip | ellipise | &lt;string> ]</span></span><span class="token punctuation">{</span><span class="token number">1</span>, <span class="token number">2</span><span class="token punctuation">}</span></code></pre><blockquote><ol><li><code>clip</code>: 内容区域的极限处截断文本，因此可能在字符的中间可能会发生截断。<strong>为了能够在两个字符过度处截断，必须使用一个空字符串值（<code></code>）</strong>。</li><li><code>ellipse</code>: 用省略号<code>...</code>来表示截断的文本。如果空间太小连省略号也不能显示，那么省略号也会被截断。</li><li><code>&lt;string&gt;</code>: <code>&lt;string&gt;</code>用来表示被截断的文本。字符串内容将被添加在内容区域中，所以会减少显示出的文本。如果空间太小到连省略号的容纳下，那么这个字符串也会被截断。</li></ol></blockquote><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* Overflow behavior at line endRight end if ltr, left end if rtl */</span><span class="token property">text-overflow</span><span class="token punctuation">:</span> clip<span class="token punctuation">;</span><span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span><span class="token property">text-overflow</span><span class="token punctuation">:</span> <span class="token string">"…"</span><span class="token punctuation">;</span><span class="token property">text-overflow</span><span class="token punctuation">:</span> fade<span class="token punctuation">;</span><span class="token property">text-overflow</span><span class="token punctuation">:</span> <span class="token function">fade</span><span class="token punctuation">(</span><span class="token number">10</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">text-overflow</span><span class="token punctuation">:</span> <span class="token function">fade</span><span class="token punctuation">(</span><span class="token number">5%</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* Overflow behavior at left end | at right endDirectionality has no influence */</span><span class="token property">text-overflow</span><span class="token punctuation">:</span> clip ellipsis<span class="token punctuation">;</span><span class="token property">text-overflow</span><span class="token punctuation">:</span> <span class="token string">"…"</span> <span class="token string">"…"</span><span class="token punctuation">;</span><span class="token property">text-overflow</span><span class="token punctuation">:</span> fade clip<span class="token punctuation">;</span><span class="token property">text-overflow</span><span class="token punctuation">:</span> <span class="token function">fade</span><span class="token punctuation">(</span><span class="token number">10</span>px<span class="token punctuation">)</span> <span class="token function">fade</span><span class="token punctuation">(</span><span class="token number">10</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">text-overflow</span><span class="token punctuation">:</span> <span class="token function">fade</span><span class="token punctuation">(</span><span class="token number">5%</span><span class="token punctuation">)</span> <span class="token function">fade</span><span class="token punctuation">(</span><span class="token number">5%</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* Global values */</span><span class="token property">text-overflow</span><span class="token punctuation">:</span> inherit<span class="token punctuation">;</span><span class="token property">text-overflow</span><span class="token punctuation">:</span> initial<span class="token punctuation">;</span><span class="token property">text-overflow</span><span class="token punctuation">:</span> unset<span class="token punctuation">;</span></code></pre><style type="text/css">    div br{        display: none;    }</style><div><br>    <table><br>        <thead><br>            <tr><br>                <th colspan="1" rowspan="2" scope="col">CSS value</th><br>                <th colspan="2" rowspan="1" scope="col"><code>direction: ltr</code></th><br>                <th colspan="2" rowspan="1" scope="col"><code>direction: rtl</code></th><br>            </tr><br>            <tr><br>                <th scope="col">Expected Result</th><br>                <th scope="col">Live result</th><br>                <th scope="col">Expected Result</th><br>                <th scope="col">Live result</th><br>            </tr><br>        </thead><br>        <tbody><br>            <tr><br>                <td><em>visible overflow</em></td><br>                <td>1234567890</td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>                <td>0987654321</td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>            </tr><br>            <tr><br>                <td><code>text-overflow: clip</code></td><br>                <td><img src="https://developer.mozilla.org/@api/deki/files/6056/=t-o_clip.png" alt="t-o_clip.png"></td><br>                <td><br>                    <p>123456</p><br>                </td><br>                <td><img src="https://developer.mozilla.org/@api/deki/files/6057/=t-o_clip_rtl.png" alt="t-o_clip_rtl.png"></td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>            </tr><br>            <tr><br>                <td><code>text-overflow: ‘’</code></td><br>                <td>12345</td><br>                <td><br>                    <p>123456</p><br>                </td><br>                <td>54321</td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>            </tr><br>            <tr><br>                <td><code>text-overflow: ellipsis</code></td><br>                <td>1234…</td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>                <td>…4321</td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>            </tr><br>            <tr><br>                <td><code>text-overflow: ‘.’</code></td><br>                <td>1234.</td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>                <td>.4321</td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>            </tr><br>            <tr><br>                <td><code>text-overflow: clip clip</code></td><br>                <td>123456</td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>                <td>654321</td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>            </tr><br>            <tr><br>                <td><code>text-overflow: clip ellipsis</code></td><br>                <td>1234…</td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>                <td>6543…</td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>            </tr><br>            <tr><br>                <td><code>text-overflow: clip ‘.’</code></td><br>                <td>1234.</td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>                <td>6543.</td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>            </tr><br>            <tr><br>                <td><code>text-overflow: ellipsis clip</code></td><br>                <td>…3456</td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>                <td>…4321</td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>            </tr><br>            <tr><br>                <td><code>text-overflow: ellipsis ellipsis</code></td><br>                <td>…34…</td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>                <td>…43…</td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>            </tr><br>            <tr><br>                <td><code>text-overflow: ellipsis ‘.’</code></td><br>                <td>…34.</td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>                <td>…43.</td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>            </tr><br>            <tr><br>                <td><code>text-overflow: ‘,’ clip</code></td><br>                <td>,3456</td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>                <td>,4321</td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>            </tr><br>            <tr><br>                <td><code>text-overflow: ‘,’ ellipsis</code></td><br>                <td>,34…</td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>                <td>,43…</td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>            </tr><br>            <tr><br>                <td><code>text-overflow: ‘,’ ‘.’</code></td><br>                <td>,34.</td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>                <td>,53.</td><br>                <td><br>                    <p>1234567890</p><br>                </td><br>            </tr><br>        </tbody><br>    </table><br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;css控制文字内容的溢出显示，溢出截断后末尾出现省略&lt;code&gt;...&lt;/code&gt;，单行文本与多行文本的控制又有区别。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://wangytbest.github.io/categories/CSS/"/>
    
    
      <category term="css" scheme="http://wangytbest.github.io/tags/css/"/>
    
      <category term="text-overflow" scheme="http://wangytbest.github.io/tags/text-overflow/"/>
    
  </entry>
  
  <entry>
    <title>css文字两端对齐</title>
    <link href="http://wangytbest.github.io/2017/10/16/css-text-align-justify/"/>
    <id>http://wangytbest.github.io/2017/10/16/css-text-align-justify/</id>
    <published>2017-10-16T06:37:17.000Z</published>
    <updated>2019-04-09T07:06:33.557Z</updated>
    
    <content type="html"><![CDATA[<p>文本内容可以实现左对齐、右对齐以及居中对齐，如何实现两端对齐？很多时候为了对齐文字中间使用空格来隔开，这样每个内容需要计算空格个数，当内容不一样长短的时候又通过JS进行麻烦的计算。</p><p><code>text-align</code>是控制文字的对齐与显示，从其属性名上就可以看出来。从其渲染与解析上来看，其主要是用来控制<code>inline</code>水平元素或<code>inline-block</code>元素的对齐与显示的，例如嵌套行内标签的文字、图片、input表单控件等；而对block水平的元素是没有作用的。</p><pre class=" language-css"><code class="language-css"><span class="token property">text-align</span><span class="token punctuation">:</span> center | left | right | start | end | justify | inherit | initial | unset<span class="token property">text-align</span><span class="token punctuation">:</span> justify</code></pre><p>css2中<code>text-align</code>有一个属性为<code>justify</code>，居中对齐。其实现的效果就是可以让一行文字两端对齐显示（文字内容要超过一行）<br><a id="more"></a></p><ul><li>有多行文字<blockquote><p>多行文字内容时直接使用<code>justify</code>可以实现两端对齐效果</p></blockquote></li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Vue.js (读音 /vjuː/，类似于 view) 是一套构建用户界面的渐进式框架。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。Vue 的核心库只关注视图层，它不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与单文件组件和 Vue 生态系统支持的库结合使用时，Vue 也完全能够为复杂的单页应用程序提供驱动。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector">div </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#000</span><span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> justify<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>只有一行文字</li></ul><blockquote><p>需要在文字后面加一个占位元素，可以使用伪类元素实现，或者加<code>&lt;span&gt;&lt;/span&gt;</code>、<code>&lt;i&gt;&lt;/i&gt;</code>空元素。</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>css文字两端对齐！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector">div </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#000</span><span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> justify<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>此时的效果并没有实现两端对齐，因为文字内容没有换行。可以使用伪类元素实现。</p><pre class=" language-css"><code class="language-css"><span class="token selector">div </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#000</span><span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> justify<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div<span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>       <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文本内容可以实现左对齐、右对齐以及居中对齐，如何实现两端对齐？很多时候为了对齐文字中间使用空格来隔开，这样每个内容需要计算空格个数，当内容不一样长短的时候又通过JS进行麻烦的计算。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;text-align&lt;/code&gt;是控制文字的对齐与显示，从其属性名上就可以看出来。从其渲染与解析上来看，其主要是用来控制&lt;code&gt;inline&lt;/code&gt;水平元素或&lt;code&gt;inline-block&lt;/code&gt;元素的对齐与显示的，例如嵌套行内标签的文字、图片、input表单控件等；而对block水平的元素是没有作用的。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;text-align: center | left | right | start | end | justify | inherit | initial | unset
text-align: justify
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;css2中&lt;code&gt;text-align&lt;/code&gt;有一个属性为&lt;code&gt;justify&lt;/code&gt;，居中对齐。其实现的效果就是可以让一行文字两端对齐显示（文字内容要超过一行）&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://wangytbest.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://wangytbest.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>git基础</title>
    <link href="http://wangytbest.github.io/2017/10/13/github-project-init/"/>
    <id>http://wangytbest.github.io/2017/10/13/github-project-init/</id>
    <published>2017-10-13T08:07:26.000Z</published>
    <updated>2019-04-09T07:04:41.246Z</updated>
    
    <content type="html"><![CDATA[<p>github上创建新的项目后，在本地拉取项目或者将本地的项目关联到建立的仓库。</p><pre class=" language-shell"><code class="language-shell"># git clone git@github.com:xxxxxxxxx.git  </code></pre><a id="more"></a><h2 id="命令行新建一个新的仓库"><a href="#命令行新建一个新的仓库" class="headerlink" title="命令行新建一个新的仓库"></a>命令行新建一个新的仓库</h2><pre class=" language-shell"><code class="language-shell"># mkdir myProject# cd myProject # echo '# my new project' >> README.md# git init# git add .# git commit -m "first commit"# git remote add origin git@github.com:xxxxxxxxx.git# git push origin master</code></pre><h2 id="本地项目关联远程git仓库"><a href="#本地项目关联远程git仓库" class="headerlink" title="本地项目关联远程git仓库"></a>本地项目关联远程git仓库</h2><pre class=" language-shell"><code class="language-shell"># cd myProject# git remote add origin git@github.com:xxxxx/xxxx/git# git push origin master</code></pre><h1 id="本地分支关联远程分支"><a href="#本地分支关联远程分支" class="headerlink" title="本地分支关联远程分支"></a>本地分支关联远程分支</h1><pre class=" language-shell"><code class="language-shell"># git checkout test# git remote add origin git@github.com:xxxx/test.git</code></pre><h2 id="fatal"><a href="#fatal" class="headerlink" title="fatal"></a>fatal</h2><p>首次拉取代码失败</p><blockquote><p>git pull错误信息 : </p><pre class=" language-shell"><code class="language-shell"> * branch       master     -> FETCH_HEAD fatal: refusing to merge unrelated histories</code></pre></blockquote><p>解决：</p><pre class=" language-shell"><code class="language-shell"># git pull origin master --allow-unrelated-histories</code></pre><h2 id="首次安装git设置"><a href="#首次安装git设置" class="headerlink" title="首次安装git设置"></a>首次安装git设置</h2><pre class=" language-shell"><code class="language-shell"># git config -global user.nme "xxxxxx"# git config -global user.email "xxxxxx@jd.com"</code></pre><h1 id="公钥密钥配置"><a href="#公钥密钥配置" class="headerlink" title="公钥密钥配置"></a>公钥密钥配置</h1><pre class=" language-shell"><code class="language-shell"># ssh-keygen -t rsa</code></pre><p>会生成两个文件：<code>id_rsa</code>（密钥）和<code>id_rsa.pub</code>（公钥）<br>在github中设置公钥。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;github上创建新的项目后，在本地拉取项目或者将本地的项目关联到建立的仓库。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;shell&quot;&gt;# git clone git@github.com:xxxxxxxxx.git  
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Git" scheme="http://wangytbest.github.io/categories/Git/"/>
    
    
      <category term="git" scheme="http://wangytbest.github.io/tags/git/"/>
    
      <category term="github" scheme="http://wangytbest.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>SVG基础入门</title>
    <link href="http://wangytbest.github.io/2017/09/27/css-svg-basic/"/>
    <id>http://wangytbest.github.io/2017/09/27/css-svg-basic/</id>
    <published>2017-09-27T03:37:17.000Z</published>
    <updated>2019-04-09T07:06:56.801Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>可缩放矢量图形，即SVG，是W3C XML的分枝语言之一，用于标记可缩放的矢量图形。（摘自MDN）</p></blockquote><ul><li><code>version</code>： 表示<code>&lt;svg&gt;</code>的版本</li><li><code>xmlns</code>：<a href="http://www.w3.org/2000/svg" target="_blank" rel="noopener">http://www.w3.org/2000/svg</a> 固定值</li><li><code>xmlns:xlink</code>：<a href="http://www.w3.org/1999/xlink" target="_blank" rel="noopener">http://www.w3.org/1999/xlink</a> 固定值</li><li><code>xml:space</code>：preserve 固定值，上述三个值固定，表示命名空间，当数据单独存在svg文件内时，这3个值不能省略</li><li><code>class</code>: class类名</li><li><code>width | height</code>： 定义 <code>svg</code> 画布的大小</li><li><code>viewbox</code>： 定义了画布上可以显示的区域，当 <code>viewBox</code> 的大小和 <code>svg</code> <code>不同时，viewBox</code> 在屏幕上的显示会缩放至 <code>svg</code> 同等大小。</li></ul><a id="more"></a><p>有了 <code>svg</code> 标签，我们就可以愉快的在内部添加 <code>SVG</code> 图形了。</p><pre class=" language-html"><code class="language-html"><span class="token prolog">&lt;?xml version="1.0" standalone="no"?></span><span class="token doctype">&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.1<span class="token punctuation">"</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2000/svg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>circle</span> <span class="token attr-name">cx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">cy</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span> <span class="token attr-name">r</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>40<span class="token punctuation">"</span></span> <span class="token attr-name">stroke</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>black<span class="token punctuation">"</span></span> <span class="token attr-name">stroke-width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span></code></pre><svg width="100%" height="100%" version="1.1" xmlns="http://www.w3.org/2000/svg"><br/>    <circle cx="100" cy="50" r="40" stroke="black" stroke-width="2" fill="red"/><br/></svg><blockquote><ul><li>第一行包含了 XML 声明。standalone 属性规定此 SVG 文件是否是“独立的”，或含有对外部文件的引用。standalone=”no” 意味着 SVG 文档会引用一个外部文件。</li><li>SVG 代码以 <code>&lt;svg&gt;</code>元素开始，包括开启标签 <code>&lt;svg&gt;</code> 和关闭标签<code>&lt;/svg&gt;</code> 。<code>width</code> 和 <code>height</code> 属性可设置此 SVG 文档的宽度和高度。<code>version</code>属性可定义所使用的 <code>SVG</code> 版本，<code>xmlns</code> 属性可定义 SVG 命名空间。</li></ul></blockquote><p><img src="http://cloud.xuww.wang/svg.jpg" alt="SVG"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;可缩放矢量图形，即SVG，是W3C XML的分枝语言之一，用于标记可缩放的矢量图形。（摘自MDN）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;version&lt;/code&gt;： 表示&lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt;的版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xmlns&lt;/code&gt;：&lt;a href=&quot;http://www.w3.org/2000/svg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.w3.org/2000/svg&lt;/a&gt; 固定值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xmlns:xlink&lt;/code&gt;：&lt;a href=&quot;http://www.w3.org/1999/xlink&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.w3.org/1999/xlink&lt;/a&gt; 固定值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xml:space&lt;/code&gt;：preserve 固定值，上述三个值固定，表示命名空间，当数据单独存在svg文件内时，这3个值不能省略&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class&lt;/code&gt;: class类名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;width | height&lt;/code&gt;： 定义 &lt;code&gt;svg&lt;/code&gt; 画布的大小&lt;/li&gt;
&lt;li&gt;&lt;code&gt;viewbox&lt;/code&gt;： 定义了画布上可以显示的区域，当 &lt;code&gt;viewBox&lt;/code&gt; 的大小和 &lt;code&gt;svg&lt;/code&gt; &lt;code&gt;不同时，viewBox&lt;/code&gt; 在屏幕上的显示会缩放至 &lt;code&gt;svg&lt;/code&gt; 同等大小。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://wangytbest.github.io/categories/CSS/"/>
    
      <category term="SVG" scheme="http://wangytbest.github.io/categories/CSS/SVG/"/>
    
    
      <category term="css" scheme="http://wangytbest.github.io/tags/css/"/>
    
      <category term="SVG" scheme="http://wangytbest.github.io/tags/SVG/"/>
    
  </entry>
  
</feed>
