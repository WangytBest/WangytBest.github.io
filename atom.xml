<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>王小贱</title>
  
  <subtitle>Write the Code Change the World.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wangytbest.github.io/"/>
  <updated>2019-05-08T04:05:51.816Z</updated>
  <id>http://wangytbest.github.io/</id>
  
  <author>
    <name>Wangyutao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>移动端1像素边框解决方法</title>
    <link href="http://wangytbest.github.io/2019/05/08/%E7%A7%BB%E5%8A%A8%E7%AB%AF1%E5%83%8F%E7%B4%A0%E8%BE%B9%E6%A1%86%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://wangytbest.github.io/2019/05/08/移动端1像素边框解决方法/</id>
    <published>2019-05-08T03:33:12.000Z</published>
    <updated>2019-05-08T04:05:51.816Z</updated>
    
    <content type="html"><![CDATA[<h3 id="移动端1像素边框解决方法"><a href="#移动端1像素边框解决方法" class="headerlink" title="移动端1像素边框解决方法"></a>移动端1像素边框解决方法</h3><p>移动端 css 中明明就定义的 1px，但是浏览器打开实际看起来要比设计稿中的 1px 粗？<br>因为 css 中的 1px 并不等于移动设备的 1px，由于不同的手机有不同的像素密度，如 retain屏 。</p><a id="more"></a><blockquote><p> devicePixelRatio 设备物理像素和设备独立像素的比列，</p><ul><li>devicePixelRatio = 设备物理像素 / 设备独立像素</li><li>window.devicePixelRatio</li></ul></blockquote><ul><li><a href="https://www.zhangxinxu.com/wordpress/2012/08/window-devicepixelratio/" target="_blank" rel="noopener">设备像素比devicePixelRatio简单介绍</a></li></ul><p>解决方案</p><ol><li>伪类 + transform</li></ol><p>不直接设置元素的 border ，利用伪类 <code>:before</code> 或者 <code>:after</code> 模拟 1px 的边框，并将 transform 的 scale 缩小一般。</p><p>缺点： 占用伪类</p><figure class="highlight scss hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1px</span></span><br><span class="line">@<span class="hljs-keyword">mixin</span> one-left(<span class="hljs-variable">$color</span>:<span class="hljs-number">#E3E5E9</span>, <span class="hljs-variable">$type</span>:solid) &#123;</span><br><span class="line">  &amp;:before &#123;</span><br><span class="line">    <span class="hljs-attribute">content</span>: <span class="hljs-string">" "</span>;</span><br><span class="line">    <span class="hljs-attribute">position</span>: absolute;</span><br><span class="line">    <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-attribute">width</span>: <span class="hljs-number">1px</span>;</span><br><span class="line">    <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-attribute">border-left</span>: <span class="hljs-number">1px</span> <span class="hljs-variable">$type</span> <span class="hljs-variable">$color</span>;</span><br><span class="line">    <span class="hljs-attribute">color</span>: <span class="hljs-variable">$color</span>;</span><br><span class="line">    <span class="hljs-attribute">transform-origin</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-attribute">transform</span>: scaleX(<span class="hljs-number">0.5</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="hljs-keyword">mixin</span> one-right(<span class="hljs-variable">$color</span>:<span class="hljs-number">#E3E5E9</span>, <span class="hljs-variable">$type</span>:solid) &#123;</span><br><span class="line">  &amp;:after &#123;</span><br><span class="line">    <span class="hljs-attribute">content</span>: <span class="hljs-string">" "</span>;</span><br><span class="line">    <span class="hljs-attribute">position</span>: absolute;</span><br><span class="line">    <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-attribute">width</span>: <span class="hljs-number">1px</span>;</span><br><span class="line">    <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-attribute">border-right</span>: <span class="hljs-number">1px</span> <span class="hljs-variable">$type</span> <span class="hljs-variable">$color</span>;</span><br><span class="line">    <span class="hljs-attribute">color</span>: <span class="hljs-variable">$color</span>;</span><br><span class="line">    <span class="hljs-attribute">transform-origin</span>: <span class="hljs-number">100%</span> <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-attribute">transform</span>: scaleX(<span class="hljs-number">0.5</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="hljs-keyword">mixin</span> one-top(<span class="hljs-variable">$color</span>:<span class="hljs-number">#E3E5E9</span>, <span class="hljs-variable">$type</span>:solid) &#123;</span><br><span class="line">  &amp;:before &#123;</span><br><span class="line">    <span class="hljs-attribute">content</span>: <span class="hljs-string">" "</span>;</span><br><span class="line">    <span class="hljs-attribute">position</span>: absolute;</span><br><span class="line">    <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-attribute">top</span>: -<span class="hljs-number">1px</span>;</span><br><span class="line">    <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-attribute">height</span>: <span class="hljs-number">1px</span>;</span><br><span class="line">    <span class="hljs-attribute">border-top</span>: <span class="hljs-number">1px</span> <span class="hljs-variable">$type</span> <span class="hljs-variable">$color</span>;</span><br><span class="line">    <span class="hljs-attribute">color</span>: <span class="hljs-variable">$color</span>;</span><br><span class="line">    <span class="hljs-attribute">transform-origin</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-attribute">transform</span>: scaleY(<span class="hljs-number">0.5</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="hljs-keyword">mixin</span> one-bottom(<span class="hljs-variable">$color</span>:<span class="hljs-number">#E3E5E9</span>, <span class="hljs-variable">$type</span>:solid) &#123;</span><br><span class="line">  &amp;:after &#123;</span><br><span class="line">    <span class="hljs-attribute">content</span>: <span class="hljs-string">" "</span>;</span><br><span class="line">    <span class="hljs-attribute">position</span>: absolute;</span><br><span class="line">    <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-attribute">height</span>: <span class="hljs-number">1px</span>;</span><br><span class="line">    <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> <span class="hljs-variable">$type</span> <span class="hljs-variable">$color</span>;</span><br><span class="line">    <span class="hljs-attribute">color</span>: <span class="hljs-variable">$color</span>;</span><br><span class="line">    <span class="hljs-attribute">transform-origin</span>: <span class="hljs-number">0</span> <span class="hljs-number">100%</span>;</span><br><span class="line">    <span class="hljs-attribute">transform</span>: scaleY(<span class="hljs-number">0.5</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="hljs-keyword">mixin</span> one-border(<span class="hljs-variable">$color</span>:<span class="hljs-number">#E3E5E9</span>, <span class="hljs-variable">$type</span>:solid, <span class="hljs-variable">$radius</span>:<span class="hljs-number">0</span>) &#123;</span><br><span class="line">  &amp;:after &#123;</span><br><span class="line">    <span class="hljs-attribute">content</span>: <span class="hljs-string">''</span>;</span><br><span class="line">    <span class="hljs-attribute">position</span>: absolute;</span><br><span class="line">    <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;</span><br><span class="line">    <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;</span><br><span class="line">    <span class="hljs-attribute">width</span>: <span class="hljs-number">200%</span>;</span><br><span class="line">    <span class="hljs-attribute">height</span>: <span class="hljs-number">200%</span>;</span><br><span class="line">    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> <span class="hljs-variable">$type</span> <span class="hljs-variable">$color</span>;</span><br><span class="line">    <span class="hljs-attribute">border-radius</span>: <span class="hljs-variable">$radius</span>;</span><br><span class="line">    <span class="hljs-attribute">transform</span>: translate(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>) scale(.<span class="hljs-number">5</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>box-shadow 模拟边框</li></ol><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.box</span> &#123;</span><br><span class="line">  <span class="hljs-comment">/* 插页(阴影向内) | x偏移量 | y偏移量 | 阴影模糊半径 | 阴影扩散半径 | 阴影颜色 */</span></span><br><span class="line">  <span class="hljs-attribute">box-shadow</span>: inset <span class="hljs-number">0</span> -<span class="hljs-number">1px</span> <span class="hljs-number">1px</span> -<span class="hljs-number">1px</span> black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;移动端1像素边框解决方法&quot;&gt;&lt;a href=&quot;#移动端1像素边框解决方法&quot; class=&quot;headerlink&quot; title=&quot;移动端1像素边框解决方法&quot;&gt;&lt;/a&gt;移动端1像素边框解决方法&lt;/h3&gt;&lt;p&gt;移动端 css 中明明就定义的 1px，但是浏览器打开实际看起来要比设计稿中的 1px 粗？&lt;br&gt;因为 css 中的 1px 并不等于移动设备的 1px，由于不同的手机有不同的像素密度，如 retain屏 。&lt;/p&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://wangytbest.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://wangytbest.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>JSBridge浅析</title>
    <link href="http://wangytbest.github.io/2019/04/18/JSBridge%E6%B5%85%E6%9E%90/"/>
    <id>http://wangytbest.github.io/2019/04/18/JSBridge浅析/</id>
    <published>2019-04-18T09:43:01.000Z</published>
    <updated>2019-05-08T04:04:38.996Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JSBridge-浅析"><a href="#JSBridge-浅析" class="headerlink" title="JSBridge 浅析"></a>JSBridge 浅析</h3><p>JSBridge 简单来讲，主要是给 Javascript 提供调用 Native 功能的接口，让 Hybrid 开发的前端人员可以方便的使用 Native 的地理位置、摄像头等原生功能。</p><p>实际上， JSBridge 就像是 Native 和 H5 之间的桥梁，构建 Native 和 非Native 间的双向消息通信的通道。</p><ul><li>JS 向 Native 发送消息：调用相关接口、通知 Native 当前 JS 状态等。</li><li>Native 向 JS 发送消息： 回溯调用结果、消息推送、通知 JS 当前 Native 的状态等。</li></ul><p>解决方案</p><ul><li>基于 Web 的 Hybrid 的解决方案：微信浏览器、各大公司的 Hybrid 方案。</li><li>ReactNative等。</li></ul><a id="more"></a><h3 id="JSBridge-原理"><a href="#JSBridge-原理" class="headerlink" title="JSBridge 原理"></a>JSBridge 原理</h3><p>JS 是运行在一个单独的 JS Context 中。Hybrid 方案是基于 WebView 的，JS 执行在 WebView 的 Webkit 引擎中。</p><p>Javascript 调用 Native 的方式主要有两种： 1. 注入API， 2. 拦截 URL SCHEME。</p><h4 id="注入-API"><a href="#注入-API" class="headerlink" title="注入 API"></a>注入 API</h4><p>注入API 的主要原理是通过 WebView 提供的接口，向 Javascript 的 <code>window对象</code> 中注入对象或者方法，让 Javascript 调用时，直接执行相应的 Native 的代码逻辑。</p><ul><li><p>iOS 的 UIWebView</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">window</span>.postBridgeMessage(message);</span><br></pre></td></tr></table></figure></li><li><p>iOS 的 WKWebView</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">window</span>.webkit.messHandlers.naviteBridge.postMessage(message);</span><br></pre></td></tr></table></figure></li><li><p>Android</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">window</span>.nativeBridge.postMessage(message);</span><br></pre></td></tr></table></figure></li></ul><h4 id="拦截-URL-SCHEME"><a href="#拦截-URL-SCHEME" class="headerlink" title="拦截 URL SCHEME"></a>拦截 URL SCHEME</h4><p>URL SHEME: 为了方便 APP 直接相互调用，形式和普通的 URL 相似， protocol 和 host</p><p>主要流程：一般是通过修改iframe的src来实现，Web 端通过某种方式发送 URL SCHEME 请求，之后 Native 拦截到并根据 URL SCHEME 进行操作。</p><p>缺点</p><ol><li>使用 iframe.src 发送 URL SCHEME 会有 URL 长度的限制</li><li>创建请求耗时</li></ol><h3 id="JSBridge-接口实现"><a href="#JSBridge-接口实现" class="headerlink" title="JSBridge 接口实现"></a>JSBridge 接口实现</h3><p>JSBridge 接口主要实现两个功能： 调用 Native 和 接收 Native 调用。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">var</span> id = <span class="hljs-number">0</span>,</span><br><span class="line">    callbacks = &#123;&#125;,</span><br><span class="line">    registerFuncs = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-built_in">window</span>.JSBridge = &#123;</span><br><span class="line">      <span class="hljs-comment">// 调用 Native</span></span><br><span class="line">      invoke: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">bridgeName, callback, data</span>) </span>&#123;</span><br><span class="line">        <span class="hljs-comment">// 判断环境，获取不同的 nativeBridge</span></span><br><span class="line">        <span class="hljs-keyword">var</span> thisId = id ++; <span class="hljs-comment">// 获取唯一 id</span></span><br><span class="line">        callbacks[thisId] = callback; <span class="hljs-comment">// 存储 Callback</span></span><br><span class="line">        nativeBridge.postMessage(&#123;</span><br><span class="line">          bridgeName: bridgeName,</span><br><span class="line">          data: data || &#123;&#125;,</span><br><span class="line">          callbackId: thisId <span class="hljs-comment">// 传到 Native 端</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">      receiveMessage: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">msg</span>) </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">var</span> bridgeName = msg.bridgeName,</span><br><span class="line">            data = msg.data || &#123;&#125;,</span><br><span class="line">            callbackId = msg.callbackId, <span class="hljs-comment">// Native 将 callbackId 原封不动传回</span></span><br><span class="line">            responstId = msg.responstId;</span><br><span class="line">        <span class="hljs-comment">// 具体逻辑</span></span><br><span class="line">        <span class="hljs-comment">// bridgeName 和 callbackId 不会同时存在</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (callbackId) &#123;</span><br><span class="line">          <span class="hljs-keyword">if</span> (callbacks[callbackId]) &#123; <span class="hljs-comment">// 找到相应句柄</span></span><br><span class="line">            callbacks[callbackId](msg.data); <span class="hljs-comment">// 执行调用</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125; elseif (bridgeName) &#123;</span><br><span class="line">          <span class="hljs-keyword">if</span> (registerFuncs[bridgeName]) &#123; <span class="hljs-comment">// 通过 bridgeName 找到句柄</span></span><br><span class="line">            <span class="hljs-keyword">var</span> ret = &#123;&#125;,</span><br><span class="line">                flag = <span class="hljs-literal">false</span>;</span><br><span class="line">            registerFuncs[bridgeName].forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">callback</span>) =&gt; </span>&#123;</span><br><span class="line">              callback(data, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">r</span>) </span>&#123;</span><br><span class="line">                flag = <span class="hljs-literal">true</span>;</span><br><span class="line">                ret = <span class="hljs-built_in">Object</span>.assign(ret, r);</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="hljs-keyword">if</span> (flag) &#123;</span><br><span class="line">              nativeBridge.postMessage(&#123; <span class="hljs-comment">// 回调 Native</span></span><br><span class="line">                responstId: responstId,</span><br><span class="line">                ret: ret</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      register: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">bridgeName, callback</span>) </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (!registerFuncs[bridgeName])  &#123;</span><br><span class="line">          registerFuncs[bridgeName] = [];</span><br><span class="line">        &#125;</span><br><span class="line">        registerFuncs[bridgeName].push(callback); <span class="hljs-comment">// 存储回调</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p><a href="https://blog.ymfe.org/%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84JSBridge/" target="_blank" rel="noopener">移动混合开发中的 JSBridge</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;JSBridge-浅析&quot;&gt;&lt;a href=&quot;#JSBridge-浅析&quot; class=&quot;headerlink&quot; title=&quot;JSBridge 浅析&quot;&gt;&lt;/a&gt;JSBridge 浅析&lt;/h3&gt;&lt;p&gt;JSBridge 简单来讲，主要是给 Javascript 提供调用 Native 功能的接口，让 Hybrid 开发的前端人员可以方便的使用 Native 的地理位置、摄像头等原生功能。&lt;/p&gt;
&lt;p&gt;实际上， JSBridge 就像是 Native 和 H5 之间的桥梁，构建 Native 和 非Native 间的双向消息通信的通道。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JS 向 Native 发送消息：调用相关接口、通知 Native 当前 JS 状态等。&lt;/li&gt;
&lt;li&gt;Native 向 JS 发送消息： 回溯调用结果、消息推送、通知 JS 当前 Native 的状态等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;解决方案&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于 Web 的 Hybrid 的解决方案：微信浏览器、各大公司的 Hybrid 方案。&lt;/li&gt;
&lt;li&gt;ReactNative等。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://wangytbest.github.io/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="http://wangytbest.github.io/tags/Javascript/"/>
    
      <category term="JSBridge" scheme="http://wangytbest.github.io/tags/JSBridge/"/>
    
  </entry>
  
  <entry>
    <title>一些常用收集</title>
    <link href="http://wangytbest.github.io/2019/04/17/%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E6%94%B6%E9%9B%86/"/>
    <id>http://wangytbest.github.io/2019/04/17/一些常用收集/</id>
    <published>2019-04-17T03:19:45.000Z</published>
    <updated>2019-04-17T09:23:36.054Z</updated>
    
    <content type="html"><![CDATA[<p>收集常用的库或项目，避免造轮子</p><ul><li>JS</li><li>CSS</li><li>VUE</li></ul><a id="more"></a><h2 id="JS库"><a href="#JS库" class="headerlink" title="JS库"></a>JS库</h2><ul><li><a href="https://github.com/js-cookie/js-cookie" target="_blank" rel="noopener">js-cookie cookie处理</a></li><li><a href="http://ricostacruz.com/nprogress/" target="_blank" rel="noopener">nprogress 进度条</a></li><li><a href="https://github.com/mrdoob/three.js" target="_blank" rel="noopener">three</a></li><li><a href="https://github.com/AlloyTeam/AlloyTouch" target="_blank" rel="noopener">AlloyTouch：丝般顺滑的触摸运动方案</a></li><li><a href="https://github.com/date-fns/date-fns" target="_blank" rel="noopener">date-fns 日期处理</a></li><li><a href="https://github.com/niklasvh/html2canvas" target="_blank" rel="noopener">html2canvas</a></li><li>Airbnb JavaScript 编码规范：<a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener">Airbnb github</a>， <a href="https://github.com/yuche/javascript" target="_blank" rel="noopener">中</a></li><li><a href="https://github.com/tuupola/lazyload" target="_blank" rel="noopener">lazyload</a></li><li><a href="https://github.com/zenorocha/clipboard.js" target="_blank" rel="noopener">clipboard</a></li><li><a href="https://github.com/alvarotrigo/fullPage.js" target="_blank" rel="noopener">fullPage 全屏滚动网站</a></li><li><a href="https://github.com/bilibili/flv.js" target="_blank" rel="noopener">bilibili flv</a></li><li><a href="https://github.com/apache/incubator-echarts" target="_blank" rel="noopener">Echarts</a></li><li><a href="https://github.com/fex-team/webuploader" target="_blank" rel="noopener">WebUploader 文件上传</a></li><li><a href="https://github.com/lodash/lodash" target="_blank" rel="noopener">lodash</a></li><li><a href="https://github.com/nolimits4web/swiper" target="_blank" rel="noopener">swiper</a></li><li><a href="https://github.com/nuysoft/Mock" target="_blank" rel="noopener">Mock.js</a></li><li><a href="https://d3js.org" target="_blank" rel="noopener">Bring data to life with SVG, Canvas and HTML. 📊📈</a></li><li><a href></a></li></ul><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><ul><li><a href="https://github.com/necolas/normalize.css" target="_blank" rel="noopener">normalize.css</a></li><li><a href="https://qishaoxuan.github.io/css_tricks/" target="_blank" rel="noopener">css_tricks：一些常用的CSS样式</a></li><li><a href="https://github.com/IanLunn/Hover" target="_blank" rel="noopener">Hover</a></li><li><a href="https://github.com/daneden/animate.css" target="_blank" rel="noopener">Animate.css</a></li><li><a href></a></li></ul><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><ul><li>taro: <a href="https://taro.js.org/" target="_blank" rel="noopener">taro</a>, <a href="https://github.com/NervJS/taro" target="_blank" rel="noopener">github</a></li><li><a href="https://github.com/alibaba/ice" target="_blank" rel="noopener">🚀 飞冰 - 让前端开发简单而友好</a></li><li><a href="https://github.com/NervJS/nerv/blob/master/README_CN.md" target="_blank" rel="noopener">Nerv是一款基于虚拟DOM技术的JavaScript（TypeScript）库</a></li></ul><h2 id="VUE"><a href="#VUE" class="headerlink" title="VUE"></a>VUE</h2><ul><li><a href="https://github.com/ustbhuangyi/vue-analysis" target="_blank" rel="noopener">vue 源码分析</a></li><li><a href="https://surmon-china.github.io/vue-awesome-swiper/" target="_blank" rel="noopener">vue-awesome-swiper</a></li><li><a href="https://github.com/HcySunYang/vue-design" target="_blank" rel="noopener">逐行级别的源码分析</a></li><li><a href="https://github.com/answershuto/learnVue" target="_blank" rel="noopener">Vue.js 源码解析</a></li><li><a href="https://github.com/mint-ui/docs" target="_blank" rel="noopener">mint-ui</a></li><li><a href></a></li></ul><h2 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h2><ul><li><a href="https://github.com/yangshun/front-end-interview-handbook/blob/master/Translations/Chinese/README.md" target="_blank" rel="noopener">前端面试手册</a></li><li><a href="https://github.com/Advanced-Frontend/Daily-Interview-Question" target="_blank" rel="noopener">木易杨，「高级前端进阶」，每天一道前端大厂面试题</a></li><li><a href="https://github.com/FEGuideTeam/FEGuide/tree/master/%E7%BD%91%E7%BB%9C%E9%97%AE%E9%A2%98" target="_blank" rel="noopener">计算机网络</a></li><li><a href="https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions/Questions-and-Answers" target="_blank" rel="noopener">前端开发面试</a></li><li><a href="https://cyc2018.github.io/CS-Notes/#/" target="_blank" rel="noopener">📚 技术面试必备基础知识</a></li><li><a href></a></li></ul><h3 id="CSS-1"><a href="#CSS-1" class="headerlink" title="CSS"></a>CSS</h3><ul><li>30-seconds-of-interviews: <a href="https://30secondsofinterviews.org/" target="_blank" rel="noopener">30s-css</a>, <a href="https://github.com/30-seconds/30-seconds-of-interviews" target="_blank" rel="noopener">github</a></li><li>30-seconds-of-css: <a href="https://30-seconds.github.io/30-seconds-of-css/" target="_blank" rel="noopener">30s-css</a>, <a href="https://github.com/30-seconds/30-seconds-of-css" target="_blank" rel="noopener">github</a></li><li><a href="https://github.com/chokcoco/iCSS" target="_blank" rel="noopener">CSS奇技淫巧</a></li><li><a href></a></li></ul><h3 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h3><ul><li><a href="https://github.com/leonardomso/33-js-concepts" target="_blank" rel="noopener">33-js-concepts 英</a></li><li><a href="https://github.com/stephentian/33-js-concepts" target="_blank" rel="noopener">33-js-concepts 中</a></li><li><a href="http://es6.ruanyifeng.com/#README" target="_blank" rel="noopener">阮一峰 ES6 入门</a></li><li><a href="https://github.com/chyingp/nodejs-learning-guide" target="_blank" rel="noopener">Nodejs学习笔记以及经验总结</a></li><li><a href></a></li></ul><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul><li><a href="https://github.com/geeeeeeeeek/git-recipes" target="_blank" rel="noopener">高质量的Git中文教程</a></li><li><a href="https://github.com/qq20004604/webpack-study" target="_blank" rel="noopener">webpack-study</a></li><li><a href="https://github.com/avwo/whistle/blob/master/README-zh_CN.md" target="_blank" rel="noopener">基于Node实现的跨平台抓包调试代理工具</a></li><li><a href="https://github.com/wangfupeng1988/wangEditor" target="_blank" rel="noopener">轻量级web富文本框</a></li><li><a href="http://webpack.wuhaolin.cn/" target="_blank" rel="noopener">深入浅出 Webpack</a></li><li><a href="https://github.com/wuchangming/spy-debugger" target="_blank" rel="noopener">一站式页面调试、抓包工具</a></li><li><a href></a></li></ul><h2 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h2><ul><li><a href="https://github.com/ljianshu/Blog" target="_blank" rel="noopener">前端工匠</a></li><li><a href="https://github.com/KieSun/Dream" target="_blank" rel="noopener">Dream</a></li><li><a href="https://github.com/mqyqingfeng/Blog" target="_blank" rel="noopener">冴羽博客（JavaScript深入系列、JavaScript专题系列、ES6系列、React系列）</a></li><li><a href="https://github.com/yygmind/blog" target="_blank" rel="noopener">木易杨，「高级前端进阶」</a></li><li><a href="https://github.com/rumengkai/awesome-vue" target="_blank" rel="noopener">Vue相关开源项目库</a></li><li><a href="https://github.com/amfe/article" target="_blank" rel="noopener">手机淘宝前端团队</a></li><li><a href="https://github.com/tsrot/study-notes" target="_blank" rel="noopener">study-notes</a></li><li><a href></a></li></ul><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><ul><li><a href="https://github.com/tumobi/nideshop" target="_blank" rel="noopener">微信小程序商城服务端 API</a></li><li><a href="https://github.com/tumobi/nideshop-mini-program" target="_blank" rel="noopener">微信小程序商城</a></li><li><a href="https://github.com/bailichen/vue-weixin" target="_blank" rel="noopener">Vue2 全家桶仿 微信App 项目，支持多人在线聊天和机器人聊天</a></li><li><a href="https://github.com/hua1995116/musiccloudWebapp" target="_blank" rel="noopener">🎧vuejs仿网易云音乐</a></li><li><a href="https://github.com/hua1995116/webchat" target="_blank" rel="noopener">🔈 Websocket project based on vue（基于vue2.0的实时聊天项目）</a></li><li><a href="https://github.com/PanJiaChen/vue-element-admin/blob/master/README.zh-CN.md" target="_blank" rel="noopener">后台前端解决方案</a></li><li><a href="https://github.com/d2-projects/d2-admin" target="_blank" rel="noopener">d2 企业中后台产品前端集成方案</a></li><li><a href="https://github.com/EastWorld/wechat-app-mall" target="_blank" rel="noopener">微信小程序商城</a></li><li><a href="https://github.com/meili/minui" target="_blank" rel="noopener">MinUI微信小程序组件库</a></li><li><a href="https://github.com/Tencent/wepy" target="_blank" rel="noopener">wepy</a></li><li><a href="https://github.com/herozhou/vue-framework-wz" target="_blank" rel="noopener">👏vue后台管理框架👏 </a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;收集常用的库或项目，避免造轮子&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JS&lt;/li&gt;
&lt;li&gt;CSS&lt;/li&gt;
&lt;li&gt;VUE&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ES6模块和CommonJS模块的区别</title>
    <link href="http://wangytbest.github.io/2019/04/12/ES6%E6%A8%A1%E5%9D%97%E5%92%8CCommonJS%E6%A8%A1%E5%9D%97%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://wangytbest.github.io/2019/04/12/ES6模块和CommonJS模块的区别/</id>
    <published>2019-04-12T10:19:37.000Z</published>
    <updated>2019-04-12T10:27:06.658Z</updated>
    
    <content type="html"><![CDATA[<p>ES6 模块与 CommonJS 模块的差异</p><a id="more"></a><h2 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h2><p>基本语法</p><ol><li>暴露模块：<code>module.exports = value</code>或<code>exports.xxx = value</code></li><li>引入模块：<code>require(xxx)</code>,如果是第三方模块，xxx为模块名；如果是自定义模块，xxx为模块文件路径</li></ol><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// example.js</span></span><br><span class="line"><span class="hljs-keyword">var</span> x = <span class="hljs-number">5</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> addX = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> value + x;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-built_in">module</span>.exports.x = x;</span><br><span class="line"><span class="hljs-built_in">module</span>.exports.addX = addX;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// mian.js</span></span><br><span class="line"><span class="hljs-keyword">var</span> example = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./example.js'</span>); <span class="hljs-comment">//如果参数字符串以“./”开头，则表示加载的是一个位于相对路径</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(example.x); <span class="hljs-comment">// 5</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(example.addX(<span class="hljs-number">1</span>)); <span class="hljs-comment">// 6</span></span><br></pre></td></tr></table></figure><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><p><code>ES6</code> 模块的设计思想是尽量的<strong>静态化</strong>，<em>使得编译时就能确定模块的依赖关系，以及输入和输出的变量</em>。CommonJS 和 AMD 模块，都只能在运行时确定这些东西。比如，CommonJS 模块就是对象，输入时必须查找对象属性。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/** 定义模块 math.js **/</span></span><br><span class="line"><span class="hljs-keyword">var</span> basicNum = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> add = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-keyword">export</span> &#123; basicNum, add &#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/** 引用模块 **/</span></span><br><span class="line"><span class="hljs-keyword">import</span> &#123; basicNum, add &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'./math'</span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params">ele</span>) </span>&#123;</span><br><span class="line">    ele.textContent = add(<span class="hljs-number">99</span> + basicNum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>它们有两个重大差异：</p><p>① <code>CommonJS</code> 模块输出的是一个值的拷贝， <code>ES6</code> 模块输出的是值的引用。</p><p>② <code>CommonJS</code> 模块是运行时加载，ES6 模块是编译时输出接口。</p><p>第二个差异是因为 <code>CommonJS</code> 加载的是一个对象（即 <code>module.export</code>s 属性），该对象只有在脚本运行完才会生成。而 <code>ES6</code> 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。</p><p>下面重点解释第一个差异，我们还是举上面那个CommonJS模块的加载机制例子:</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// lib.js</span></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> counter = <span class="hljs-number">3</span>;</span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">incCounter</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  counter++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// main.js</span></span><br><span class="line"><span class="hljs-keyword">import</span> &#123; counter, incCounter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'./lib'</span>;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(counter); <span class="hljs-comment">// 3</span></span><br><span class="line">incCounter();</span><br><span class="line"><span class="hljs-built_in">console</span>.log(counter); <span class="hljs-comment">// 4</span></span><br></pre></td></tr></table></figure><p><code>ES6</code> 模块的运行机制与 <code>CommonJS</code> 不一样。 <code>ES6</code> 模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。</p><p><a href="https://github.com/ljianshu/Blog/issues/48" target="_blank" rel="noopener">前端模块化详解</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ES6 模块与 CommonJS 模块的差异&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://wangytbest.github.io/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="http://wangytbest.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>css中position属性深入探讨</title>
    <link href="http://wangytbest.github.io/2019/04/11/css%E4%B8%ADposition%E5%B1%9E%E6%80%A7%E6%B7%B1%E5%85%A5%E6%8E%A2%E8%AE%A8/"/>
    <id>http://wangytbest.github.io/2019/04/11/css中position属性深入探讨/</id>
    <published>2019-04-11T02:58:22.000Z</published>
    <updated>2019-04-11T09:01:22.656Z</updated>
    
    <content type="html"><![CDATA[<p>对于 <code>position</code> 属性可以说是平时开发中使用频率非常高的 <code>CSS</code> 属性，本文主要对 <code>position</code> 做个总结。</p><p><code>position</code> 属性能够很好的体现 HTML 的普通流的特征。设置 <code>position</code> 属性之后主要关注<strong>是否脱离文档流</strong>和<strong>改变 <code>display</code> 属性</strong></p><blockquote><p><code>position</code>: <code>static</code> | <code>relative</code> | <code>absolute</code> | <code>sticky</code></p></blockquote><a id="more"></a><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><p>所有元素在默认情况下 <code>position</code> 属性值都为 <code>static</code> ，此时设置<code>top</code>、<code>left</code>、<code>bottom</code>和 <code>right</code> 在 <code>position</code> 为 <code>static</code> 的情况下无效。<br>用法：在改变了元素的 <code>position</code> 属性后可以将其元素重置为 <code>static</code> ，让其回归到正常的普通文档流中。</p><h2 id="relative"><a href="#relative" class="headerlink" title="relative"></a>relative</h2><p>相对定位: 指给元素设置相对于原本位置的定位，元素并不脱离文档流，因此元素原本的位置会被保留，其他的元素位置不会受到影响。</p><p>每个元素在页面中的普通流中都会占用一个位置（元素默认文档流位置），设置为相对定位后，将元素偏离元素的默认位置，但是普通文档流中依然保持着原有的默认位置，并没有脱离普通文档流。</p><h3 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h3><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-undefined">  div&#123; </span></span><br><span class="line"><span class="hljs-undefined">    width: 100px; </span></span><br><span class="line"><span class="hljs-undefined">    height: 50px; </span></span><br><span class="line"><span class="hljs-undefined">    line-height: 50px; </span></span><br><span class="line"><span class="hljs-undefined">    text-align: center; </span></span><br><span class="line"><span class="hljs-css">    <span class="hljs-selector-tag">color</span>: <span class="hljs-selector-id">#fff</span>; </span></span><br><span class="line"><span class="hljs-undefined">  &#125;</span></span><br><span class="line"><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-css">  <span class="hljs-selector-tag">div</span> <span class="hljs-selector-class">.A</span> &#123;</span></span><br><span class="line"><span class="hljs-undefined">    background: blue;</span></span><br><span class="line"><span class="hljs-undefined">  &#125;</span></span><br><span class="line"><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-css">  <span class="hljs-selector-tag">div</span> <span class="hljs-selector-class">.B</span> &#123;</span></span><br><span class="line"><span class="hljs-undefined">    background: red; </span></span><br><span class="line"><span class="hljs-undefined">    position: relative; </span></span><br><span class="line"><span class="hljs-undefined">    top: 20px; </span></span><br><span class="line"><span class="hljs-undefined">    left: 20px;</span></span><br><span class="line"><span class="hljs-undefined">  &#125;</span></span><br><span class="line"><span class="hljs-css">  <span class="hljs-selector-tag">div</span> <span class="hljs-selector-class">.C</span> &#123;</span></span><br><span class="line"><span class="hljs-undefined">    background: green;</span></span><br><span class="line"><span class="hljs-undefined">  &#125;</span></span><br><span class="line"><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"A"</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"B"</span>&gt;</span>B<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"C"</span>&gt;</span>C<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="http://blog.cloud.xuww.wang/position-relative-block.png" alt="相对定位"></p><p>在右图中的黑色虚线部分为B块的默认文档流位置，当B块设置为相对定位 <code>relative</code> 之后，则相对于<strong>默认位置</strong>进行偏移。C块依然保留在原位，并没有因为B块发生了偏移而随之变化。</p><h3 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h3><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-undefined">  strong &#123; </span></span><br><span class="line"><span class="hljs-css">    <span class="hljs-selector-tag">background</span>: <span class="hljs-selector-id">#808080</span>; </span></span><br><span class="line"><span class="hljs-undefined">  &#125;</span></span><br><span class="line"><span class="hljs-undefined">  em &#123; </span></span><br><span class="line"><span class="hljs-css">    <span class="hljs-selector-tag">background</span>: <span class="hljs-selector-id">#ffd800</span>; </span></span><br><span class="line"><span class="hljs-undefined">  &#125;</span></span><br><span class="line"><span class="hljs-undefined">  span &#123; </span></span><br><span class="line"><span class="hljs-css">    <span class="hljs-selector-tag">background</span>: <span class="hljs-selector-id">#b6ff00</span>; </span></span><br><span class="line"><span class="hljs-undefined">    position: relative; </span></span><br><span class="line"><span class="hljs-undefined">    top: 10px; </span></span><br><span class="line"><span class="hljs-undefined">    left: 10px; </span></span><br><span class="line"><span class="hljs-undefined">    width: 100px;</span></span><br><span class="line"><span class="hljs-undefined">  &#125;</span></span><br><span class="line"><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>strong<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>em<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="http://blog.cloud.xuww.wang/position-relative-inline.png.png" alt="行内元素-相对定位"></p><p>行内元素在设置 <code>relative</code> 之后，依然是内联元素， <code>widht</code> 属性未生效，并<strong>没有改变行内元素的display属性</strong>（这是与 <code>absolute</code> 的一个重要的区别）。</p><h2 id="absolute"><a href="#absolute" class="headerlink" title="absolute"></a>absolute</h2><p>绝对定位: 是指给元素设置绝对的定位，相对定位的对象可以分为两种情况：</p><ol><li>设置了 <code>absolute</code> 的元素如果存在有祖先元素设置了 <code>position</code> 属性为 <code>relative</code> 或者 <code>absolute</code> ，则这时元素的定位对象为此已设置 <code>position</code> 属性的祖先元素。</li><li>如果并没有设置了 <code>position</code> 属性的祖先元素，则此时相对于 <code>body</code> 进行定位。</li></ol><p><code>position: absolute</code>相对于第一个不是 <code>static</code> 的父级元素进行定位。如果在其节点中所有的父级祖先元素都没有设置 <code>position</code> 属性为 <code>relative</code> 或 <code>absolute</code> 则该元素最终将对 <code>body</code> 进行位置偏移。</p><blockquote><p>设置绝对定位的元素会<strong>脱离普通的文档流</strong>并且<strong>改变diaplay属性</strong>。</p></blockquote><p>结论：</p><ul><li>块级元素在设置为absolute绝对定位之后，会将width设置为auto（收到父元素的影响）</li><li>行内元素在设置为absolute绝对定位之后，如果没有设置其top、left、bottom和right属性的话，浏览器会设置成auto，auto的值则是该元素的默认位置。</li></ul><h2 id="relative-absolute-点"><a href="#relative-absolute-点" class="headerlink" title="relative|absolute 点"></a>relative|absolute 点</h2><ol><li>应用了<code>position: relative | absolute</code>的元素，<code>margin</code>属性依然生效，尽量不要设置<code>margin</code>，减少干扰、不精确。</li><li><code>position: absolute</code> 将会忽略根元素的padding。</li><li>行内元素使用了<code>position: absolute</code>之后会改变<code>display</code>属性，<code>inline-block</code>。</li><li>设置<code>position: relative | absolute</code>之后，会覆盖其他非定位的元素，如果不想覆盖其他元素，也可以将其<code>z-index: -1</code>。</li></ol><h2 id="fixed"><a href="#fixed" class="headerlink" title="fixed"></a>fixed</h2><p>绝对定位。</p><ul><li>改变行内元素的<code>display</code>属性，使其<code>display</code>属性变更为<code>block</code>。</li><li>会让元素脱硫文档流，不占据空间</li><li>覆盖在非定位元素</li></ul><p><code>fixed</code> 和 <code>absolute</code> 的区别： <code>absolute</code> 根据第一个不是 <code>static</code> 的父元素进行定位， <code>fixed</code> 是根据浏览器窗口定位。</p><h2 id="sticky"><a href="#sticky" class="headerlink" title="sticky"></a>sticky</h2><p>粘性定位: <code>sticky</code> 的元素，在屏幕范围（<code>viewport</code>）时该元素的位置并不受到定位影响（设置是 <code>top</code> 、 <code>left</code> 等属性无效），当该元素的位置将要移出偏移范围时，定位又会变成 <code>fixed</code> ，根据设置的 <code>left</code> 、 <code>top</code> 等属性成固定位置的效果。</p><p>可以知道sticky属性有以下几个特点：</p><ul><li>该元素并不脱离文档流，仍然保留元素原本在文档流中的位置。</li><li>当元素在容器中被滚动超过指定的偏移值时，元素在容器内固定在指定位置。亦即如果你设置了top: 50px，那么在sticky元素到达距离相对定位的元素顶部50px的位置时固定，不再向上移动。</li><li>元素固定的相对偏移是相对于离它最近的具有滚动框的祖先元素，如果祖先元素都不可以滚动，那么是相对于viewport来计算元素的偏移量</li></ul><h2 id="position和float"><a href="#position和float" class="headerlink" title="position和float"></a>position和float</h2><ol><li>当元素同时设置 <code>position: relative</code> 和 <code>float: left</code> ，则元素先浮动到相应的位置，然后在根据 <code>top/ left / bottom / right</code> 来发生偏移。</li><li>当元素同时设置 <code>position: absolute</code> 和 <code>float: left</code> ，则 <code>float</code> 失效。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于 &lt;code&gt;position&lt;/code&gt; 属性可以说是平时开发中使用频率非常高的 &lt;code&gt;CSS&lt;/code&gt; 属性，本文主要对 &lt;code&gt;position&lt;/code&gt; 做个总结。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;position&lt;/code&gt; 属性能够很好的体现 HTML 的普通流的特征。设置 &lt;code&gt;position&lt;/code&gt; 属性之后主要关注&lt;strong&gt;是否脱离文档流&lt;/strong&gt;和&lt;strong&gt;改变 &lt;code&gt;display&lt;/code&gt; 属性&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;position&lt;/code&gt;: &lt;code&gt;static&lt;/code&gt; | &lt;code&gt;relative&lt;/code&gt; | &lt;code&gt;absolute&lt;/code&gt; | &lt;code&gt;sticky&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://wangytbest.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://wangytbest.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Vue双向绑定</title>
    <link href="http://wangytbest.github.io/2019/04/09/Vue%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/"/>
    <id>http://wangytbest.github.io/2019/04/09/Vue双向绑定/</id>
    <published>2019-04-09T08:03:43.000Z</published>
    <updated>2019-05-08T08:22:55.572Z</updated>
    
    <content type="html"><![CDATA[<h3 id="双向绑定"><a href="#双向绑定" class="headerlink" title="双向绑定"></a>双向绑定</h3><p>MVVM：数据变化更新试图，视图变化更新数据。</p><ul><li>Model</li><li>View</li><li>ViewModel</li></ul><a id="more"></a><h3 id="双向绑定实现"><a href="#双向绑定实现" class="headerlink" title="双向绑定实现"></a>双向绑定实现</h3><ul><li><p>vue: 数据劫持<br>vue数据实现双向绑定是通过数据劫持结合发布者-订阅者模式实现的。</p></li><li><p>angular: 脏检查机制<br>当触发了指定事件后会进入脏数据检测，这时会调用 <code>$digest</code> 循环遍历所有的数据观察者，判断当前值是否和先前的值有区别，如果检测到变化的话，会调用 <code>$watch</code> 函数，然后再次调用 <code>$digest</code> 循环直到发现没有变化。循环至少为二次 ，至多为十次。</p></li></ul><h3 id="vue实现"><a href="#vue实现" class="headerlink" title="vue实现"></a>vue实现</h3><blockquote><p>vue.js 是采用<code>数据劫持</code>结合<code>发布/订阅模式</code>的方式，通过<code>Object.defineProperty()</code>来劫持各个属性的 <code>setter</code>  、 <code>getter</code> ，在数据变动时发布消息给订阅者，触发相应的监听回调。</p></blockquote><ol><li>需要 <code>observe</code> 的数据对象进行递归遍历，包括子属性对象的属性，都加上 <code>setter</code> 和 <code>getter</code> 。这样的话，给这个对象的某个值赋值，就会触发 <code>setter</code> ，那么就能监听到了数据变化；</li><li><code>compile</code> 解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图；</li><li><code>Watcher订阅者</code> 是 <code>Observer</code> 和 <code>Compile</code> 之间通信的桥梁，主要做的事情是:<br> 1、在自身实例化时往 <code>属性订阅器(dep)</code> 里面添加自己<br> 2、自身必须有一个 <code>update()方法</code><br> 3、待属性变动 <code>dep.notice()</code> 通知时，能调用自身的 update() 方法，并触发 Compile 中绑定的回调，则功成身退。</li><li>MVVM 作为数据绑定的入口，整合 <code>Observer</code> 、 <code>Compile</code> 和 <code>Watcher</code> 三者，通过 Observer 来监听自己的 model 数据变化，通过 Compile 来解析编译模板指令，最终利用Watcher 搭起 Observer 和 Compile 之间的通信桥梁，达到 <code>数据变化 -&gt; 视图更新</code> 、<code>视图交互变化(input) -&gt; 数据model变更</code> 的双向绑定效果。</li></ol><p>实现数据的双向绑定，首先要对数据进行劫持监听，设置一个 <code>监听器Observer</code> ，用来监听所有属性。如果属性发上变化了，就需要告诉 <code>订阅者Watcher</code> 看是否需要更新。因为订阅者是有很多个，所以我们需要有一个 <code>消息订阅器Dep</code> 来专门收集这些订阅者，然后在 <code>监听器Observer</code> 和 <code>订阅者Watcher</code> 之间进行统一管理。接着，我们还需要有一个 <code>指令解析器Compile</code> ，对每个节点元素进行扫描和解析，将相关指令对应初始化成一个 <code>订阅者Watcher</code> ，并替换模板数据或者绑定相应的函数，此时当 <code>订阅者Watcher</code> 接收到相应属性的变化，就会执行对应的更新函数，从而更新视图。</p><p><img src="http://blog.cloud.xuww.wang/vue%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A.png" alt="双向绑定(来源 https://segmentfault.com/a/1190000006599500 )"></p><h4 id="1-监听器Observer"><a href="#1-监听器Observer" class="headerlink" title="1. 监听器Observer"></a>1. 监听器Observer</h4><blockquote><p>实现一个 <code>监听器Observer</code> ，用来劫持并监听所有属性，如果有变动，就通知 <code>订阅者Watcher</code> 。</p></blockquote><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">defineReactive</span>(<span class="hljs-params">data, key, value</span>) </span>&#123;</span><br><span class="line">    observe(val); <span class="hljs-comment">// 递归遍历所有子属性</span></span><br><span class="line">    <span class="hljs-keyword">var</span> dep = <span class="hljs-keyword">new</span> Dep();</span><br><span class="line">    <span class="hljs-built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">        enumerable: <span class="hljs-literal">true</span>,</span><br><span class="line">        configurable: <span class="hljs-literal">true</span>,</span><br><span class="line">        <span class="hljs-keyword">set</span>: function(newVal) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>( val === newVal ) &#123;</span><br><span class="line">                <span class="hljs-keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            value = newVal;</span><br><span class="line">            dep.notify(); <span class="hljs-comment">// 如果数据变化，通知所有订阅者</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="hljs-keyword">get</span>: function() &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>(Dep.target) &#123; <span class="hljs-comment">// 判断是否需要添加订阅者</span></span><br><span class="line">                dep.addSub(Dep.target); <span class="hljs-comment">// 添加订阅者</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 递归遍历所有子属性</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">observe</span>(<span class="hljs-params">data</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(!data || <span class="hljs-keyword">typeof</span> data !== <span class="hljs-string">'object'</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-built_in">Object</span>.keys(data).forEach(<span class="hljs-function"><span class="hljs-params">key</span> =&gt;</span> &#123;</span><br><span class="line">        defineReactive(data, key, data[key]);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们将 <code>订阅器Dep</code> 添加一个订阅者设计在 <code>getter</code> 里面，这是为了让 Watcher 初始化进行触发，因此需要判断是否要添加订阅者。<br>在 <code>setter</code> 函数里面，如果数据变化，就会去通知所有 <code>订阅者Watcher</code>，订阅者们就会去执行对应的<strong>更新的函数 update()</strong>。</p><h4 id="2-消息订阅器Dep"><a href="#2-消息订阅器Dep" class="headerlink" title="2. 消息订阅器Dep"></a>2. 消息订阅器Dep</h4><blockquote><p>实现一个 <code>消息订阅器Dep</code> ，主要<strong>负责收集订阅者</strong>，然后在属性变化的时候执行对应 <code>订阅者Watcher</code> 的更新函数。</p></blockquote><p>维护一个数组，用来收集订阅者，数据变动触发 notify ，再调用订阅者的 update方法。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Dep</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.subs = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Dep.property.addSub = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">sub</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.subs.push(sub);</span><br><span class="line">&#125;</span><br><span class="line">Dep.property.notify = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.subs.forEach(<span class="hljs-function"><span class="hljs-params">sub</span> =&gt;</span> &#123;</span><br><span class="line">        sub.update();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Dep.target = <span class="hljs-literal">null</span>;</span><br></pre></td></tr></table></figure><p><code>监听器Observer</code> 是在 <code>get函数</code> 执行了添加 <code>订阅者Watcher</code> 的操作，所以在 <code>订阅者Watcher</code> 初始化的时候触发对应的 <code>get</code> 函数去执行添加订阅者操作。注意只在 <code>订阅者Watcher</code> 初始化的时候才需要添加订阅者。</p><h4 id="3-订阅者Watcher"><a href="#3-订阅者Watcher" class="headerlink" title="3. 订阅者Watcher"></a>3. 订阅者Watcher</h4><blockquote><p>实现一个<code>订阅者Watcher</code>，可以收到属性的变化通知并执行相应的函数，从而更新视图。</p></blockquote><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Watcher</span>(<span class="hljs-params">vm, exp, cb</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.cb = cb;</span><br><span class="line">    <span class="hljs-keyword">this</span>.vm = vm;</span><br><span class="line">    <span class="hljs-keyword">this</span>.exp = exp;</span><br><span class="line">    <span class="hljs-keyword">this</span>.value = <span class="hljs-keyword">this</span>.get();  <span class="hljs-comment">// 将自己添加到订阅器的操作</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">Watcher.prototype = &#123;</span><br><span class="line">    update: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.run();</span><br><span class="line">    &#125;,</span><br><span class="line">    run: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">var</span> value = <span class="hljs-keyword">this</span>.vm.data[<span class="hljs-keyword">this</span>.exp];</span><br><span class="line">        <span class="hljs-keyword">var</span> oldVal = <span class="hljs-keyword">this</span>.value;</span><br><span class="line">        <span class="hljs-keyword">if</span> (value !== oldVal) &#123;</span><br><span class="line">            <span class="hljs-keyword">this</span>.value = value;</span><br><span class="line">            <span class="hljs-keyword">this</span>.cb.call(<span class="hljs-keyword">this</span>.vm, value, oldVal);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="hljs-keyword">get</span>: function() &#123;</span><br><span class="line">        Dep.target = <span class="hljs-keyword">this</span>;  <span class="hljs-comment">// 缓存自己</span></span><br><span class="line">        <span class="hljs-keyword">var</span> value = <span class="hljs-keyword">this</span>.vm.data[<span class="hljs-keyword">this</span>.exp]  <span class="hljs-comment">// 强制执行监听器里的get函数</span></span><br><span class="line">        Dep.target = <span class="hljs-literal">null</span>;  <span class="hljs-comment">// 释放自己</span></span><br><span class="line">        <span class="hljs-keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="关联-Wathcher-和-Observer"><a href="#关联-Wathcher-和-Observer" class="headerlink" title="关联 Wathcher 和 Observer"></a>关联 Wathcher 和 Observer</h4><p>到此为止，简单版的Watcher设计完毕，这时候我们只要将 Observer 和 Watcher 关联起来，就可以实现一个简单的双向绑定数据了。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"name"</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Observer和Watcher关联起来</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SelfVue</span> (<span class="hljs-params">data, el, exp</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.data = data;</span><br><span class="line">    observe(data); <span class="hljs-comment">// 1. Observe</span></span><br><span class="line">    el.innerHTML = <span class="hljs-keyword">this</span>.data[exp];  <span class="hljs-comment">// 初始化模板数据的值</span></span><br><span class="line">    <span class="hljs-keyword">new</span> Watcher(<span class="hljs-keyword">this</span>, exp, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) </span>&#123; <span class="hljs-comment">// 2. Watcher</span></span><br><span class="line">        el.innerHTML = value;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> ele = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#name'</span>);</span><br><span class="line"><span class="hljs-keyword">var</span> selfVue = <span class="hljs-keyword">new</span> SelfVue(&#123;</span><br><span class="line">    name: <span class="hljs-string">'hello world'</span></span><br><span class="line">&#125;, ele, <span class="hljs-string">'name'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">window</span>.setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'name值改变了'</span>);</span><br><span class="line">    selfVue.data.name = <span class="hljs-string">'canfoo'</span>;</span><br><span class="line">&#125;, <span class="hljs-number">2000</span>);</span><br></pre></td></tr></table></figure><h4 id="4-解析器Compile"><a href="#4-解析器Compile" class="headerlink" title="4. 解析器Compile"></a>4. 解析器Compile</h4><p>实现一个<code>解析器Compile</code>，可以扫描和解析每个节点的相关指令，并根据初始化模板数据以及初始化相应的订阅器。</p><p>compile 主要做的事情是解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图。</p><h4 id="数据劫持"><a href="#数据劫持" class="headerlink" title="数据劫持"></a>数据劫持</h4><p><code>Object.defineProperty()</code>方法实现数据劫持，<code>Object.defineProperty()</code>用来控制对象属性，比如读写权限、是否可枚举、描述属性<code>get</code>和<code>set</code>等。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;双向绑定&quot;&gt;&lt;a href=&quot;#双向绑定&quot; class=&quot;headerlink&quot; title=&quot;双向绑定&quot;&gt;&lt;/a&gt;双向绑定&lt;/h3&gt;&lt;p&gt;MVVM：数据变化更新试图，视图变化更新数据。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Model&lt;/li&gt;
&lt;li&gt;View&lt;/li&gt;
&lt;li&gt;ViewModel&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://wangytbest.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://wangytbest.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Loadsh库模块化引入</title>
    <link href="http://wangytbest.github.io/2019/04/09/Loadsh%E5%BA%93%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%95%E5%85%A5/"/>
    <id>http://wangytbest.github.io/2019/04/09/Loadsh库模块化引入/</id>
    <published>2019-04-09T08:02:53.000Z</published>
    <updated>2019-04-09T08:03:19.603Z</updated>
    
    <content type="html"><![CDATA[<h2 id="loadsh提供模块按需加载"><a href="#loadsh提供模块按需加载" class="headerlink" title="loadsh提供模块按需加载"></a>loadsh提供模块按需加载</h2><blockquote><p>loadsh本身提供模块化引入，可按需引入</p></blockquote><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// </span></span><br><span class="line"><span class="hljs-keyword">import</span> &#123; debounce &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'loadsh'</span></span><br><span class="line"><span class="hljs-keyword">import</span> &#123; throttle &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'loadsh'</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 按需引入</span></span><br><span class="line"><span class="hljs-keyword">import</span> &#123; debounce &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'loadsh/debounce'</span></span><br><span class="line"><span class="hljs-keyword">import</span> &#123; throttle &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'loadsh/throttle'</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="webpack-plugin-配置"><a href="#webpack-plugin-配置" class="headerlink" title="webpack plugin 配置"></a>webpack plugin 配置</h2><blockquote><p>通过<code>webpack</code>配置，按需加载所需要的模块</p></blockquote><ul><li><code>loadsh-webpack-plugin</code></li><li><code>babel-plugin-loadsh</code></li></ul><p>结合使用，将全路径引用的<code>loadsh</code>自动转变为模块化按需引用</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// @/util/loadsh.js 统一引入需要的loadsh方法</span></span><br><span class="line"><span class="hljs-keyword">import</span> _ <span class="hljs-keyword">from</span> <span class="hljs-string">'loadsh'</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="line">    cloneDeep: _.cloneDeep,</span><br><span class="line">    debounce: _.debounce,</span><br><span class="line">    throttle: _.throttle,</span><br><span class="line">    isEmpty: _.isEmpty</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 注入全局 main.js</span></span><br><span class="line"><span class="hljs-keyword">import</span> _ <span class="hljs-keyword">from</span> <span class="hljs-string">'@/util/loadsh.js'</span></span><br><span class="line">Vue.prototype.$_ = _</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 组件使用</span></span><br><span class="line"><span class="hljs-keyword">this</span>.$_.debounce()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;loadsh提供模块按需加载&quot;&gt;&lt;a href=&quot;#loadsh提供模块按需加载&quot; class=&quot;headerlink&quot; title=&quot;loadsh提供模块按需加载&quot;&gt;&lt;/a&gt;loadsh提供模块按需加载&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;loadsh本身提供模块化引入，可按需引入&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &amp;#123; debounce &amp;#125; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;loadsh&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &amp;#123; throttle &amp;#125; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;loadsh&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 按需引入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &amp;#123; debounce &amp;#125; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;loadsh/debounce&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &amp;#123; throttle &amp;#125; &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;loadsh/throttle&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="webpack" scheme="http://wangytbest.github.io/categories/webpack/"/>
    
    
      <category term="webpack" scheme="http://wangytbest.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack-spritesmith雪碧图</title>
    <link href="http://wangytbest.github.io/2019/04/09/webpack-spritesmith%E9%9B%AA%E7%A2%A7%E5%9B%BE/"/>
    <id>http://wangytbest.github.io/2019/04/09/webpack-spritesmith雪碧图/</id>
    <published>2019-04-09T08:02:00.000Z</published>
    <updated>2019-04-09T09:56:32.601Z</updated>
    
    <content type="html"><![CDATA[<p>项目开发设计师没有提供svg或者icon-font，只能使用图片，过多的小图片造成资源浪费，解决方案：webpack打包将多个图标合成雪碧图</p><p><strong>需要同时配置开发环境和线上环境的webpack配置</strong></p><ul><li><code>webpack-spritesmith</code> 合成雪碧图插件</li><li><code>file-loader</code></li></ul><a id="more"></a><hr><pre><code>| build|      ||      |--utils.js|      |--webpack.base.config.js|      |--webpack.dev.config.js|      |--webpack.pro.config.js||src|   ||   |--assets|   |        ||   |        |--css|   |        |--incons|   ||   |-sprites</code></pre><h3 id="1-修改webpack-base-config-js"><a href="#1-修改webpack-base-config-js" class="headerlink" title="1. 修改webpack.base.config.js"></a>1. 修改<code>webpack.base.config.js</code></h3><blockquote><ul><li>resolve</li><li>modules<blockquote><p>添加resolve和处理雪碧图资源的loader</p></blockquote></li></ul></blockquote><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">    modules: [</span><br><span class="line">        <span class="hljs-string">'node_modules'</span>,</span><br><span class="line">        <span class="hljs-string">'src/sprites'</span> <span class="hljs-comment">// 合成sprite图片地址</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">modules: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">        ...</span><br><span class="line">        <span class="hljs-comment">// 对需要合成雪碧图的资源不进行base64转换</span></span><br><span class="line">        &#123;</span><br><span class="line">            test: <span class="hljs-regexp">/\.(png|jpe?g|gif|svg)(\?.*)?$/</span>,</span><br><span class="line">            exclude: path.join(__dirname, <span class="hljs-string">'src/assets/icons'</span>),</span><br><span class="line">            loader: <span class="hljs-string">'url-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">                limit: <span class="hljs-number">10000</span>,</span><br><span class="line">                name: utils.assetsPath(<span class="hljs-string">'img/[name].[hash:7].[ext]'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="hljs-comment">// 对图标单独设置，以便生成雪碧图</span></span><br><span class="line">        &#123;</span><br><span class="line">            test: <span class="hljs-regexp">/\.(png|jpe?g|gif|svg)(\?.*)?$/</span>,</span><br><span class="line">            include: path.join(__dirname, <span class="hljs-string">'src/assets/icons'</span>),</span><br><span class="line">            loaders: [</span><br><span class="line">                <span class="hljs-string">'file-loader?name=i/[hash].[ext]'</span> <span class="hljs-comment">// 使用file-loader 对 png 图标进行设置</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-修改webpack-dev-config-js"><a href="#2-修改webpack-dev-config-js" class="headerlink" title="2. 修改webpack.dev.config.js"></a>2. 修改<code>webpack.dev.config.js</code></h3><blockquote><p>添加plugin</p></blockquote><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> utils = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./utils'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> SpritesmithPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">'webpack-spritesmith'</span>)</span><br><span class="line"></span><br><span class="line">plugins: [</span><br><span class="line">    <span class="hljs-comment">// 雪碧图设置</span></span><br><span class="line">    <span class="hljs-keyword">new</span> SpritesmithPlugin(&#123;</span><br><span class="line">      src: &#123;</span><br><span class="line">        cwd: path.resolve(__dirname, <span class="hljs-string">'../src/assets/icons'</span>), <span class="hljs-comment">// 图标根路径</span></span><br><span class="line">        glob: <span class="hljs-string">'*.png'</span> <span class="hljs-comment">// 匹配任意 png 图标</span></span><br><span class="line">      &#125;,</span><br><span class="line">      target: &#123;</span><br><span class="line">        image: path.resolve(__dirname, <span class="hljs-string">'../src/sprites/sprites.png'</span>), <span class="hljs-comment">// 生成雪碧图目标路径与名称</span></span><br><span class="line">        <span class="hljs-comment">// 设置生成CSS背景及其定位的文件或方式</span></span><br><span class="line">        css: [</span><br><span class="line">          [</span><br><span class="line">            path.resolve(__dirname, <span class="hljs-string">'../src/sprites/sprites.css'</span>),</span><br><span class="line">            &#123; <span class="hljs-attr">format</span>: <span class="hljs-string">'function_based_template'</span> &#125;</span><br><span class="line">          ],</span><br><span class="line">          [</span><br><span class="line">            path.resolve(__dirname, <span class="hljs-string">'../src/sprites/_sprites.scss'</span>),</span><br><span class="line">            &#123; <span class="hljs-attr">format</span>: <span class="hljs-string">'handlebars_based_template'</span> &#125;</span><br><span class="line">          ],</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      customTemplates: &#123;</span><br><span class="line">        <span class="hljs-string">'function_based_template'</span>: utils.cssTemplateFunction,</span><br><span class="line">        <span class="hljs-string">'handlebars_based_template'</span>: utils.scssTemplateFunction</span><br><span class="line">      &#125;,</span><br><span class="line">      apiOptions: &#123;</span><br><span class="line">        cssImageRef: <span class="hljs-string">"~sprites.png"</span>, <span class="hljs-comment">// css文件中引用雪碧图的相对位置路径配置</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="hljs-comment">// retina: '@2x',</span></span><br><span class="line">      spritesmithOptions: &#123;</span><br><span class="line">        padding: <span class="hljs-number">8</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="hljs-comment">// When set to true will console.log list of created files.</span></span><br><span class="line">      logCreatedFiles: <span class="hljs-literal">true</span></span><br><span class="line">    &#125;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="3-修改utils-js"><a href="#3-修改utils-js" class="headerlink" title="3.修改utils.js"></a>3.修改<code>utils.js</code></h3><blockquote><p>打包中使用<code>webpack-spritesmith</code>插件使用自定义生成css/scss文件的模版方法</p></blockquote><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">exports.cssTemplateFunction = <span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> shared = <span class="hljs-string">'.icon &#123; background-image: url(I); &#125;'</span></span><br><span class="line">      .replace(<span class="hljs-string">'I'</span>, data.sprites[<span class="hljs-number">0</span>].image);</span><br><span class="line">  <span class="hljs-comment">// 注意：此处默认图标使用的是二倍图</span></span><br><span class="line">  <span class="hljs-keyword">const</span> perSprite = data.sprites.map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">sprite</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-comment">// background-size: SWpx SHpx;</span></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-string">'.icon-N &#123; width: Wpx; height: Hpx; background-position: Xpx Ypx;&#125;'</span></span><br><span class="line">    <span class="hljs-comment">// return '.icon-N &#123; width: SWpx; height: SHpx; background-position: Xpx Ypx;&#125;\n.icon-N .icon, .icon-N.icon &#123; width: Wpx; height: Hpx; background-position: Xpx Ypx; &#125; '</span></span><br><span class="line">      .replace(<span class="hljs-regexp">/N/g</span>, sprite.name)</span><br><span class="line">      .replace(<span class="hljs-regexp">/SW/g</span>, sprite.width / <span class="hljs-number">2</span>)</span><br><span class="line">      .replace(<span class="hljs-regexp">/SH/g</span>, sprite.height / <span class="hljs-number">2</span>)</span><br><span class="line">      .replace(<span class="hljs-regexp">/W/g</span>, sprite.width)</span><br><span class="line">      .replace(<span class="hljs-regexp">/H/g</span>, sprite.height)</span><br><span class="line">      .replace(<span class="hljs-regexp">/X/g</span>, sprite.offset_x)</span><br><span class="line">      .replace(<span class="hljs-regexp">/Y/g</span>, sprite.offset_y);</span><br><span class="line">  &#125;).join(<span class="hljs-string">'\n'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> shared + <span class="hljs-string">'\n'</span> + perSprite;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">exports.scssTemplateFunction = <span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-comment">// console.log(data, '==========', data.spritesheet)</span></span><br><span class="line">  <span class="hljs-keyword">const</span> mixs = <span class="hljs-string">`$screen:750;</span></span><br><span class="line"><span class="hljs-string">                @function px2rem($px) &#123;</span></span><br><span class="line"><span class="hljs-string">                  @return #&#123;$px/($screen/10)&#125;rem</span></span><br><span class="line"><span class="hljs-string">                &#125;`</span></span><br><span class="line">  <span class="hljs-keyword">const</span> shared = <span class="hljs-string">'.icon &#123; background-image: url(I); background-size: px2rem\(W\) px2rem\(H\);&#125;'</span></span><br><span class="line">      .replace(<span class="hljs-string">'I'</span>, data.sprites[<span class="hljs-number">0</span>].image)</span><br><span class="line">      .replace(<span class="hljs-regexp">/W/g</span>, data.spritesheet.width)</span><br><span class="line">      .replace(<span class="hljs-regexp">/H/g</span>, data.spritesheet.height)</span><br><span class="line">  <span class="hljs-comment">// 注意：此处默认图标使用的是二倍图</span></span><br><span class="line">  <span class="hljs-keyword">const</span> perSprite = data.sprites.map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">sprite</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-string">'.icon-N &#123; width: px2rem\(W\); height: px2rem\(H\); background-position: px2rem\(X\) px2rem\(Y\);&#125; '</span></span><br><span class="line">      .replace(<span class="hljs-regexp">/N/g</span>, sprite.name)</span><br><span class="line">      .replace(<span class="hljs-regexp">/SW/g</span>, sprite.width / <span class="hljs-number">2</span>)</span><br><span class="line">      .replace(<span class="hljs-regexp">/SH/g</span>, sprite.height / <span class="hljs-number">2</span>)</span><br><span class="line">      .replace(<span class="hljs-regexp">/W/g</span>, sprite.width)</span><br><span class="line">      .replace(<span class="hljs-regexp">/H/g</span>, sprite.height)</span><br><span class="line">      .replace(<span class="hljs-regexp">/X/g</span>, sprite.offset_x)</span><br><span class="line">      .replace(<span class="hljs-regexp">/Y/g</span>, sprite.offset_y);</span><br><span class="line">  &#125;).join(<span class="hljs-string">'\n'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> mixs + <span class="hljs-string">'\n'</span> + shared + <span class="hljs-string">'\n'</span> + perSprite;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>参考</p><ul><li><a href="https://github.com/HaoyCn/postcss-sprite-property" target="_blank" rel="noopener">雪碧图处理工具</a></li><li><a href="https://github.com/mixtur/webpack-spritesmith" target="_blank" rel="noopener">webpack-spritesmith github</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目开发设计师没有提供svg或者icon-font，只能使用图片，过多的小图片造成资源浪费，解决方案：webpack打包将多个图标合成雪碧图&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;需要同时配置开发环境和线上环境的webpack配置&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;webpack-spritesmith&lt;/code&gt; 合成雪碧图插件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file-loader&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="webpack" scheme="http://wangytbest.github.io/categories/webpack/"/>
    
    
      <category term="webpack" scheme="http://wangytbest.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>externals外部扩展理解</title>
    <link href="http://wangytbest.github.io/2019/04/09/externals%E5%A4%96%E9%83%A8%E6%89%A9%E5%B1%95%E7%90%86%E8%A7%A3/"/>
    <id>http://wangytbest.github.io/2019/04/09/externals外部扩展理解/</id>
    <published>2019-04-09T08:00:44.000Z</published>
    <updated>2019-04-09T08:01:31.290Z</updated>
    
    <content type="html"><![CDATA[<p>如果我们想引用一个库，但是又不想让webpack打包，并且又不影响我们在程序中以CMD、AMD或者window/global全局等方式进行使用，那就可以通过配置externals。</p><a id="more"></a><p><code>externals</code> 配置选项提供从输出的<code>bundle</code>中排除依赖</p><blockquote><ul><li><p>可以解决<code>npm run build</code>打包后<code>vender.js</code>文件过大的问题</p></li><li><p>防止将某些<code>import</code>的包（package）打包到bundle（vue-cli2默认输出文件名为<code>vender.js</code>）中，而是运行时再从外部获取这些扩展依赖（external dependencies）,如第三方类库。</p></li></ul></blockquote><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><blockquote><p><code>string</code> <code>array</code> <code>object</code> <code>function</code> <code>regex</code></p></blockquote><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><blockquote><p>配置externals，这样就剥离了那些不需要改动的依赖，不再把这些类库一起打包</p></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// webpack.config.js</span><br><span class="line">modules.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">    externals: &#123;</span><br><span class="line">        &apos;jquery&apos;: &apos;jQuery&apos;,</span><br><span class="line">        &apos;vue&apos;: &apos;Vue&apos;,</span><br><span class="line">        &apos;vue-router&apos;: &apos;VueRouter&apos;,</span><br><span class="line">        &apos;vuex&apos;: &apos;Vuex&apos;,</span><br><span class="line">        lodash : &#123;</span><br><span class="line">            commonjs: &apos;lodash&apos;,</span><br><span class="line">            amd: &apos;lodash&apos;,</span><br><span class="line">            root: &apos;_&apos; // 指向全局变量</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种方式描述了外部library所有可用的访问方式。这里<code>loadsh</code>这个外部的library可以在<code>AMD</code>和<code>CommonJS</code>模块系统中通过<code>loadsh</code>访问。但在<code>全局变量</code>形式下用<code>_</code>访问。</p><p>剥离第三方依赖，需要在<code>index.html</code>中引入<br><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"http://storage.jd.com/campus-inviting/vue.min.js"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"http://storage.jd.com/campus-inviting/vue-router.min.js"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"http://storage.jd.com/campus-inviting/vuex.min.js"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><a href="https://segmentfault.com/a/1190000012113011" target="_blank" rel="noopener">webpack externals 深入理解</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果我们想引用一个库，但是又不想让webpack打包，并且又不影响我们在程序中以CMD、AMD或者window/global全局等方式进行使用，那就可以通过配置externals。&lt;/p&gt;
    
    </summary>
    
      <category term="webpack" scheme="http://wangytbest.github.io/categories/webpack/"/>
    
    
      <category term="webpack" scheme="http://wangytbest.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>cache-control缓存</title>
    <link href="http://wangytbest.github.io/2019/04/09/cache-control%E7%BC%93%E5%AD%98/"/>
    <id>http://wangytbest.github.io/2019/04/09/cache-control缓存/</id>
    <published>2019-04-09T07:53:46.000Z</published>
    <updated>2019-04-09T07:54:19.603Z</updated>
    
    <content type="html"><![CDATA[<p><code>Cache-Control</code>指定了请求和响应遵循的缓存机制。好的缓存机制可以减少对网络带宽的占用，可以提高访问速度，提高用户的体验，还可以减轻服务器的负担。</p><a id="more"></a><h3 id="Cache-Control值类型"><a href="#Cache-Control值类型" class="headerlink" title="Cache-Control值类型"></a>Cache-Control值类型</h3><h4 id="1-请求Request："><a href="#1-请求Request：" class="headerlink" title="(1) 请求Request："></a>(1) 请求Request：</h4><ul><li><code>no-cache</code> 不要读取缓存中的文件，要求向WEB服务器重新请求</li><li><code>no-store</code> 请求和响应都禁止被缓存</li><li><code>max-age</code> 表示当访问此网页后的<code>max-age</code>秒内再次访问不会去服务器请求，其功能与<code>Expires</code>类似，只是<code>Expires</code>是根据某个特定日期值做比较。一但缓存者自身的时间不准确.则结果可能就是错误的，而<code>max-age</code>显然无此问题。<blockquote><p>Max-age的优先级也是高于Expires的。</p></blockquote></li><li><code>max-stale</code> 允许读取过期时间必须小于<code>max-stale</code>值的缓存对象。</li><li><code>min-fresh</code> 接受其<code>max-age</code>生命期大于其当前时间跟<code>min-fresh</code>值之和的缓存对象<code>only-if-cached</code>告知缓存者,我希望内容来自缓存，我并不关心被缓存响应,是否是新鲜的.</li><li><code>no-transform</code> 告知代理,不要更改媒体类型,比如jpg,被你改成png.</li></ul><h4 id="2-响应Response："><a href="#2-响应Response：" class="headerlink" title="(2) 响应Response："></a>(2) 响应Response：</h4><ul><li><code>public</code> 数据内容皆被储存起来，就连有密码保护的网页也储存，安全性很低</li><li><code>private</code> 数据内容只能被储存到私有的cache，仅对某个用户有效，不能共享</li><li><code>no-cache</code> 可以缓存，但是只有在跟WEB服务器验证了其有效后，才能返回给客户端</li><li><code>no-store</code> 请求和响应都禁止被缓存</li><li><code>max-age</code> 本响应包含的对象的过期时间</li><li><code>Must-revalidate</code> 如果缓存过期了，会再次和原来的服务器确定是否为最新数据，而不是和中间的proxy</li><li><code>max-stale</code> 允许读取过期时间必须小于max-stale 值的缓存对象。</li><li><code>proxy-revalidate</code>与Must-revalidate类似，区别在于：proxy-revalidate要排除掉用户代理的缓存的。即其规则并不应用于用户代理的本地缓存上。<br>-maxage 与max-age的唯一区别是,s-maxage仅仅应用于共享缓存.而不应用于用户代理的本地缓存等针对单用户的缓存. 另外,s-maxage的优先级要高于max-age.</li><li><code>no-transform</code> 告知代理,不要更改媒体类型,比如jpg,被你改成png.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Cache-Control&lt;/code&gt;指定了请求和响应遵循的缓存机制。好的缓存机制可以减少对网络带宽的占用，可以提高访问速度，提高用户的体验，还可以减轻服务器的负担。&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://wangytbest.github.io/categories/Javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>圣杯布局（双飞翼布局）</title>
    <link href="http://wangytbest.github.io/2019/04/09/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80%EF%BC%88%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80%EF%BC%89/"/>
    <id>http://wangytbest.github.io/2019/04/09/圣杯布局（双飞翼布局）/</id>
    <published>2019-04-09T07:52:50.000Z</published>
    <updated>2019-04-09T10:07:25.638Z</updated>
    
    <content type="html"><![CDATA[<h2 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h2><p>圣杯布局与双飞翼布局针对的都是三列左右栏固定中间栏边框自适应的网页布局</p><ul><li>三列布局，两边固定宽度，中间自适应</li><li>中间栏要在浏览器优先渲染<br>  <strong>main元素必须是container的第一个元素</strong></li><li>允许任意列的高度最高</li></ul><a id="more"></a><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span></span><br><span class="line">    <span class="hljs-comment">&lt;!--中间栏需要优先渲染--&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"main"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"left"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"right"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1、相对布局"><a href="#1、相对布局" class="headerlink" title="1、相对布局"></a>1、相对布局</h3><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.container</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="line">    <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="hljs-attribute">min-height</span>: <span class="hljs-number">300px</span>;</span><br><span class="line">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">60px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.container</span> &gt; <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">position</span>: relative;</span><br><span class="line">    <span class="hljs-attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.left</span>, <span class="hljs-selector-class">.right</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">width</span>: <span class="hljs-number">60px</span>;</span><br><span class="line">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.left</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">left</span>: -<span class="hljs-number">60px</span>;</span><br><span class="line">    <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.right</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-attribute">margin-right</span>: -<span class="hljs-number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.main</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="line">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、flex布局"><a href="#2、flex布局" class="headerlink" title="2、flex布局"></a>2、flex布局</h3><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.container</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="line">    <span class="hljs-attribute">min-height</span>: <span class="hljs-number">300px</span>;</span><br><span class="line">    <span class="hljs-attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-class">.main</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">flex-grow</span>: <span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-class">.left</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">order</span>: -<span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-attribute">flex-basis</span>: <span class="hljs-number">60px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-class">.right</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">flex-basis</span>: <span class="hljs-number">60px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、绝对布局"><a href="#3、绝对布局" class="headerlink" title="3、绝对布局"></a>3、绝对布局</h3><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.container</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="line">    <span class="hljs-attribute">min-height</span>: <span class="hljs-number">300px</span>;</span><br><span class="line">    <span class="hljs-attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-class">.container</span> &gt; <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-class">.left</span>, <span class="hljs-selector-class">.right</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">width</span>: <span class="hljs-number">60px</span>;</span><br><span class="line">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-class">.main</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">width</span>: <span class="hljs-built_in">calc</span>(100% - 120px);</span><br><span class="line">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="line">    <span class="hljs-attribute">left</span>: <span class="hljs-number">60px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-class">.left</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-selector-class">.right</span> &#123;</span><br><span class="line">    <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;圣杯布局&quot;&gt;&lt;a href=&quot;#圣杯布局&quot; class=&quot;headerlink&quot; title=&quot;圣杯布局&quot;&gt;&lt;/a&gt;圣杯布局&lt;/h2&gt;&lt;p&gt;圣杯布局与双飞翼布局针对的都是三列左右栏固定中间栏边框自适应的网页布局&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;三列布局，两边固定宽度，中间自适应&lt;/li&gt;
&lt;li&gt;中间栏要在浏览器优先渲染&lt;br&gt;  &lt;strong&gt;main元素必须是container的第一个元素&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;允许任意列的高度最高&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://wangytbest.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://wangytbest.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>BFC块级格式化上下文</title>
    <link href="http://wangytbest.github.io/2019/04/09/BFC%E5%9D%97%E7%BA%A7%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
    <id>http://wangytbest.github.io/2019/04/09/BFC块级格式化上下文/</id>
    <published>2019-04-09T07:51:52.000Z</published>
    <updated>2019-04-11T10:53:43.640Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BFC（Block-Formating-Context）"><a href="#BFC（Block-Formating-Context）" class="headerlink" title="BFC（Block Formating Context）"></a>BFC（Block Formating Context）</h2><blockquote><p>块级格式化上下文：一个独立的渲染区域，只有 <code>Block-level box</code> 参与，它内部规定了 <code>Block-level box</code> 如何布局，并且与这个区域外部毫不相干。</p></blockquote><p>BFC是Web页面的可视化CSS渲染的一部分，并且有自身的一套渲染规则，它决定了其子元素如何定位，以及和其他元素的关系和相互作用。</p><a id="more"></a><h2 id="CSS有三种基本定位机制"><a href="#CSS有三种基本定位机制" class="headerlink" title="CSS有三种基本定位机制"></a>CSS有三种基本定位机制</h2><ul><li>普通流(或称常规流)：CSS默认的定位方式，触发方式包括为 <code>position: static | relative</code> ，且 <code>float:none</code></li><li>浮动：浮动脱离普通流，可以左右移动，直到它的外边框边缘碰到包含框或另一个浮动框的边缘，触发方式基本就是 <code>float:left | top</code>等。可以通过 <code>position: relative</code> 设置其 <code>top、left</code> 等属性(先进行浮动，在进行位置偏移)。</li><li>绝对定位：盒子脱离普通流，不影响普通流上其他元素的布局，设置float无效。</li></ul><h2 id="BFC-概念"><a href="#BFC-概念" class="headerlink" title="BFC 概念"></a>BFC 概念</h2><p>BFC即Block Formatting Content（块级格式上下文），它属于上述定位方案的普通流。具有BFC特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且BFC具有普通容器所没有的一些特性。</p><h4 id="BFC布局规则"><a href="#BFC布局规则" class="headerlink" title="BFC布局规则"></a>BFC布局规则</h4><p>具有 BFC 特性的元素可以看成是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且BFC具有普通容器所没有的一些特性。</p><ul><li>内部<code>Box</code>会在垂直方向上一个接一个的放置</li><li><code>Box</code>垂直方向的距离由<code>margin</code>决定。属于同一个<code>BFC</code>的两个相邻<code>Box</code>的<code>margin</code>会合并</li><li>每个元素的<code>margin box</code>的左边，与包含块<code>border box</code>的左边相接触</li><li><code>BFC</code>的区域不会与<code>float box</code>重叠</li><li><code>BFC</code>是一个独立的容器，里面的子元素不会影响到外面的元素，反之亦然</li><li>计算<code>BFC</code>的高度的时候，浮动元素也参与计算</li></ul><h4 id="生成BFC"><a href="#生成BFC" class="headerlink" title="生成BFC"></a>生成BFC</h4><ul><li>根元素</li><li><code>float</code>属性不为<code>none</code></li><li>绝对定位元素（<code>absolute</code>, <code>fixed</code>）</li><li><code>display</code>为<code>inline-block</code>,<code>table-cell</code>,<code>table-caption</code>,<code>flex</code>, <code>grid</code></li><li><code>overflow</code>不为<code>visible</code></li><li><code>flex</code></li><li><code>grid</code></li></ul><h4 id="BFC作用"><a href="#BFC作用" class="headerlink" title="BFC作用"></a>BFC作用</h4><ol><li>自适应两栏布局</li><li>可以阻止元素被浮动元素覆盖</li></ol><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"style/css"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-undefined">.container &#123;</span></span><br><span class="line"><span class="hljs-undefined">  position: relative;</span></span><br><span class="line"><span class="hljs-undefined">&#125;</span></span><br><span class="line"><span class="hljs-undefined">.aside &#123;</span></span><br><span class="line"><span class="hljs-undefined">  width: 100px;</span></span><br><span class="line"><span class="hljs-undefined">  height: 150px;</span></span><br><span class="line"><span class="hljs-undefined">  float: left;</span></span><br><span class="line"><span class="hljs-undefined">  background: #f66;</span></span><br><span class="line"><span class="hljs-undefined">&#125;</span></span><br><span class="line"><span class="hljs-undefined">.main &#123;</span></span><br><span class="line"><span class="hljs-undefined">  height: 200px;</span></span><br><span class="line"><span class="hljs-undefined">  background: #fcc;</span></span><br><span class="line"><span class="hljs-undefined">  overflow: hidden;</span></span><br><span class="line"><span class="hljs-undefined">&#125;</span></span><br><span class="line"><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"aside"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"main"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>main</code> 节点如果不设置为 <code>BFC</code> ，那么根据规则每个元素的 <code>margin box</code> 的左边，与包含块 <code>border box</code> 的左边相接触, <code>main</code> 将会被 <code>aside</code> 覆盖。通过 <code>overflow:hidden</code> 设置为 <code>BFC</code> ， <code>BFC</code> 区域不会和 <code>float box</code> 重叠。</p><script async src="//jsfiddle.net/wangyutao/tsxvwjh1/15/embed/html,css,result/"></script><ol start="3"><li>可以包含浮动元素——清除内部浮动</li></ol><p>包含浮动元素的父元素，设置 <code>overflow: auto</code> 创建一个新的BFC来包含这个浮动。父元素现在变成布局中的迷你布局，任何子元素都会被包含进去。</p><script async src="//jsfiddle.net/wangyutao/8dm7apts/embed/html,css,result/"></script><blockquote><p>面试题：为什会内容环绕呢，而不是跟浮动元素重合呢？<br>《CSS权威指南》中指出，浮动的目的，最初只能用于图像，目的就是为了允许其他内容（如文本）“围绕”该图像。而后来的CSS允许浮动任何元素。</p></blockquote><ol start="4"><li>分属于不同的BFC时可以阻止margin重叠<br>外边距塌陷: 创建新的BFC避免两个相邻<code>&lt;div&gt;</code>之间的外边距合并</li></ol><h2 id="外边距塌陷"><a href="#外边距塌陷" class="headerlink" title="外边距塌陷"></a>外边距塌陷</h2><blockquote><p>外边距折叠：块级元素的上外边距和下外边距有时会合并（或折叠）为一个外边距，其大小取其中的最大者。</p></blockquote><p><strong>注意浮动元素和绝对定位元素的外边距不会折叠</strong>。</p><h4 id="外边距折叠的三种基本情况"><a href="#外边距折叠的三种基本情况" class="headerlink" title="外边距折叠的三种基本情况"></a>外边距折叠的三种基本情况</h4><h5 id="1-相邻元素之间"><a href="#1-相邻元素之间" class="headerlink" title="1. 相邻元素之间"></a>1. 相邻元素之间</h5><p>毗邻的两个元素之间的外边距会折叠（除非后一个元素需要清除之前的浮动）。</p><h5 id="2-父元素与其第一个或最后一个子元素之间"><a href="#2-父元素与其第一个或最后一个子元素之间" class="headerlink" title="2. 父元素与其第一个或最后一个子元素之间"></a>2. 父元素与其第一个或最后一个子元素之间</h5><p>如果在父元素与其第一个子元素之间不存在边框、内边距、行内内容，也没有创建块格式化上下文、或者清除浮动将两者的<code>margin-top</code>分开；或者在父元素与其最后一个子元素之间不存在边框、内边距、行内内容、<code>height</code>、<code>min-height</code>、<code>max-height</code>将两者的<code>margin-bottom</code>分开，那么这两对外边距之间会产生折叠。此时子元素的外边距会“溢出”到父元素的外面。</p><h5 id="3-空的块级元素"><a href="#3-空的块级元素" class="headerlink" title="3.空的块级元素"></a>3.空的块级元素</h5><p>如果一个块级元素中不包含任何内容，并且在其<code>margin-top</code>与<code>margin-bottom</code> 之间没有边框、内边距、行内内容、<code>height</code>、<code>min-height</code>将两者分开，则该元素的上下外边距会折叠。</p><h4 id="一些需要注意的地方："><a href="#一些需要注意的地方：" class="headerlink" title="一些需要注意的地方："></a>一些需要注意的地方：</h4><ul><li>上述情况的组合会产生更复杂的外边距折叠。</li><li>即使某一外边距为0，这些规则仍然适用。因此就算父元素的外边距是0，第* 一个或最后一个子元素的外边距仍然会“溢出”到父元素的外面。</li><li>如果参与折叠的外边距中包含负值，折叠后的外边距的值为最大的正边距与最小的负边距（即绝对值最大的负边距）的和。</li><li>如果所有参与折叠的外边距都为负，折叠后的外边距的值为最小的负边距的值。这一规则适用于相邻元素和嵌套元素。</li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context" target="_blank" rel="noopener">MDN: BFC 块级格式化上下文</a><br><a href="https://www.smashingmagazine.com/2017/12/understanding-css-layout-block-formatting-context/" target="_blank" rel="noopener">Understanding CSS Layout And The Block Formatting Context</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;BFC（Block-Formating-Context）&quot;&gt;&lt;a href=&quot;#BFC（Block-Formating-Context）&quot; class=&quot;headerlink&quot; title=&quot;BFC（Block Formating Context）&quot;&gt;&lt;/a&gt;BFC（Block Formating Context）&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;块级格式化上下文：一个独立的渲染区域，只有 &lt;code&gt;Block-level box&lt;/code&gt; 参与，它内部规定了 &lt;code&gt;Block-level box&lt;/code&gt; 如何布局，并且与这个区域外部毫不相干。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;BFC是Web页面的可视化CSS渲染的一部分，并且有自身的一套渲染规则，它决定了其子元素如何定位，以及和其他元素的关系和相互作用。&lt;/p&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://wangytbest.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://wangytbest.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>跨域</title>
    <link href="http://wangytbest.github.io/2019/04/09/%E8%B7%A8%E5%9F%9F/"/>
    <id>http://wangytbest.github.io/2019/04/09/跨域/</id>
    <published>2019-04-09T07:40:08.000Z</published>
    <updated>2019-05-08T09:07:09.907Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是跨域？"><a href="#什么是跨域？" class="headerlink" title="什么是跨域？"></a>什么是跨域？</h2><p>跨域是指一个域下的文档或脚本试图去请求另一个域下的资源，这里跨域是广义的。</p><a id="more"></a><p>广义的跨域：</p><ol><li>资源跳转： A链接、重定向、表单提交</li><li>资源嵌入： <code>&lt;link&gt;</code>、<code>&lt;script&gt;</code>、<code>&lt;img&gt;</code>、<code>&lt;frame&gt;</code>等dom标签，还有样式中<code>background:url()</code>、<code>@font-face()</code>等文件外链</li><li>脚本请求： js发起的ajax请求、dom和js对象的跨域操作等<br>其实我们通常所说的跨域是狭义的，是由浏览器同源策略限制的一类请求场景。</li></ol><h2 id="什么是同源策略？"><a href="#什么是同源策略？" class="headerlink" title="什么是同源策略？"></a>什么是同源策略？</h2><p>同源策略/SOP（Same origin policy）是指<strong>协议+域名+端口</strong>三者相同，即便两个不同的域名指向同一个ip地址，也非同源。如果缺少了同源策略，<strong>浏览器很容易受到XSS、CSFR等攻击</strong>。</p><p>同源策略限制以下几种行为：</p><ol><li>Cookie、LocalStorage 和 IndexDB 无法读取</li><li>DOM 和 JS 对象无法获得</li><li>AJAX 请求不能发送</li></ol><h2 id="跨域请求方案"><a href="#跨域请求方案" class="headerlink" title="跨域请求方案"></a>跨域请求方案</h2><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><blockquote><p>利用 <code>&lt;script&gt;</code> 标签没有跨域限制。</p></blockquote><p>优点：</p><ul><li>兼容性好</li></ul><p>缺点：</p><ul><li>只能用于<code>get</code> 请求</li></ul><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">jsonp</span>(<span class="hljs-params">url, jsonpCallback, success</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> script = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'script'</span>)</span><br><span class="line">  script.src = url</span><br><span class="line">  script.async = <span class="hljs-literal">true</span></span><br><span class="line">  script.type = <span class="hljs-string">'text/javascript'</span></span><br><span class="line">  <span class="hljs-built_in">window</span>[jsonpCallback] = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) </span>&#123;</span><br><span class="line">    success &amp;&amp; success(data)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-built_in">document</span>.body.appendChild(script)</span><br><span class="line">&#125;</span><br><span class="line">jsonp(<span class="hljs-string">'http://xxx'</span>, <span class="hljs-string">'callback'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(value)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><blockquote><p>CORS（跨域资源共享）：服务端设置请求头<code>Access-Control-Allow-Origin</code></p></blockquote><p>CORS请求分为两类：</p><ul><li>简单请求</li><li>非简单请求</li></ul><h4 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h4><ol><li><p>请求方法（其中一种）： </p><ul><li>GET</li><li>POST </li><li>HEAD</li></ul></li><li><p>请求头部（只允许有以下头部）： </p><ul><li>Accept</li><li>Accept-Content</li><li>Content-Language</li><li>Content-Type：application/x-www-form-urlencoded、multipart/form-data、text/plain</li></ul></li></ol><p>对于简单请求，浏览器直接发出CORS请求，在头信息之中，增加一个<code>Origin</code>字段。<code>Origin</code> 字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求。</p><ul><li>如果 <code>Origin</code> 指定的源不在许可范围内，服务器会返回一个<strong>正常的 <code>HTTP</code> 回应</strong>。浏览器发现这个回应的头信息没有包含 <code>Access-Control-Allow-Origin</code> 字段，就知道出错了，从而抛出一个错误，被 <code>XMLHttpRequest</code> 的 <code>onerror</code> 回调函数捕获。注意，这种错误无法通过状态码识别，因为 HTTP 回应的状态码有可能是 200。</li><li>如果 <code>Origin</code> 指定的域名在许可范围内，服务器返回的响应，会多出几个头信息字段。<figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin: http:<span class="hljs-comment">//api.bob.com</span></span><br><span class="line">Access-Control-Allow-Credentials: <span class="hljs-literal">true</span></span><br><span class="line">Access-Control-Expose-Headers: FooBar</span><br></pre></td></tr></table></figure></li></ul><p>上面的头信息之中，有三个与CORS请求相关的字段，都以<code>Access-Control-</code>开头。</p><ol><li><p><code>Access-Control-Allow-Origin</code></p><p> 该字段是必须的。它的值要么是请求时 Origin 字段的值，要么是一个*，表示接受任意域名的请求。</p></li><li><p><code>Access-Control-Allow-Credentials</code></p><p> 该字段可选。它的值是一个布尔值，表示<strong>是否允许发送 <code>Cookie</code></strong> 。默认情况下，Cookie 不包括在 CORS 请求之中。设为 true ，即表示服务器明确许可 Cookie 可以包含在请求中一起发给服务器。这个值也只能设为false ，如果服务器不要浏览器发送Cookie，删除该字段即可。</p></li><li><p><code>Access-Control-Expose-Headers</code></p><p> 该字段可选。CORS请求时，XMLHttpRequest对象的 <code>getResponseHeader()</code> 方法只能拿到6个基本字段：<code>Cache-Control</code>、<code>Content-Language</code>、<code>Content-Type</code>、<code>Expires</code>、<code>Last-Modified</code>、<code>Pragma</code>。如果想拿到其他字段，就必须在 <code>Access-Control-Expose-Headers</code> 里面指定。上面的例子指定，<code>getResponseHeader(&#39;FooBar&#39;)</code> 可以返回FooBar字段的值。</p></li></ol><p>withCredentials 属性</p><p><em><code>CORS</code> 请求默认不发送 <code>Cookie</code> 和<code>HTTP认证信息</code></em>。如果要把 Cookie 发到服务器，一方面要服务器同意，指 <code>Access-Control-Allow-Credentials</code> 字段 ( <code>Access-Control-Allow-Credentials: true</code>) 。 另一方面，开发者必须在 <code>AJAX</code> 请求中打开 <code>withCredentials</code> 属性。否则，即使服务器同意发送 Cookie ，浏览器也不会发送，或者服务器要求设置Cookie，浏览器也不会处理。<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.withCredentials = <span class="hljs-literal">true</span>;</span><br></pre></td></tr></table></figure></p><p>需要注意的是，如果要发送Cookie，<code>Access-Control-Allow-Origin</code> 就不能设为星号，必须指定明确的、与请求网页一致的域名。同时，Cookie依然遵循同源政策，只有用服务器域名设置的 Cookie 才会上传，其他域名的Cookie 并不会上传，且（跨源）原网页代码中的 document.cookie 也无法读取服务器域名下的 Cookie 。</p><h3 id="非简单请求"><a href="#非简单请求" class="headerlink" title="非简单请求"></a>非简单请求</h3><blockquote><p>非简单请求是那种对服务器有特殊要求的请求，比如请求方法是 <code>PUT</code> 或 <code>DELETE</code> ，或者 <code>Content-Type</code> 字段的类型是 <code>application/json</code> 。(<strong>除简单请求就是非简单请求</strong>)</p></blockquote><p>浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些HTTP动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的 <code>XMLHttpRequest</code> 请求，否则就报错。</p><p>下面是一段浏览器的JavaScript脚本。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> url = <span class="hljs-string">'http://api.alice.com/cors'</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="hljs-string">'PUT'</span>, url, <span class="hljs-literal">true</span>);</span><br><span class="line">xhr.setRequestHeader(<span class="hljs-string">'X-Custom-Header'</span>, <span class="hljs-string">'value'</span>);</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure><p>上面代码中，HTTP 请求的方法是 PUT ，并且发送一个自定义头信息 <code>X-Custom-Header</code> 。</p><p>浏览器发现，这是一个<strong>非简单请求</strong>，就自动发出一个 <code>预检请求</code> ，要求服务器确认可以这样请求。下面是这个”预检”请求的HTTP头信息。</p><p>预检请求用的请求方法是 <code>OPTIONS</code> ，表示这个请求是用来询问的。头信息里面，关键字段是 <code>Origin</code> ，表示请求来自哪个源。</p><p>除了 <code>Origin</code> 字段，”预检”请求的头信息包括两个特殊字段。</p><ol><li><code>Access-Control-Request-Method</code> 该字段是必须的，用来列出浏览器的CORS请求会用到哪些HTTP方法，上例是PUT。</li><li><code>Access-Control-Request-Headers</code> 该字段是一个逗号分隔的字符串，指定浏览器CORS请求会额外发送的头信息字段，上例是X-Custom-Header。</li></ol><p><strong>预检请求的回应</strong></p><p>服务器收到”预检”请求以后，检查了 <code>Origin</code>、<code>Access-Control-Request-Method</code>和<code>Access-Control-Request-Headers</code> 字段以后，确认允许跨源请求，就可以做出回应。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Mon, 01 Dec 2008 01:15:39 GMT</span><br><span class="line">Server: Apache/2.0.61 (Unix)</span><br><span class="line">Access-Control-Allow-Origin: http://api.bob.com</span><br><span class="line">Access-Control-Allow-Methods: GET, POST, PUT</span><br><span class="line">Access-Control-Allow-Headers: X-Custom-Header</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">Content-Encoding: gzip</span><br><span class="line">Content-Length: 0</span><br><span class="line">Keep-Alive: timeout=2, max=100</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Type: text/plain</span><br></pre></td></tr></table></figure><p>上面的HTTP回应中，关键的是 <code>Access-Control-Allow-Origin</code> 字段，表示<code>http://api.bob.com</code>可以请求数据。该字段也可以设为星号，表示同意任意跨源请求。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin: *</span><br></pre></td></tr></table></figure><p>如果浏览器否定了”预检”请求，会返回一个正常的HTTP回应，但是没有任何CORS相关的头信息字段。这时，浏览器就会认定，服务器不同意预检请求，因此触发一个错误，被XMLHttpRequest对象的onerror回调函数捕获。控制台会打印出如下的报错信息。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">XMLHttpRequest cannot load http://api.alice.com.</span><br><span class="line">Origin http://api.bob.com is not allowed by Access-Control-Allow-Origin.</span><br></pre></td></tr></table></figure><p>服务器回应的其他CORS相关字段如下。<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Methods: GET, POST, PUT</span><br><span class="line">Access-Control-Allow-Headers: X-Custom-Header</span><br><span class="line">Access-Control-Allow-Credentials: true</span><br><span class="line">Access-Control-Max-Age: 1728000</span><br></pre></td></tr></table></figure></p><ol><li><p>Access-Control-Allow-Methods</p><p> 该字段必需，它的值是逗号分隔的一个字符串，表明服务器支持的所有跨域请求的方法。注意，返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次”预检”请求。</p></li><li><p>Access-Control-Allow-Headers</p><p> 如果浏览器请求包括Access-Control-Request-Headers字段，则Access-Control-Allow-Headers字段是必需的。它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段，不限于浏览器在”预检”中请求的字段。</p></li><li><p>Access-Control-Allow-Credentials</p><p> 该字段与简单请求时的含义相同。</p></li><li><p>Access-Control-Max-Age</p><p> 该字段可选，用来指定本次预检请求的有效期，单位为秒。上面结果中，有效期是20天（1728000秒），即允许缓存该条回应1728000秒（即20天），在此期间，不用发出另一条预检请求。</p></li></ol><p><strong>浏览器的正常请求和回应</strong></p><p>一旦服务器通过了”预检”请求，以后每次浏览器正常的 <code>CORS</code> 请求，就都跟简单请求一样，会有一个Origin头信息字段。服务器的回应，也都会有一个 <code>Access-Control-Allow-Origin</code> 头信息字段。</p><p>下面是”预检”请求之后，浏览器的正常 <code>CORS</code> 请求。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PUT /cors HTTP/<span class="hljs-number">1.1</span></span><br><span class="line">Origin: http:<span class="hljs-comment">//api.bob.com</span></span><br><span class="line">Host: api.alice.com</span><br><span class="line">X-Custom-Header: value</span><br><span class="line">Accept-Language: en-US</span><br><span class="line">Connection: keep-alive</span><br><span class="line">User-Agent: Mozilla/<span class="hljs-number">5.0</span>...</span><br></pre></td></tr></table></figure><p>上面头信息的 <code>Origin</code> 字段是浏览器自动添加的。</p><p>下面是服务器正常的回应。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin: http://api.bob.com</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br></pre></td></tr></table></figure><p>上面头信息中，<code>Access-Control-Allow-Origin</code> 字段是每次回应都必定包含的。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是跨域？&quot;&gt;&lt;a href=&quot;#什么是跨域？&quot; class=&quot;headerlink&quot; title=&quot;什么是跨域？&quot;&gt;&lt;/a&gt;什么是跨域？&lt;/h2&gt;&lt;p&gt;跨域是指一个域下的文档或脚本试图去请求另一个域下的资源，这里跨域是广义的。&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://wangytbest.github.io/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="http://wangytbest.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>前端面试集（HTML+CSS）</title>
    <link href="http://wangytbest.github.io/2019/03/15/%E9%9D%A2%E8%AF%95%E4%B9%8BHTML/"/>
    <id>http://wangytbest.github.io/2019/03/15/面试之HTML/</id>
    <published>2019-03-15T08:46:10.000Z</published>
    <updated>2019-04-19T07:28:24.068Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-浏览器页面有哪三层构成，分别是什么，作用是什么"><a href="#1-浏览器页面有哪三层构成，分别是什么，作用是什么" class="headerlink" title="1. 浏览器页面有哪三层构成，分别是什么，作用是什么?"></a>1. 浏览器页面有哪三层构成，分别是什么，作用是什么?</h3><ul><li>构成：结构层、表示层、行为层</li><li>分别是：HTML、CSS、JavaScript</li><li>作用：HTML实现页面结构，CSS完成页面的表现与风格，JavaScript实现一些客户端的功能与业务。</li></ul><a id="more"></a><h4 id="2-HTML5的优点与缺点？"><a href="#2-HTML5的优点与缺点？" class="headerlink" title="2.HTML5的优点与缺点？"></a>2.HTML5的优点与缺点？</h4><p><strong>优点：</strong></p><ol><li>网络标准统一、HTML5本身是由W3C推荐出来的。</li><li>多设备、跨平台</li><li>即时更新。</li><li>提高可用性和改进用户的友好体验；</li><li>有几个新的标签，这将有助于开发人员定义重要的内容；</li><li>可以给站点带来更多的多媒体元素(视频和音频)；</li><li>可以很好的替代Flash和Silverlight；</li><li>涉及到网站的抓取和索引的时候，对于SEO很友好；</li><li>被大量应用于移动应用程序和游戏。</li></ol><p><strong>缺点：</strong></p><ol><li>安全：像之前Firefox4的web socket和透明代理的实现存在严重的安全问题，同时web storage、web socket 这样的功能很容易被黑客利用，来盗取用户的信息和资料。</li><li>完善性：许多特性各浏览器的支持程度也不一样。</li><li>技术门槛：HTML5简化开发者工作的同时代表了有许多新的属性和API需要开发者学习，像web worker、web socket、web storage 等新特性，后台甚至浏览器原理的知识，机遇的同时也是巨大的挑战</li><li>性能：某些平台上的引擎问题导致HTML5性能低下。</li><li>浏览器兼容性：最大缺点，IE9以下浏览器几乎全军覆没。</li></ol><h4 id="3-Doctype作用-严格模式与混杂模式如何区分？它们有何意义"><a href="#3-Doctype作用-严格模式与混杂模式如何区分？它们有何意义" class="headerlink" title="3.Doctype作用? 严格模式与混杂模式如何区分？它们有何意义?"></a>3.Doctype作用? 严格模式与混杂模式如何区分？它们有何意义?</h4><p><strong>作用</strong></p><ol><li>声明位于文档中的最前面，处于标签之前。告知浏览器的解析器，用什么文档类型 规范来解析这个文档。</li><li>严格模式的排版和JS 运作模式是以该浏览器支持的最高标准运行。</li><li>在混杂模式中，页面以宽松的向后兼容的方式显示。模拟老式浏览器的行为以防止站点无法工作。</li><li><code>DOCTYPE</code>不存在或格式不正确会导致文档以混杂模式呈现。</li></ol><p><strong>意义</strong> </p><blockquote><p><code>doctype</code>声明指出阅读程序应该用什么规则集来解释文档中的标记。在Web文档的情况下，“阅读程序”通常是浏览器或者校验器这样的一个程序，“规则”则是W3C所发布的一个文档类型定义（DTD）中包含的规则。</p></blockquote><ol><li>声明位于文档中的最前面的位置，处于标签之前。此标签可告知浏览器文档使用哪种 HTML 或 XHTML 规范。该标签可声明三种 DTD 类型，分别表示严格版本、过渡版本以及基于框架的HTML 文档。</li><li>所谓的标准模式是指，浏览器按 W3C 标准解析执行代码；怪异模式则是使用浏览器自己的方式解析执行代码，因为不同浏览器解析执行的方式不一样，所以我们称之为怪异模式。 严格模式是浏览器根据web标准去解析页面，是一种要求严格的DTD，不允许使用任何表现层的语法，如<br>。严格模式的排版和JS 运作模式是以该浏览器支持的最高标准运行混杂模式则是一种向后兼容的解析方法，说的透明点就是可以实现IE5.5以下版本浏览器的渲染模式。</li><li>浏览器解析时到底使用标准模式还是怪异模式，与你网页中的 DTD 声明直接相关， DTD 声明定义了标准文档的类型（标准模式解析）文档类型，会使浏览器使用相应的方式加载网页并显示，忽略 DTD 声明 ,将使网页进入怪异模式。</li></ol><h3 id="4-HTML5有哪些新特性、移除了哪些元素？"><a href="#4-HTML5有哪些新特性、移除了哪些元素？" class="headerlink" title="4.HTML5有哪些新特性、移除了哪些元素？"></a>4.HTML5有哪些新特性、移除了哪些元素？</h3><blockquote><p><code>Html5</code> <strong>新增了 <code>27</code>个元素，废弃了<code>16</code>个元素</strong>，根据现有的标准规范，把 <code>HTML5</code> 的元素按优先级定义为结构性属性、级块性元素、行内语义性元素和交互性元素 4 大类。</p><ol><li><strong>结构性元素主要负责web上下文结构的定义</strong></li></ol><ul><li><code>section</code>：在 web 页面应用中，该元素也可以用于区域的章节描述。</li><li><code>header</code>：页面主体上的头部， header 元素往往在一对 body 元素中。</li><li><code>footer</code>：页面的底部（页脚），通常会标出网站的相关信息。</li><li><code>nav</code>：专门用于菜单导航、链接导航的元素，是 navigator 的缩写。</li><li><code>article</code>：用于表现一篇文章的主体内容，一般为文字集中显示的区域。</li></ul><ol start="2"><li><strong>级块性元素主要完成web页面区域的划分，确保内容的有效分割</strong></li></ol><ul><li><code>aside</code>：用于表达注记、贴士、侧栏、摘要、插入的引用等作为补充主体的内容。</li><li><code>figure</code>：是对多个元素进行组合并展示的元素，通常与 ficaption 联合使用。</li><li><code>code</code>：表示一段代码块。</li><li><code>dialog</code>：用于表达人与人之间的对话，该元素包含 dt 和 dd 这两个组合元素， dt 用于表示说话者，而 dd 用来表示说话内容。<br>行内语义性元素主要完成web页面具体内容的引用和描述，是丰富内容展示的基础。</li><li><code>meter</code>：表示特定范围内的数值，可用于工资、数量、百分比等。</li><li><code>time</code>：表示时间值。</li><li><code>progress</code>：用来表示进度条，可通过对其 max 、 min 、 step 等属性进行控制，完成对进度的表示和监事。</li><li><code>video</code>：视频元素，用于支持和实现视频文件的直接播放，支持缓冲预载和多种视频媒体格式。</li><li><code>audio</code>：音频元素，用于支持和实现音频文件的直接播放，支持缓冲预载和多种音频媒体格式。<br>交互性元素主要用于功能性的内容表达，会有一定的内容和数据的关联，是各种事件的基础。</li><li><code>details</code>：用来表示一段具体的内容，但是内容默认可能不显示，通过某种手段（如单击）与 legend 交互才会显示出来。</li><li><code>datagrid</code>：用来控制客户端数据与显示，可以由动态脚本及时更新。</li><li><code>menu</code>：主要用于交互菜单（曾被废弃又被重新启用的元素）。</li><li><code>command</code>：用来处理命令按钮。</li></ul></blockquote><h3 id="5-你做的网页在哪些流览器测试过-这些浏览器的内核分别是什么"><a href="#5-你做的网页在哪些流览器测试过-这些浏览器的内核分别是什么" class="headerlink" title="5.你做的网页在哪些流览器测试过,这些浏览器的内核分别是什么?"></a>5.你做的网页在哪些流览器测试过,这些浏览器的内核分别是什么?</h3><ul><li>IE: <code>trident</code> 内核</li><li>Firefox: <code>gecko</code> 内核</li><li>Safari: <code>webkit</code> 内核</li><li>Opera: 以前是 presto 内核， Opera 现已改用 <code>Google Chrome</code> 的 <code>Blink</code> 内核</li><li>Chrome:<code>Blink</code>( 基于 webkit ， Google 与 Opera Software 共同开发 )</li></ul><h3 id="6-每个HTML文件里开头都有个很重要的东西，Doctype，知道这是干什么的吗？"><a href="#6-每个HTML文件里开头都有个很重要的东西，Doctype，知道这是干什么的吗？" class="headerlink" title="6. 每个HTML文件里开头都有个很重要的东西，Doctype，知道这是干什么的吗？"></a>6. 每个HTML文件里开头都有个很重要的东西，Doctype，知道这是干什么的吗？</h3><p>声明位于文档中的最前面的位置，处于标签之前。此标签可告知浏览器文档使用哪种 HTML 或 XHTML 规范。（<strong>重点：告诉浏览器按照何种规范解析页面</strong>）</p><h3 id="7-说说你对HTML5认识-（是什么-为什么）"><a href="#7-说说你对HTML5认识-（是什么-为什么）" class="headerlink" title="7.说说你对HTML5认识?（是什么,为什么）"></a>7.说说你对HTML5认识?（是什么,为什么）</h3><p><strong>是什么：</strong><br>HTML5指的是包括 HTML 、 CSS 和 JavaScript 在内的一套技术组合。它希望能够减少网页浏览器对于需要插件的丰富性网络应用服务（ Plug-in-Based Rich Internet Application ， RIA ），例如： AdobeFlash 、 Microsoft Silverlight 与 Oracle JavaFX 的需求，并且提供更多能有效加强网络应用的标准集。 HTML5 是 HTML 最新版本， 2014 年 10 月由万维网联盟（ W3C ）完成标准制定。目标是替换 1999 年所制定的 HTML 4.01 和 XHTML 1.0 标准，以期能在互联网应用迅速发展的时候，使网络标准达到匹配当代的网络需求。</p><p><strong>为什么:</strong><br>HTML4陈旧不能满足日益发展的互联网需要，特别是移动互联网。为了增强浏览器功能 Flash 被广泛使用，但安全与稳定堪忧，不适合在移动端使用（耗电、触摸、不开放）。<br>HTML5增强了浏览器的原生功能，符合 HTML5 规范的浏览器功能将更加强大，减少了 Web 应用对插件的依赖，让用户体验更好，让开发更加方便，另外 W3C 从推出 HTML4.0 到 5.0 之间共经历了 17 年， HTML 的变化很小，这并不符合一个好产品的演进规则。</p><h3 id="8-对WEB标准以及W3C的理解与认识"><a href="#8-对WEB标准以及W3C的理解与认识" class="headerlink" title="8.对WEB标准以及W3C的理解与认识?"></a>8.对WEB标准以及W3C的理解与认识?</h3><ol><li>标签闭合、标签小写、不乱嵌套、提高搜索机器人搜索几率、使用外链css和 js 脚本、结构行为表现的分离，</li><li>文件下载与页面速度更快、内容能被更多的用户所访问、内容能被更广泛的设备所访问、更少的代码和组件，</li><li>容易维护、改版方便，不需要变动页面内容、提供打印版本而不需要复制内容、提高网站易用性。</li></ol><h3 id="9-HTML5行内元素有哪些-块级元素有哪些-空元素有哪些"><a href="#9-HTML5行内元素有哪些-块级元素有哪些-空元素有哪些" class="headerlink" title="9.HTML5行内元素有哪些,块级元素有哪些, 空元素有哪些?"></a>9.HTML5行内元素有哪些,块级元素有哪些, 空元素有哪些?</h3><p><strong>行内元素</strong></p><ul><li>a - 锚点</li><li>abbr - 缩写</li><li>acronym - 首字</li><li>b - 粗体 ( 不推荐 )</li><li>bdo - bidi override</li><li>big - 大字体</li><li>br - 换行</li><li>cite - 引用</li><li>code - 计算机代码 ( 在引用源码的时候需要 )</li><li>dfn - 定义字段</li><li>em - 强调</li><li>font - 字体设定 ( 不推荐 )</li><li>i - 斜体</li><li>img - 图片</li><li>input - 输入框</li><li>kbd - 定义键盘文本</li><li>label - 表格标签</li><li>q - 短引用</li><li>s - 中划线 ( 不推荐 )</li><li>samp - 定义范例计算机代码</li><li>select - 项目选择</li><li>small - 小字体文本</li><li>span - 常用内联容器，定义文本内区块</li><li>strike - 中划线</li><li>strong - 粗体强调</li><li>sub - 下标</li><li>sup - 上标</li><li>textarea - 多行文本输入框</li><li>tt - 电传文本</li><li>u - 下划线</li><li>var - 定义变量</li></ul><p><strong>块元素 (block element)</strong></p><ul><li>address - 地址</li><li>blockquote - 块引用</li><li>center - 举中对齐块</li><li>dir - 目录列表</li><li>div - 常用块级容易，也是 css layout 的主要标签</li><li>dl - 定义列表</li><li>fieldset - form控制组</li><li>form - 交互表单</li><li>h3 - 大标题</li><li>h4 - 副标题</li><li>h3 - 3级标题</li><li>h4 - 4级标题</li><li>h5 - 5级标题</li><li>h6 - 6级标题</li><li>hr - 水平分隔线</li><li>isindex - input prompt</li><li>menu - 菜单列表</li><li>noframes - frames可选内容，（对于不支持 frame 的浏览器显示此区块内容</li><li>noscript - ）可选脚本内容（对于不支持 script 的浏览器显示此内容）</li><li>ol - 排序表单</li><li>p - 段落</li><li>pre - 格式化文本</li><li>table - 表格</li><li>ul - 非排序列表</li></ul><p><strong>可变元素</strong></p><blockquote><p>可变元素为根据上下文语境决定该元素为块元素或者内联元素。</p><ul><li>applet - java applet</li><li>button - 按钮</li><li>del - 删除文本</li><li>iframe - inline frame</li><li>ins - 插入的文本</li><li>map - 图片区块 (map)</li><li>object - object对象</li><li>script - 客户端脚本</li></ul></blockquote><p><strong>空元素</strong></p><blockquote><p>在 HTML[1] 元素中，没有内容的 HTML 元素被称为空元素</p><ul><li><code>br</code></li><li><code>hr</code></li><li><code>input</code></li><li><code>img</code></li><li><code>link</code> </li><li><code>meta</code></li></ul></blockquote><h3 id="10-什么是WebGL-它有什么优点"><a href="#10-什么是WebGL-它有什么优点" class="headerlink" title="10.什么是WebGL,它有什么优点?"></a>10.什么是WebGL,它有什么优点?</h3><p>WebGL（全写 Web Graphics Library ）是一种 3D 绘图标准，这种绘图技术标准允许把 JavaScript 和 OpenGL ES 2.0 结合在一起，通过增加OpenGL ES 2.0 的一个 JavaScript 绑定， WebGL 可以为 HTML5 Canvas 提供硬件 3D 加速渲染，这样 Web 开发人员就可以借助系统显卡来在浏览器里更流畅地展示 3D 场景和模型了，还能创建复杂的导航和数据视觉化。显然， WebGL 技术标准免去了开发网页专用渲染插件的麻烦，可被用于创建具有复杂 3D 结构的网站页面，甚至可以用来设计 3D 网页游戏等等。</p><p>WebGL完美地解决了现有的 Web 交互式三维动画的两个问题：</p><ul><li>第一，它通过HTML脚本本身实现 Web 交互式三维动画的制作，无需任何浏览器插件支持 ;</li><li>第二，它利用底层的图形硬件加速功能进行的图形渲染，是通过统一的、标准的、跨平台的OpenGL接口实现的。<br>通俗说WebGL中 canvas 绘图中的 3D 版本。因为原生的 WebGL 很复杂，我们经常会使用一些三方的库，如 three.js 等，这些库多数用于HTML5 游戏开发。</li></ul><h3 id="11-请你描述一下-cookies，sessionStorage-和-localStorage-的区别"><a href="#11-请你描述一下-cookies，sessionStorage-和-localStorage-的区别" class="headerlink" title="11.请你描述一下 cookies，sessionStorage 和 localStorage 的区别?"></a>11.请你描述一下 cookies，sessionStorage 和 localStorage 的区别?</h3><p><code>sessionStorage</code> 和 <code>localStorage</code> 是 <code>HTML5 Web Storage API</code> 提供的，可以方便的在 web 请求之间保存数据。有了本地数据，就可以避免数据在浏览器和服务器间不必要地来回传递。<br><code>sessionStorage、</code> <code>localStorage</code> 、 <code>cookie</code> 都是在浏览器端存储的数据，其中 <code>sessionStorage</code> 的概念很特别，引入了一个“浏览器窗口”的概念。</p><p> <strong>sessionStorage</strong> 是在<strong>同源的同窗口</strong>中，始终存在的数据。也就是说只要这个浏览器窗口没有关闭，即使刷新页面或进入同源另一页面，数据仍然存在。<strong>关闭窗口后， sessionStorage 即被销毁</strong>。同时“独立”打开的不同窗口，即使是同一页面， sessionStorage 对象也是不同的<br><strong>cookies会发送到服务器端。其余两个不会。</strong><br>Microsoft 指出 Internet Explorer 8 增加 cookie 限制为每个域名 50 个，但 IE7 似乎也允许每个域名 50 个 cookie 。 Firefox 每个域名 cookie 限制为 50 个。 Opera 每个域名 cookie 限制为 30 个。 Firefox 和 Safari 允许 cookie 多达 4097 个字节，包括名（ name ）、值（ value ）和等号。 Opera 许 cookie 多达 4096 个字节，包括：名（ name ）、值（ value ）和等号。 Internet Explorer 允许 cookie 多达 4095 个字节，包括：名（ name ）、值（ value ）和等号。</p><p><strong>区别：</strong></p><p><strong>Cookie</strong></p><ol><li>每个域名存储量比较小（各浏览器不同，大致 4K ）</li><li>所有域名的存储量有限制（各浏览器不同，大致 4K ）</li><li>有个数限制（各浏览器不同）</li><li>会随请求发送到服务器</li></ol><p><strong>LocalStorage</strong></p><ol><li>永久存储</li><li>单个域名存储量比较大（推荐 5MB ，各浏览器不同）</li><li>总体数量无限制</li></ol><p><strong>SessionStorage</strong></p><ol><li>只在 Session 内有效</li><li>存储量更大（推荐没有限制，但是实际上各浏览器也不同）</li></ol><h3 id="12-说说你对HTML语义化的理解"><a href="#12-说说你对HTML语义化的理解" class="headerlink" title="12.说说你对HTML语义化的理解?"></a>12.说说你对HTML语义化的理解?</h3><ul><li>什么是 HTML 语义化？</li></ul><p>根据内容的结构化（内容语义化），选择合适的标签（代码语义化）便于开发者阅读和写出更优雅的代码的同时让浏览器的爬虫和机器很好地解析。<br>      <strong>基本上都是围绕着几个主要的标签，像标题（ H1~H6 ）、列表（ li ）、强调（ strong em ）等等</strong></p><ul><li>为什么要语义化？</li></ul><ol><li>为了在没有CSS的情况下，页面也能呈现出很好地内容结构、代码结构 : 为了裸奔时好看；</li><li>用户体验：例如title、 alt 用于解释名词或解释图片信息、 label 标签的活用；</li><li>有利于SEO：和搜索引擎建立良好沟通，有助于爬虫抓取更多的有效信息：爬虫依赖于标签来确定上下文和各个关键字的权重；</li><li>方便其他设备解析（如屏幕阅读器、盲人阅读器、移动设备）以意义的方式来渲染网页；</li><li><p>便于团队开发和维护，语义化更具可读性，是下一步吧网页的重要动向，遵循W3C标准的团队都遵循这个标准，可以减少差异化。</p><p>语义化标签</p></li></ol><ul><li><code>&lt;header&gt;&lt;/header&gt;</code></li><li><code>&lt;footer&gt;&lt;/footer&gt;</code></li><li><code>&lt;nav&gt;&lt;/nav&gt;</code></li><li><code>&lt;section&gt;&lt;/section&gt;</code></li><li><code>&lt;article&gt;&lt;/article&gt;</code> SM:用来在页面中表示一套结构完整且独立的内容部分</li><li><code>&lt;aslde&gt;&lt;/aside&gt;</code> SM:主题的附属信息 ( 用途很广，主要就是一个附属内容 ) ，如果 article 里面为一篇文章的话，那么文章的作者以及信息内容就是这篇文章的附属内容了</li><li><code>&lt;figure&gt;&lt;/figure&gt;</code> SM:媒体元素，比如一些视频，图片啊等等</li><li><code>&lt;datalist&gt;&lt;/datalist&gt;</code>SM:选项列表，与 input 元素配合使用，来定义 input 可能的值</li><li><code>&lt;details&gt;&lt;/details&gt;</code>SM:用于描述文档或者文档某个部分的细节 ~ 默认属性为 open~<br>ps:配合 summary 一起使用</li></ul><h3 id="13-link和-import的区别"><a href="#13-link和-import的区别" class="headerlink" title="13.link和@import的区别?"></a>13.link和@import的区别?</h3><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">'stylesheet'</span> <span class="hljs-attr">rev</span>=<span class="hljs-string">'stylesheet'</span> <span class="hljs-attr">href</span>=<span class="hljs-string">'CSS文件 '</span> <span class="hljs-attr">type</span>=<span class="hljs-string">'text/css'</span> <span class="hljs-attr">media</span>=<span class="hljs-string">'all'</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&apos;text/css&apos; media=&apos;screen&apos;&gt;</span><br><span class="line">    @import url(&apos;CSS文件 &apos;);</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>两者都是外部引用CSS的方式，但是存在一定的区别：</p><ul><li><code>link</code> 是 XHTML 标签，除了加载 <code>CSS</code> 外，还可以定义<code>RSS</code> 等其他事务； <code>@import</code>属于 CSS 范畴，只能加载 CSS 。</li><li><code>link</code> 引用 CSS 时，在页面载入时同时加载；<code>@import</code>需要页面网页完全载入以后加载。</li><li><code>link</code> 是 XHTML 标签，无兼容问题； <code>@import</code> 是在 CSS2.1 提出的，低版本的浏览器不支持。</li><li><code>link</code> 支持使用 Javascript 控制 DOM 去改变样式；而 <code>@import</code> 不支持。</li></ul><h3 id="14-说说你对SVG理解"><a href="#14-说说你对SVG理解" class="headerlink" title="14.说说你对SVG理解?"></a>14.说说你对SVG理解?</h3><p><code>SVG可缩放矢量图形（ Scalable Vector Graphics ）</code>是基于可扩展标记语言（ XML ），用于描述二维矢量图形的一种图形格式。 SVG 是W3C(‘World Wide Web ConSortium’ 即 ‘ 国际互联网标准组织 ‘) 在 2000 年 8 月制定的一种新的<code>二维矢量图形格式</code>，也是规范中的网络矢量图形标准。 SVG 严格遵从 XML 语法，并用文本格式的描述性语言来描述图像内容，因此是一种和图像分辨率无关的矢量图形格式。 SVG 于 2003 年 1 月14 日成为 W3C 推荐标准。</p><p>特点：</p><ol><li><strong>任意放缩</strong>。用户可以任意缩放图像显示，而不会破坏图像的清晰度、细节等。</li><li><strong>文本独立</strong>。SVG图像中的文字独立于图像，文字保留可编辑和可搜寻的状态。也不会再有字体的限制，用户系统即使没有安装某一字体，也会看到和他们制作时完全相同的画面。</li><li><strong>较小文件</strong>。总体来讲，SVG文件比那些 GIF 和 JPEG 格式的文件要小很多，因而下载也很快。</li><li><strong>超强显示效果</strong>。SVG图像在屏幕上总是边缘清晰，它的清晰度适合任何屏幕分辨率和打印分辨率。</li><li><strong>超级颜色控制</strong>。SVG图像提供一个 1600 万种颜色的调色板，支持 ICC 颜色描述文件标准、 RGB 、线 X 填充、渐变和蒙版。</li><li><strong>交互 X 和智能化</strong>。 SVG 面临的主要问题一个是如何和已经占有重要市场份额的矢量图形格式 Flash 竞争的问题，另一个问题就是 SVG 的本地运行环境下的厂家支持程度。</li><li><strong>浏览器支持</strong><br>Internet Explorer9，火狐，谷歌 Chrome ， Opera 和 Safari 都支持 SVG 。<br>IE8和早期版本都需要一个插件 - 如 Adobe SVG 浏览器，这是免费提供的。</li></ol><h3 id="15-HTML全局属性-global-attribute-有哪些"><a href="#15-HTML全局属性-global-attribute-有哪些" class="headerlink" title="15.HTML全局属性(global attribute)有哪些?"></a>15.HTML全局属性(global attribute)有哪些?</h3><p><code>MDN</code>: <code>html global attribute</code>或者<code>W3C HTML global-attributes accesskey</code>:设置快捷键，提供快速访问元素如<code>aaa</code>在<code>windows</code>下的<code>firefox</code>中按<code>alt + shift + a</code>可激活元素 class:为元素设置类标识，多个类名用空格分开，CSS和javascript可通过class属性获取元素 contenteditable: 指定元素内容是否可编辑 contextmenu: 自定义鼠标右键弹出菜单内容 data-*: 为元素增加自定义属性 dir: 设置元素文本方向 draggable: 设置元素是否可拖拽 dropzone: 设置元素拖放类型： copy, move, link hidden: 表示一个元素是否与文档。样式上会导致元素不显示，但是不能用这个属性实现样式效果 id: 元素id，文档内唯一 lang: 元素内容的的语言 spellcheck: 是否启动拼写和语法检查 style: 行内css样式 tabindex: 设置元素可以获得焦点，通过tab可以导航 title: 元素相关的建议信息 translate: 元素和子孙节点内容是否需要本地化</p><h3 id="16-说说超链接target属性的取值和作用？"><a href="#16-说说超链接target属性的取值和作用？" class="headerlink" title="16.说说超链接target属性的取值和作用？"></a>16.说说超链接target属性的取值和作用？</h3><p><code>target</code>这个属性指定所链接的页面在浏览器窗口中的打开方式。</p><p>它的参数值主要有：</p><ol><li><code>_blank</code> ：在新浏览器窗口中打开链接文件</li><li><code>_parent</code> ：将链接的文件载入含有该链接框架的父框架集或父窗口中。如果含有该链接的框架不是嵌套的，则在浏览器全屏窗口中载入链接的文件，就象 _self 参数。</li><li><code>_self</code> ：在同一框架或窗口中打开所链接的文档。此参数为默认值，通常不用指定。</li><li><code>_top</code> ：在当前的整个浏览器窗口中打开所链接的文档，因而会删除所有框架。</li></ol><h3 id="17-data-属性的作用是什么？"><a href="#17-data-属性的作用是什么？" class="headerlink" title="17.data-属性的作用是什么？"></a>17.data-属性的作用是什么？</h3><p><code>data-xxx</code>为前端开发者提供<strong>自定义的属性</strong>，这些属性集可以通过对象的 <code>dataset</code>属性获取，不支持该属性的浏览器可以通过 <code>getAttribute</code>方法获取。</p><p>需要注意的是：<code>data-xxx</code>之后的以连字符分割的多个单词组成的属性，获取的时候使用<strong>驼峰风格</strong>。并不是所有的浏览器都支持<code>.dataset 属性</code>，测试的浏览器中只有 Chrome 和 Opera 支持。<br>即：当没有合适的属性和元素时，自定义的 data 属性是能够存储页面或 App 的私有的自定义数据。</p><h3 id="18-介绍一下你对浏览器内核的理解？"><a href="#18-介绍一下你对浏览器内核的理解？" class="headerlink" title="18.介绍一下你对浏览器内核的理解？"></a>18.介绍一下你对浏览器内核的理解？</h3><p>浏览器内核主要分成两部分：<strong><code>渲染引擎(layout engineer或 Rendering Engine)</code></strong> 和<strong> <code>JS引擎</code></strong>。</p><p><strong>渲染引擎</strong>：负责取得网页的内容（HTML、 XML 、图像等等）、整理讯息（例如加载 CSS 等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核。<br><strong>JS引擎</strong>：解析和执行 javascript 来实现网页的动态效果。</p><p>最开始渲染引擎和JS引擎并没有区分的很明确，后来 JS 引擎越来越独立，内核就倾向于只指渲染引擎。</p><h3 id="19-常见的浏览器内核有哪些？"><a href="#19-常见的浏览器内核有哪些？" class="headerlink" title="19.常见的浏览器内核有哪些？"></a>19.常见的浏览器内核有哪些？</h3><ol><li><code>Trident内核</code>： <code>IE</code>,<code>MaxThon</code>,<code>TT</code>,<code>The World</code>,<code>360</code>, <code>搜狗</code>等。[ 又称 MSHTML]</li><li><code>Gecko内核</code>： <code>Netscape6</code> 及以上版本，<code>FF</code>,<code>MozillaSuite/SeaMonkey</code>等</li><li><code>Presto内核</code>： <code>Opera7</code>及以上。[<code>Opera</code> 内核原为： <code>Presto</code> ，现为：<code>Blink</code>;]</li><li><code>Webkit内核</code>： <code>Safari</code>,<code>Chrome</code> 等。[ <code>Chrome</code> 的： <code>Blink （ WebKit 的分支）</code> ]</li></ol><h3 id="20-iframe有那些缺点？"><a href="#20-iframe有那些缺点？" class="headerlink" title="20.iframe有那些缺点？"></a>20.iframe有那些缺点？</h3><ol><li><code>iframe</code>会阻塞主页面的 <code>Onload</code> 事件； </li><li>搜索引擎的检索程序无法解读这种页面，不利于 <code>SEO</code>;</li><li><code>iframe</code> 和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载。</li></ol><hr><blockquote><p>使用<code>iframe</code>之前需要考虑这两个缺点。如果需要使用 <code>iframe</code>，最好是<strong>通过 javascript动态给iframe添加 src 属性值</strong>，这样可以绕开以上两个问题。</p></blockquote><h3 id="21-Label的作用是什么，是怎么用的？"><a href="#21-Label的作用是什么，是怎么用的？" class="headerlink" title="21.Label的作用是什么，是怎么用的？"></a>21.Label的作用是什么，是怎么用的？</h3><p><code>label</code>标签来<em>定义表单控制间的关系</em> , 当用户选择该标签时，浏览器会自动将焦点转到和标签相关的表单控件上。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">'Name'</span>&gt;</span>Number:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">“</span> <span class="hljs-attr">text</span> “ <span class="hljs-attr">name</span>=<span class="hljs-string">'Name'</span> <span class="hljs-attr">id</span>=<span class="hljs-string">'Name'</span>/&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Date:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">'text'</span> <span class="hljs-attr">name</span>=<span class="hljs-string">'B'</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="22-如何实现浏览器内多个标签页之间的通信"><a href="#22-如何实现浏览器内多个标签页之间的通信" class="headerlink" title="22.如何实现浏览器内多个标签页之间的通信?"></a>22.如何实现浏览器内多个标签页之间的通信?</h3><p><code>WebSocket</code>、 <code>SharedWorker</code>，也可以调用<code>localstorge</code>、 <code>cookies</code> 等本地存储方式；<br><code>localstorge</code> 另一个浏览上下文里被添加、修改或删除时，它都会触发一个事件，我们通过监听事件，控制它的值来进行页面信息通信；</p><p>注意quirks： <code>Safari</code> 在无痕模式下设置 <code>localstorge</code> 值时会抛出 <code>QuotaExceededError</code> 的异常；</p><h3 id="23-如何在页面上实现一个圆形的可点击区域？"><a href="#23-如何在页面上实现一个圆形的可点击区域？" class="headerlink" title="23.如何在页面上实现一个圆形的可点击区域？"></a>23.如何在页面上实现一个圆形的可点击区域？</h3><ol><li>map+area(锚点图) 或者 svg</li><li><code>border-radius</code></li><li>纯 js 实现 需要求一个点在不在圆上简单算法、获取鼠标坐标等等</li></ol><h3 id="24-title与h3的区别、b与strong的区别、i与em的区别？"><a href="#24-title与h3的区别、b与strong的区别、i与em的区别？" class="headerlink" title="24.title与h3的区别、b与strong的区别、i与em的区别？"></a>24.title与h3的区别、b与strong的区别、i与em的区别？</h3><ul><li><code>title</code>属性没有明确意义只表示是个标题， <code>H1</code> 则表示层次明确的标题，对页面信息的抓取也有很大的影响；</li><li><code>strong</code>是标明重点内容，有语气加强的含义，使用阅读设备阅读网络时： 会重读，而 <code>&lt;B&gt;</code>是展示强调内容。</li><li><p><code>i</code>内容展示为斜体， <code>em</code> 表示强调的文本；</p></li><li><p>Physical Style Elements – 自然样式标签<br>b, i, u, s, pre</p></li><li>Semantic Style Elements – 语义样式标签<br>strong, em, ins, del, code<br><em>应该准确使用语义样式标签, 但不能滥用 , 如果不能确定时首选使用自然样式标签。</em></li></ul><h3 id="25-实现不使用-border-画出1px高的线，在不同浏览器的标准模式与怪异模式下都能保持一致的效果？"><a href="#25-实现不使用-border-画出1px高的线，在不同浏览器的标准模式与怪异模式下都能保持一致的效果？" class="headerlink" title="25.实现不使用 border 画出1px高的线，在不同浏览器的标准模式与怪异模式下都能保持一致的效果？"></a>25.实现不使用 border 画出1px高的线，在不同浏览器的标准模式与怪异模式下都能保持一致的效果？</h3><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">'height:1px;overflow:hidden;background:red'</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="26-HTML5标签的作用-用途"><a href="#26-HTML5标签的作用-用途" class="headerlink" title="26.HTML5标签的作用?(用途)"></a>26.HTML5标签的作用?(用途)</h3><ol><li>使Web页面的内容更加有序和规范</li><li>使搜索引擎更加容易按照HTML5规则识别出有效的内容</li><li>使Web页面更接近于一种数据字段和表</li></ol><h3 id="27-简述一下src与href的区别？"><a href="#27-简述一下src与href的区别？" class="headerlink" title="27.简述一下src与href的区别？"></a>27.简述一下src与href的区别？</h3><p><code>src</code>用于替换当前元素， <code>href</code> 用于在当前文档和引用资源之间确立联系。</p><p><code>src</code>是 source 的缩写，指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；在请求 <code>src</code> 资源时会将其指向的资源下载并应用到文档内，例如 <code>js脚本</code> ， <code>img图片</code>和 <code>frame</code> 等元素。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span> =<span class="hljs-string">'js.js'</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，图片和框架等元素也如此，类似于将所指向资源嵌入当前标签内。这也是为什么将js脚本放在底部而不是头部。</p><p><code>href</code>是 <code>Hypertext Reference</code> 的缩写，指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接，如果我们在文档中添加<br><code>&lt;link href=&#39;common.css&#39; rel=&#39;stylesheet&#39;/&gt;</code>，那么浏览器会识别该文档为css文件，就会并行下载资源并且不会停止对当前文档的处理。这也是为什么建议使用 link 方式来加载 css ，而不是使用@import 方式。</p><h3 id="28-谈谈你对canvas的理解？"><a href="#28-谈谈你对canvas的理解？" class="headerlink" title="28.谈谈你对canvas的理解？"></a>28.谈谈你对canvas的理解？</h3><p>canvas是HTML5中新增一个HTML5标签与操作canvas的javascript API，它可以实现在网页中完成动态的2D与3D图像技术。标记和 SVG以及 VML 之间的一个重要的不同是，有一个基于 JavaScript 的绘图 API，而 SVG 和 VML 使用一个 XML 文档来描述绘图。SVG 绘图很容易编辑与生成，但功能明显要弱一些。 canvas可以完成动画、游戏、图表、图像处理等原来需要Flash完成的一些功能。</p><h3 id="29-WebSocket与消息推送？"><a href="#29-WebSocket与消息推送？" class="headerlink" title="29.WebSocket与消息推送？"></a>29.WebSocket与消息推送？</h3><p>B/S架构的系统多使用HTTP协议</p><p>HTTP协议的特点： 1. 无状态协议 2. 用于通过 Internet 发送请求消息和响应消息 3. 使用端口接收和发送消息，默认为80端口 底层通信还是使用Socket完成。</p><p>HTTP协议决定了服务器与客户端之间的连接方式，无法直接实现消息推送（ F5 已坏）<br>一些变相的解决办法：<br>双向通信与消息推送<br>轮询：客户端定时向服务器发送Ajax请求，服务器接到请求后马上返回响应信息并关闭连接。<br>优点：后端程序编写比较容易。<br>缺点：请求中有大半是无用，浪费带宽和服务器资源。<br>实例：适于小型应用。<br>长轮询：客户端向服务器发送Ajax请求，服务器接到请求后 hold 住连接，直到有新消息才返回响应信息并关闭连接，客户端处理完响应信息后再向服务器发送新的请求。<br>优点：在无消息的情况下不会频繁的请求，耗费资小。<br>缺点：服务器hold连接会消耗资源，返回数据顺序无保证，难于管理维护。 Comet 异步的 ashx ，<br>实例：WebQQ、 Hi 网页版、 Facebook IM 。<br>长连接：在页面里嵌入一个隐蔵iframe，将这个隐蔵 iframe 的 src 属性设为对一个长连接的请求或是采用 xhr 请求，服务器端就能源源不断地往客户端输入数据。<br>优点：消息即时到达，不发无用请求；管理起来也相对便。<br>缺点：服务器维护一个长连接会增加开销。<br>实例：Gmail聊天<br>Flash Socket：在页面中内嵌入一个使用了 Socket 类的 Flash 程序 JavaScript 通过调用此 Flash 程序提供的 Socket 接口与服务器端的 Socket 接口进行通信， JavaScript 在收到服务器端传送的信息后控制页面的显示。<br>优点：实现真正的即时通信，而不是伪即时。<br>缺点：客户端必须安装Flash插件；非 HTTP 协议，无法自动穿越防火墙。<br>实例：网络互动游戏。<br>Websocket:<br>WebSocket是 HTML5 开始提供的一种浏览器与服务器间进行全双工通讯的网络技术。依靠这种技术可以实现客户端和服务器端的长连接，双向实时通信。<br>特点:<br>a、事件驱动<br>b、异步<br>c、使用 ws 或者 wss 协议的客户端 socket<br>d、能够实现真正意义上的推送功能<br>缺点：少部分浏览器不支持，浏览器支持的程度与方式有区别。</p><h3 id="30-img的title和alt有什么区别？"><a href="#30-img的title和alt有什么区别？" class="headerlink" title="30.img的title和alt有什么区别？"></a>30.img的title和alt有什么区别？</h3><ul><li><code>alt</code> 用于图片无法加载时显示</li><li><code>title</code> 为该属性提供信息，通常当鼠标滑动到元素上的时候显示</li></ul><h3 id="31-表单的基本组成部分有哪些，表单的主要用途是什么？"><a href="#31-表单的基本组成部分有哪些，表单的主要用途是什么？" class="headerlink" title="31.表单的基本组成部分有哪些，表单的主要用途是什么？"></a>31.表单的基本组成部分有哪些，表单的主要用途是什么？</h3><p>组成：表单标签、表单域、表单按钮</p><ol><li>表单标签：这里面包含了处理表单数据所用 CGI 程序的 URL, 以及数据提交到服务器的方法。</li><li>表单域：包含了文本框、密码框、隐藏域、多行文本框、复选框、单选框、下拉选择框、和文件上传框等。</li><li>表单按钮：包括提交按钮，复位按钮和一般按钮；用于将数据传送到服务器上的 CGI 脚本或者取消输入，还可以用表单按钮来控制其他定义了处理脚本的处理工作。<br>主要用途：表单在网页中主要负责数据采集的功能，和向服务器传送数据。</li></ol><h3 id="32-表单提交中Get和Post方式的区别？"><a href="#32-表单提交中Get和Post方式的区别？" class="headerlink" title="32.表单提交中Get和Post方式的区别？"></a>32.表单提交中Get和Post方式的区别？</h3><ol><li>get 是从服务器上获取数据， post 是向服务器传送数据。</li><li>get 是把参数数据队列加到提交表单的 ACTION 属性所指的 URL 中，值和表单内各个字段一一对应，在 URL 中可以看到。 post 是通过 HTTP post 机制，将表单内各个字段与其内容放置在 HTML HEADER 内一起传送到 ACTION 属性所指的 URL 地址 , 用户看不到这个过程。</li><li>对于 get 方式，服务器端用 Request.QueryString 获取变量的值，对于 post 方式，服务器端用 Request.Form 获取提交的数据。</li><li>get 传送的数据量较小，不能大于 2KB 。 post 传送的数据量较大，一般被默认为不受限制。但理论上， IIS4 中最大量为 80KB ， IIS5 中为100KB 。</li><li>get 安全性非常低， post 安全性较高。</li></ol><h3 id="33-HTML5-有哪些新增的表单元素？"><a href="#33-HTML5-有哪些新增的表单元素？" class="headerlink" title="33.HTML5 有哪些新增的表单元素？"></a>33.HTML5 有哪些新增的表单元素？</h3><p>HTML5 新增了很多表单元素让开发者构建更优秀的 Web 应用程序。</p><ul><li>datalist</li><li>datetime</li><li>output</li><li>keygen</li><li>date</li><li>month</li><li>week</li><li>time</li><li>color</li><li>number</li><li>range</li><li>email</li><li>Url</li></ul><h3 id="34-HTML5-废弃了哪些-HTML4-标签？"><a href="#34-HTML5-废弃了哪些-HTML4-标签？" class="headerlink" title="34.HTML5 废弃了哪些 HTML4 标签？"></a>34.HTML5 废弃了哪些 HTML4 标签？</h3><p>HTML5 废弃了一些过时的，不合理的HTML 标签：</p><ul><li>frame</li><li>frameset</li><li>noframe</li><li>applet</li><li>big</li><li>center</li><li>basefront</li></ul><h3 id="35-HTML5-标准提供了哪些新的-API？"><a href="#35-HTML5-标准提供了哪些新的-API？" class="headerlink" title="35.HTML5 标准提供了哪些新的 API？"></a>35.HTML5 标准提供了哪些新的 API？</h3><p>HTML5 提供的应用程序 API 主要有：</p><ul><li>Media API</li><li>Text Track API</li><li>Application Cache API</li><li>User Interaction</li><li>Data Transfer API</li><li>Command API</li><li>Constraint Validation API</li><li>History API</li></ul><h3 id="36-HTML5-存储类型有什么区别？"><a href="#36-HTML5-存储类型有什么区别？" class="headerlink" title="36.HTML5 存储类型有什么区别？"></a>36.HTML5 存储类型有什么区别？</h3><p>HTML5 能够本地存储数据，在之前都是使用 cookies 使用的。 HTML5 提供了下面两种本地存储方案：</p><ul><li>localStorage 用于持久化的本地存储，数据永远不会过期，关闭浏览器也不会丢失。</li><li>sessionStorage 同一个会话中的页面才能访问并且当会话结束后数据也随之销毁。因此sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储</li></ul><h3 id="37-HTML5-应用程序缓存和浏览器缓存有什么区别？"><a href="#37-HTML5-应用程序缓存和浏览器缓存有什么区别？" class="headerlink" title="37.HTML5 应用程序缓存和浏览器缓存有什么区别？"></a>37.HTML5 应用程序缓存和浏览器缓存有什么区别？</h3><p><strong>应用程序缓存</strong>是 HTML5 的重要特性之一，提供了离线使用的功能，让应用程序可以获取本地的网站内容，例如 HTML 、 CSS 、图片以及 JavaScript 。这个特性可以提高网站性能，它的实现借助于 manifest 文件，如下：<br><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">manifest</span>=<span class="hljs-string">”example.appcache”</span>&gt;</span></span><br><span class="line">    <span class="hljs-comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>与传统浏览器缓存相比，它不强制用户访问的网站内容被缓存。</p><h3 id="38-HTML5-Canvas-元素有什么用？"><a href="#38-HTML5-Canvas-元素有什么用？" class="headerlink" title="38.HTML5 Canvas 元素有什么用？"></a>38.HTML5 Canvas 元素有什么用？</h3><p>Canvas 元素用于在网页上绘制图形，该元素标签强大之处在于可以直接在 HTML 上进行图形操作<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas id=” canvas1 ″ width= ” <span class="hljs-number">300</span> ″ height= ” <span class="hljs-number">100</span> ″ &gt;</span><br><span class="line">&lt;<span class="hljs-regexp">/canvas&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="39-除了-audio-和-video，HTML5-还有哪些媒体标签？"><a href="#39-除了-audio-和-video，HTML5-还有哪些媒体标签？" class="headerlink" title="39.除了 audio 和 video，HTML5 还有哪些媒体标签？"></a>39.除了 audio 和 video，HTML5 还有哪些媒体标签？</h3><blockquote><p>HTML5 对于多媒体提供了强有力的支持，除了 audio 和 video 标签外，还支持以下标签：</p><ul><li><embed> 标签定义嵌入的内容，比如插件。<br><code>&lt;embed type=” video/quicktime ” src= ” Fishing.mov ” &gt;</code></li><li><source> 对于定义多个数据源很有用。<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;video width=” 450 ″ height= ” 340 ″ controls&gt;</span><br><span class="line">  &lt;source src=” jamshed.mp4 ″ type= ” video/mp4 ″ &gt;</span><br><span class="line">  &lt;source src=” jamshed.ogg ” type= ” video/ogg ” &gt;</span><br><span class="line">&lt;/video&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><ul><li><track> 标签为诸如 video 元素之类的媒介规定外部文本轨道。 用于规定字幕文件或其他包含文本的文件，当媒介播放时，这些文件是可见的。<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;video width=” 450 ″ height= ” 340 ″ controls&gt;</span><br><span class="line">    &lt;source src=” jamshed.mp4 ″ type= ” video/mp4 ″ &gt;</span><br><span class="line">    &lt;source src=” jamshed.ogg ” type= ” video/ogg ” &gt;</span><br><span class="line">    &lt;track kind=” subtitles ” label= ” English ” src= ” jamshed_en.vtt ” srclang= ” en ” default&gt;&lt;/track&gt;</span><br><span class="line">    &lt;track kind=” subtitles ” label= ” Arabic ” src= ” jamshed_ar.vtt ” srclang= ” ar ” &gt;&lt;/track&gt;</span><br><span class="line">&lt;/video&gt;</span><br></pre></td></tr></table></figure></li></ul><p>据源很有用。标签为诸如 video 元素之类的媒介规定外部文本轨道。 用于规定字幕文件或其他包含文本的文件，当媒介播放时，这些文件是可见的。</p><h3 id="40-HTML5-中如何嵌入视频？"><a href="#40-HTML5-中如何嵌入视频？" class="headerlink" title="40.HTML5 中如何嵌入视频？"></a>40.HTML5 中如何嵌入视频？</h3><blockquote><p>和音频类似，HTML5 支持 MP4 、 WebM 和 Ogg 格式的视频，下面是简单示例：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;video width=” 450 ″ height= ” 340 ″ controls&gt;</span><br><span class="line">    &lt;source src=” jamshed.mp4 ″ type= ” video/mp4 ″ &gt;</span><br><span class="line">    Your browser does’ nt support video embedding feature.</span><br><span class="line">&lt;/video&gt;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="4-HTML5-中如何嵌入音频？"><a href="#4-HTML5-中如何嵌入音频？" class="headerlink" title="4.HTML5 中如何嵌入音频？"></a>4.HTML5 中如何嵌入音频？</h3><blockquote><p>HTML5 支持 MP3 、 Wav 和 Ogg 格式的音频，下面是在网页中嵌入音频的简单示例：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;audio controls&gt;</span><br><span class="line">    &lt;source src=” jamshed.mp3 ″ type= ” audio/mpeg ” &gt;</span><br><span class="line">    Your browser does’ nt support audio embedding feature.</span><br><span class="line">&lt;/audio&gt;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="42-新的-HTML5-文档类型和字符集是？"><a href="#42-新的-HTML5-文档类型和字符集是？" class="headerlink" title="42 .新的 HTML5 文档类型和字符集是？"></a>42 .新的 HTML5 文档类型和字符集是？</h3><blockquote><p>HTML5 文档类型很简单：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;!--HTML5 使用 UTF-8 编码示例--&gt;</span><br><span class="line">&lt;meta charset=” UTF-8 ″ &gt;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="43-解释一下CSS的盒子模型？"><a href="#43-解释一下CSS的盒子模型？" class="headerlink" title="43.解释一下CSS的盒子模型？"></a>43.解释一下CSS的盒子模型？</h3><ol><li><strong>标准的css盒子模型</strong>：宽度=内容的宽度+边框的宽度+加上内边具的宽度</li><li>网页设计中常听的属性名：内容(content)、填充(padding)、边框(border)、边界(margin)， CSS盒子模式都具备这些属性。</li><li>这些属性我们可以把它转移到我们日常生活中的盒子（箱子）上来理解，日常生活中所见的盒子也就是能装东西的一种箱子，也具有这些属性，所以叫它盒子模式。CSS盒子模型就是在网页设计中经常用到的CSS技术所使用的一种思维模型。</li></ol><p>盒子模型也有人称为框模型，HTML中的多数元素都会在浏览器中生成一个矩形的区域，每个区域包含四个组成部分，从外向内依次是：外边距（Margin）、边框（Border）、内边距（Padding）和内容（Content），其实盒子模型有两种，分别是 ie 盒子模型和标准 w3c 盒子模型，加上了doctype声明，让所有浏览器都会采用标准 w3c 盒子模型去解释你的盒子。</p><h3 id="44-请你说说CSS选择器的类型有哪些，并举几个例子说明其用法？"><a href="#44-请你说说CSS选择器的类型有哪些，并举几个例子说明其用法？" class="headerlink" title="44. 请你说说CSS选择器的类型有哪些，并举几个例子说明其用法？"></a>44. 请你说说CSS选择器的类型有哪些，并举几个例子说明其用法？</h3><p>类型：基础的选择器、组合选择器、属性选择器、伪类、伪元素</p><h3 id="45-请你说说CSS有什么特殊性-（优先级、计算特殊值）"><a href="#45-请你说说CSS有什么特殊性-（优先级、计算特殊值）" class="headerlink" title="45.请你说说CSS有什么特殊性?（优先级、计算特殊值）"></a>45.请你说说CSS有什么特殊性?（优先级、计算特殊值）</h3><p><strong>优先级</strong></p><ol><li>同类型，同级别的样式后者先于前者</li><li>ID &gt; 类样式 &gt; 标签 &gt; </li><li>内联&gt;ID选择器&gt;伪类&gt;属性选择器&gt;类选择器&gt;标签选择器&gt;通用选择器()&gt;继承的样式</li><li>具体 &gt; 泛化的，特殊性即css优先级</li><li>近的 &gt; 远的 (内嵌样式 &gt; 内部样式表 &gt; 外联样式表)<br>  <strong>内嵌样式</strong>：内嵌在元素中，<span style="color:red">span</span><br>  <strong>内部样式表</strong>：在页面中的样式，写在<style></style>中的样式<br><strong>外联样式表</strong>：单独存在一个css文件中，通过link引入或import导入的样式</li><li>!important 权重最高，比 inline style 还要高</li></ol><p><strong>计算特殊性值</strong></p><blockquote><p>important &gt; 内嵌 &gt; ID &gt; 类 &gt; 标签 | 伪类 | 属性选择 &gt; 伪对象 &gt; 继承 &gt; 通配符</p></blockquote><p>权重、特殊性计算法：CSS样式选择器分为4个等级，a、b、c、d</p><ol><li>如果样式是行内样式（通过Style=“”定义），那么a=1，1,0,0,0</li><li>b为ID选择器的总数 0,1,0,0</li><li>c为属性选择器，伪类选择器和class类选择器的数量。0,0,1,0</li><li>d为标签、伪元素选择器的数量 0,0,0,1</li><li><code>!important</code> 权重最高，比 <code>inline style</code> 还要高<br>比如结果为：1093比1100，按位比较，从左到右，只要一位高于则立即胜出，否则继续比较。</li></ol><h3 id="46-要动态改变层中内容可以使用的方法？"><a href="#46-要动态改变层中内容可以使用的方法？" class="headerlink" title="46.要动态改变层中内容可以使用的方法？"></a>46.要动态改变层中内容可以使用的方法？</h3><p>innerHTML，innerText</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-浏览器页面有哪三层构成，分别是什么，作用是什么&quot;&gt;&lt;a href=&quot;#1-浏览器页面有哪三层构成，分别是什么，作用是什么&quot; class=&quot;headerlink&quot; title=&quot;1. 浏览器页面有哪三层构成，分别是什么，作用是什么?&quot;&gt;&lt;/a&gt;1. 浏览器页面有哪三层构成，分别是什么，作用是什么?&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;构成：结构层、表示层、行为层&lt;/li&gt;
&lt;li&gt;分别是：HTML、CSS、JavaScript&lt;/li&gt;
&lt;li&gt;作用：HTML实现页面结构，CSS完成页面的表现与风格，JavaScript实现一些客户端的功能与业务。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="面试" scheme="http://wangytbest.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="HTML" scheme="http://wangytbest.github.io/categories/%E9%9D%A2%E8%AF%95/HTML/"/>
    
    
      <category term="CSS" scheme="http://wangytbest.github.io/tags/CSS/"/>
    
      <category term="面试" scheme="http://wangytbest.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="HTML" scheme="http://wangytbest.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>面试之JS</title>
    <link href="http://wangytbest.github.io/2019/03/02/%E9%9D%A2%E8%AF%95%E4%B9%8BJS/"/>
    <id>http://wangytbest.github.io/2019/03/02/面试之JS/</id>
    <published>2019-03-02T09:51:47.000Z</published>
    <updated>2019-04-19T08:18:16.636Z</updated>
    
    <content type="html"><![CDATA[<ul><li>JS</li><li>框架</li><li>浏览器<a id="more"></a></li></ul><h2 id="JS基础"><a href="#JS基础" class="headerlink" title="JS基础"></a>JS基础</h2><h3 id="Promise-串行请求，all，race，finally"><a href="#Promise-串行请求，all，race，finally" class="headerlink" title="Promise 串行请求，all，race，finally"></a><font color="#ff8077">Promise 串行请求，all，race，finally</font></h3><blockquote><p>Promise 对象用于表示一个异步操作的最终状态（完成或失败），以及该异步操作的结果值。 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener">Promise - MDN</a></p></blockquote><p><code>promise</code> 内部执行一些异步操作，一旦异步操作执行完毕，要么调用 <code>resolve</code> 函数来将 promise 状态改成 <code>fulfilled</code> ， 要么调用 <code>reject</code> 函数将 promise 状态改成 <code>rejected</code> 。 </p><p><code>Promise</code> 具有三个状态，初始状态为 <code>pending</code> ，异步操作成功状态转换为 <code>fulfilled</code> ， 失败转换为 <code>rejected</code> ，操作不可逆。当其中任何一种情况出现时， <code>Promise</code> 对象的 <code>then</code> 方法绑定的处理方法就会被调用（ <code>then</code> 方法包含两个参数： <code>onfuifilled</code> 和 <code>onrejected</code> 方法。当 <code>Promise</code> 状态为 <code>fulfilled</code> 状态时调用 <code>then</code> 的 <code>onFulfilled</code> 方法，当 <code>Promise</code> 状态为 <code>rejected</code> 时，调用 <code>then</code> 方法的 <code>onrejected</code> 方法.）</p><p><img src="https://mdn.mozillademos.org/files/8633/promises.png" alt="Promise 状态修改"></p><ul><li>Promise.prototype.then(onFulfilled, onRejected)</li><li>Promise.prototype.catch(onRejected)</li><li><p>Promise.prototype.finally(onFinally)</p></li><li><p>Promise.all(iterable)</p></li><li>Promise.race(iterable)</li><li>Promise.reject(reason)</li><li>Promise.resolve(value)</li></ul><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">* Promise.prototype.finally</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line"><span class="hljs-built_in">Promise</span>.prototype.finally = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">onFinally</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> P = <span class="hljs-keyword">this</span>.constructor;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;</span><br><span class="line">    P.resolve(onFinally()).then(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> value);</span><br><span class="line">  &#125;, reason =&gt; &#123;</span><br><span class="line">    P.resolve(onFinally()).then(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123; <span class="hljs-keyword">throw</span> reason &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>语法</strong><br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) </span>&#123; ... &#125; <span class="hljs-comment">/* executor * /)</span></span><br></pre></td></tr></table></figure></p><h3 id="柯理化，JS中柯理话的API"><a href="#柯理化，JS中柯理话的API" class="headerlink" title="柯理化，JS中柯理话的API"></a>柯理化，JS中柯理话的API</h3><h3 id="缓存，浏览器缓存原理，阶段"><a href="#缓存，浏览器缓存原理，阶段" class="headerlink" title="缓存，浏览器缓存原理，阶段"></a>缓存，浏览器缓存原理，阶段</h3><h3 id="webpack优化，写过loader和plugin"><a href="#webpack优化，写过loader和plugin" class="headerlink" title="webpack优化，写过loader和plugin"></a>webpack优化，写过loader和plugin</h3><ul><li>DLLPligin</li></ul><h3 id="网关作用"><a href="#网关作用" class="headerlink" title="网关作用"></a>网关作用</h3><h3 id="JSBridge的原理"><a href="#JSBridge的原理" class="headerlink" title="JSBridge的原理"></a>JSBridge的原理</h3><h3 id="模块化区别-ES6模块化和-CommonJS"><a href="#模块化区别-ES6模块化和-CommonJS" class="headerlink" title="模块化区别 ES6模块化和 CommonJS"></a>模块化区别 ES6模块化和 CommonJS</h3><h3 id="localStroage有效期"><a href="#localStroage有效期" class="headerlink" title="localStroage有效期"></a>localStroage有效期</h3><h3 id="图片懒加载实现，获取节点相对视图位置方法"><a href="#图片懒加载实现，获取节点相对视图位置方法" class="headerlink" title="图片懒加载实现，获取节点相对视图位置方法"></a>图片懒加载实现，获取节点相对视图位置方法</h3><h3 id="无限加载实现"><a href="#无限加载实现" class="headerlink" title="无限加载实现"></a>无限加载实现</h3><h3 id="轮播图实现"><a href="#轮播图实现" class="headerlink" title="轮播图实现"></a>轮播图实现</h3><hr><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><h3 id="在架构前端项目时，关于技术选型，应该怎么从vue、react、Angular选择"><a href="#在架构前端项目时，关于技术选型，应该怎么从vue、react、Angular选择" class="headerlink" title="在架构前端项目时，关于技术选型，应该怎么从vue、react、Angular选择"></a><font color="#ff8077">在架构前端项目时，关于技术选型，应该怎么从vue、react、Angular选择</font></h3><blockquote><p>技术选型考虑因素</p><ul><li>框架使用场景，解决问题，生态系统，跨平台性</li><li>团队技术能力</li></ul></blockquote><ul><li><code>Angular</code> 适合较复杂的SPA应用，比如工具类的应用就比较适合，<code>Angular</code> 属于大型框架，各个模块比较完整，提供的工具、扩展也比较丰富，适合沉淀大型项目，但上手成本高。<ul><li>是一个完整的框架拥有良好的项目结构。完善成熟的框架。</li><li>拥有自己的构建工具。Angular-CLI 使用打包编译，生成组建等都有相应的命令行，非常方便便捷。虽然 React 和 Vue 都有相应的构建工具，但是局限性很大，需要配合其他构建工具。</li><li>体积较大。加载较慢。build包太大，导致首屏渲染慢。</li><li>学习成本高。ng2使用ts语言，且与ng1完全不同。</li><li>生态系统庞大。</li><li>优化：所有模块按需加载，精简项目依赖，build生产版本，服务器开启 gzip 压缩。</li></ul></li><li><code>React</code> 适合对性能要求较高，且兼容移动端的产品，RN之类的应用还是比较广泛，移动端使用较多吧，会的人也多，上手不算太复杂，但学习曲线陡峭，得有好的架构师带领。<ul><li>灵活性</li><li>生态强大</li><li>跨平台优势大。React Native, React, Redux。</li><li>使用 JSX，后期维护性差。</li></ul></li><li><code>Vue</code> 适合增删改查类的管理系统，H5内嵌页、小程序之类的，这种应用改动频繁，人员流动性可能较大，上手容易，综合成本较低。<ul><li>灵活</li><li>实用。数据绑定、计算属性、组建等功能。</li><li>体积小</li><li>性能好</li><li>无法支持移动应用。</li></ul></li></ul><p>React 和 Vue具有很大的相似指出：两个框架都专注于视图层，其他功能如路由和全局状态管理都交给相关的库。都是用虚拟DOM。提供了响应式和组件化的视图组件。</p><h3 id="dom-diff，为什么要虚拟DOM"><a href="#dom-diff，为什么要虚拟DOM" class="headerlink" title="dom-diff，为什么要虚拟DOM"></a>dom-diff，为什么要虚拟DOM</h3><h3 id="vue-双向绑定"><a href="#vue-双向绑定" class="headerlink" title="vue 双向绑定"></a>vue 双向绑定</h3><h3 id="vue-异步组件"><a href="#vue-异步组件" class="headerlink" title="vue 异步组件"></a>vue 异步组件</h3><h3 id="vue-keep-alive，-为什么数据修改要有-activated-生命周期"><a href="#vue-keep-alive，-为什么数据修改要有-activated-生命周期" class="headerlink" title="vue keep-alive， 为什么数据修改要有 activated 生命周期"></a>vue keep-alive， 为什么数据修改要有 activated 生命周期</h3><h3 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h3><h3 id="秒杀系统"><a href="#秒杀系统" class="headerlink" title="秒杀系统"></a>秒杀系统</h3><p>##浏览器</p><h3 id="首页性能优化，白屏优化"><a href="#首页性能优化，白屏优化" class="headerlink" title="首页性能优化，白屏优化"></a>首页性能优化，白屏优化</h3><h3 id="CDN缓存与客户端缓存"><a href="#CDN缓存与客户端缓存" class="headerlink" title="CDN缓存与客户端缓存"></a>CDN缓存与客户端缓存</h3><h3 id="TCP协议（TCP、UDP）"><a href="#TCP协议（TCP、UDP）" class="headerlink" title="TCP协议（TCP、UDP）"></a>TCP协议（TCP、UDP）</h3><h3 id="SQL注入，XSS攻击和CSRF攻击，原理，预防方法"><a href="#SQL注入，XSS攻击和CSRF攻击，原理，预防方法" class="headerlink" title="SQL注入，XSS攻击和CSRF攻击，原理，预防方法"></a>SQL注入，XSS攻击和CSRF攻击，原理，预防方法</h3><h3 id="跨域，CROS兼容性，设备不支持"><a href="#跨域，CROS兼容性，设备不支持" class="headerlink" title="跨域，CROS兼容性，设备不支持"></a>跨域，CROS兼容性，设备不支持</h3><h3 id="http-1，http-2，http-3，多路复用和keep-alive、pipelining区别"><a href="#http-1，http-2，http-3，多路复用和keep-alive、pipelining区别" class="headerlink" title="http/1，http/2，http/3，多路复用和keep-alive、pipelining区别"></a>http/1，http/2，http/3，多路复用和keep-alive、pipelining区别</h3><h3 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h3><ul><li>1XX: 表示请求成功，要求客户端继续提交下一次请求才能完成整个处理过程。<ul><li>100</li></ul></li><li>2XX: 表示成功接受请求并已完成整个处理过程<ul><li>200</li><li>201</li><li>202 </li></ul></li><li>3XX: 重定向</li><li>4XX: 客户端请求错误，包括语法错误或者不能正确执行<ul><li>401</li><li>402</li><li>403</li><li>404</li></ul></li><li>5XX: 服务端请求错误<ul><li>501</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;JS&lt;/li&gt;
&lt;li&gt;框架&lt;/li&gt;
&lt;li&gt;浏览器&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="面试" scheme="http://wangytbest.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="JS" scheme="http://wangytbest.github.io/categories/%E9%9D%A2%E8%AF%95/JS/"/>
    
    
  </entry>
  
  <entry>
    <title>面试之CSS</title>
    <link href="http://wangytbest.github.io/2019/02/18/%E9%9D%A2%E8%AF%95%E4%B9%8BCSS/"/>
    <id>http://wangytbest.github.io/2019/02/18/面试之CSS/</id>
    <published>2019-02-18T09:54:21.000Z</published>
    <updated>2019-04-19T07:28:26.268Z</updated>
    
    <content type="html"><![CDATA[<p>前端面试<br><a id="more"></a></p><h2 id="flex布局，兼容性"><a href="#flex布局，兼容性" class="headerlink" title="flex布局，兼容性"></a>flex布局，兼容性</h2><h2 id="低端设备动画卡顿原因及解决办法"><a href="#低端设备动画卡顿原因及解决办法" class="headerlink" title="低端设备动画卡顿原因及解决办法"></a>低端设备动画卡顿原因及解决办法</h2><h2 id="重绘与回流，提高性能"><a href="#重绘与回流，提高性能" class="headerlink" title="重绘与回流，提高性能"></a>重绘与回流，提高性能</h2><h2 id="position取值（sticky粘性）"><a href="#position取值（sticky粘性）" class="headerlink" title="position取值（sticky粘性）"></a>position取值（sticky粘性）</h2><h2 id="居中方法"><a href="#居中方法" class="headerlink" title="居中方法"></a>居中方法</h2><h2 id="布局（两列、三列）"><a href="#布局（两列、三列）" class="headerlink" title="布局（两列、三列）"></a>布局（两列、三列）</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前端面试&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="面试" scheme="http://wangytbest.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="CSS" scheme="http://wangytbest.github.io/categories/%E9%9D%A2%E8%AF%95/CSS/"/>
    
    
  </entry>
  
  <entry>
    <title>webpack插件关于autoprefixer的冲突</title>
    <link href="http://wangytbest.github.io/2018/08/27/webpack-%E6%8F%92%E4%BB%B6%E5%85%B3%E4%BA%8Eautoprefixer%E7%9A%84%E5%86%B2%E7%AA%81/"/>
    <id>http://wangytbest.github.io/2018/08/27/webpack-插件关于autoprefixer的冲突/</id>
    <published>2018-08-27T03:15:54.000Z</published>
    <updated>2019-04-09T07:49:39.455Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-实际遇到的问题"><a href="#1-实际遇到的问题" class="headerlink" title="1. 实际遇到的问题"></a>1. 实际遇到的问题</h3><p>项目中经常会遇到css的一些奇怪问题，有些css属性的设置在在本地编译运行的时候是好的，但是打包上线之后这个属性就平白无故的没有了？</p><p>具体场景<br>在处理多行文本溢出时，需要使用<code>-webkit-box-orient: vertial</code>，在本地开发测试一切正常，但是在webpack编译之后，检查样式并没有这个属性，其他的属性都有。</p><a id="more"></a><figure class="highlight scss hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 多行文本</span></span><br><span class="line">@<span class="hljs-keyword">mixin</span> textmultiline(<span class="hljs-variable">$line</span>:<span class="hljs-number">2</span>) &#123;</span><br><span class="line">  <span class="hljs-attribute">display</span>: -webkit-box;</span><br><span class="line">  <span class="hljs-comment">/* autoprefixer: off*/</span></span><br><span class="line">  -webkit-box-orient: vertical;</span><br><span class="line">  <span class="hljs-comment">/* autoprefixer: on*/</span></span><br><span class="line">  -webkit-line-clamp: <span class="hljs-variable">$line</span>;</span><br><span class="line">  <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="hljs-attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-为什么啊？"><a href="#2-为什么啊？" class="headerlink" title="2. 为什么啊？"></a>2. 为什么啊？</h3><ol><li><p><a href="https://github.com/cssnano/cssnano/issues/357" target="_blank" rel="noopener">why remove -webkit-box-orient property? #357</a></p></li><li><p><a href="https://github.com/cssnano/cssnano/issues/252" target="_blank" rel="noopener">Autoprefixer setting should be false by default #252</a></p></li></ol><p>原因：<br>  autoprefixer自动的删除了一些它觉得没有必要的属性，所以解决办法就是设autoprefixer为false，或者针对某个属性忽autoprefixer</p><h3 id="3-怎么办"><a href="#3-怎么办" class="headerlink" title="3. 怎么办"></a>3. 怎么办</h3><ol><li><p>属性忽略<code>autoprefixer</code></p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// eslint-disable-next-line</span><br><span class="line"><span class="hljs-comment">/* autoprefixer: off*/</span></span><br><span class="line"><span class="hljs-selector-tag">-webkit-box-orient</span>: <span class="hljs-selector-tag">vertical</span>;</span><br><span class="line"><span class="hljs-comment">/* autoprefixer: on*/</span></span><br></pre></td></tr></table></figure></li><li><p>关闭<code>cssnano</code>的<code>autoprefixer</code></p></li></ol><blockquote><p>just remove the postcss config in vue-loader’s config</p></blockquote><p>Add the following option to prevent autoprefixer from removing prefixes (<strong>for cssnano v3 only</strong>):</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  autoprefixer: &#123;</span><br><span class="line">    remove: false</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then -webkit-box-orient will be preserved.</p><ol start="3"><li><code>optimize-css-assets-webpack-plugin</code> 插件问题</li></ol><figure class="highlight cs hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">new</span> OptimizeCSSPlugin(&#123;</span><br><span class="line">  cssProcessorOptions: config.build.productionSourceMap</span><br><span class="line">    ? &#123; safe: <span class="hljs-literal">true</span>, map: &#123; inline: <span class="hljs-literal">false</span> &#125; &#125;</span><br><span class="line">    : &#123; safe: <span class="hljs-literal">true</span> &#125;</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-实际遇到的问题&quot;&gt;&lt;a href=&quot;#1-实际遇到的问题&quot; class=&quot;headerlink&quot; title=&quot;1. 实际遇到的问题&quot;&gt;&lt;/a&gt;1. 实际遇到的问题&lt;/h3&gt;&lt;p&gt;项目中经常会遇到css的一些奇怪问题，有些css属性的设置在在本地编译运行的时候是好的，但是打包上线之后这个属性就平白无故的没有了？&lt;/p&gt;
&lt;p&gt;具体场景&lt;br&gt;在处理多行文本溢出时，需要使用&lt;code&gt;-webkit-box-orient: vertial&lt;/code&gt;，在本地开发测试一切正常，但是在webpack编译之后，检查样式并没有这个属性，其他的属性都有。&lt;/p&gt;
    
    </summary>
    
      <category term="webpack" scheme="http://wangytbest.github.io/categories/webpack/"/>
    
    
      <category term="webpack" scheme="http://wangytbest.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>URL操作处理</title>
    <link href="http://wangytbest.github.io/2018/05/30/URL%E6%93%8D%E4%BD%9C%E5%A4%84%E7%90%86/"/>
    <id>http://wangytbest.github.io/2018/05/30/URL操作处理/</id>
    <published>2018-05-30T07:02:33.000Z</published>
    <updated>2019-04-09T06:59:54.514Z</updated>
    
    <content type="html"><![CDATA[<p>URL<br><a id="more"></a><br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * URL模块</span></span><br><span class="line"><span class="hljs-comment"> * @param  &#123;[type]&#125; require [description]</span></span><br><span class="line"><span class="hljs-comment"> * @param  &#123;[type]&#125; exports [description]</span></span><br><span class="line"><span class="hljs-comment"> * @param  &#123;[type]&#125; module  [description]</span></span><br><span class="line"><span class="hljs-comment"> * @return &#123;[type]&#125;         [description]</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line">define(<span class="hljs-string">'url'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">require, exports, module</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> _cacheThisModule_;</span><br><span class="line">    <span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">        <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">         * 设置hash</span></span><br><span class="line"><span class="hljs-comment">         * @param name</span></span><br><span class="line"><span class="hljs-comment">         */</span></span><br><span class="line">        setHash: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">name</span>) </span>&#123;</span><br><span class="line">            setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                location.hash = name;</span><br><span class="line">            &#125;, <span class="hljs-number">0</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">         * 获取当前url中的hash值</span></span><br><span class="line"><span class="hljs-comment">         * @param url</span></span><br><span class="line"><span class="hljs-comment">         * @return String</span></span><br><span class="line"><span class="hljs-comment">         */</span></span><br><span class="line">        getHash: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">url</span>) </span>&#123;</span><br><span class="line">            <span class="hljs-keyword">var</span> u = url || location.hash;</span><br><span class="line">            <span class="hljs-keyword">return</span> u ? u.replace(<span class="hljs-regexp">/.*#/</span>, <span class="hljs-string">""</span>) : <span class="hljs-string">""</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">         *根据hash获取对应的模块名</span></span><br><span class="line"><span class="hljs-comment">         */</span></span><br><span class="line">        getHashModelName: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            <span class="hljs-keyword">var</span> hash = <span class="hljs-keyword">this</span>.getHash();</span><br><span class="line">            <span class="hljs-keyword">return</span> (hash ? hash.split(<span class="hljs-string">"&amp;"</span>)[<span class="hljs-number">0</span>].split(<span class="hljs-string">"="</span>)[<span class="hljs-number">0</span>] : []);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">         *从hash中获取action</span></span><br><span class="line"><span class="hljs-comment">         */</span></span><br><span class="line">        getHashActionName: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            <span class="hljs-keyword">var</span> hash = <span class="hljs-keyword">this</span>.getHash();</span><br><span class="line">            <span class="hljs-keyword">if</span> (hash == <span class="hljs-string">""</span>)<span class="hljs-keyword">return</span> <span class="hljs-string">""</span>;</span><br><span class="line">            <span class="hljs-keyword">return</span> (hash ? hash.split(<span class="hljs-string">"&amp;"</span>) : [])[<span class="hljs-number">0</span>].split(<span class="hljs-string">"="</span>)[<span class="hljs-number">1</span>];</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">         * 从hash中获取name对应的值</span></span><br><span class="line"><span class="hljs-comment">         */</span></span><br><span class="line">        getHashParam: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">name</span>) </span>&#123;</span><br><span class="line">            <span class="hljs-keyword">var</span> result = <span class="hljs-keyword">this</span>.getHash().match(<span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">"(^|&amp;)"</span> + name + <span class="hljs-string">"=([^&amp;]*)(&amp;|$)"</span>));</span><br><span class="line">            <span class="hljs-keyword">return</span> result != <span class="hljs-literal">null</span> ? result[<span class="hljs-number">2</span>] : <span class="hljs-string">""</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">         *从URL中获取参数对应的值</span></span><br><span class="line"><span class="hljs-comment">         */</span></span><br><span class="line">        getUrlParam: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">name, url</span>) </span>&#123;</span><br><span class="line">            <span class="hljs-comment">//参数：变量名，url为空则表从当前页面的url中取</span></span><br><span class="line">            <span class="hljs-keyword">var</span> u = <span class="hljs-built_in">arguments</span>[<span class="hljs-number">1</span>] || <span class="hljs-built_in">window</span>.location.search,</span><br><span class="line">                reg = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">"(^|&amp;)"</span> + name + <span class="hljs-string">"=([^&amp;]*)(&amp;|$)"</span>, <span class="hljs-string">'i'</span>),</span><br><span class="line">                r = u.substr(u.indexOf(<span class="hljs-string">"\?"</span>) + <span class="hljs-number">1</span>).match(reg);</span><br><span class="line">            <span class="hljs-keyword">return</span> r != <span class="hljs-literal">null</span> ? r[<span class="hljs-number">2</span>] : <span class="hljs-string">""</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">         *获取所有HASH的参数，剔除model.</span></span><br><span class="line"><span class="hljs-comment">         */</span></span><br><span class="line">        getParams: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">            <span class="hljs-keyword">var</span> param = [],</span><br><span class="line">                hash = <span class="hljs-keyword">this</span>.getHash();</span><br><span class="line">            paramArr = hash ? hash.split(<span class="hljs-string">"&amp;"</span>) : [];</span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>, l = paramArr.length; i &lt; l; i++) &#123;</span><br><span class="line">                param.push(paramArr[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">return</span> param;</span><br><span class="line">        &#125;,</span><br><span class="line">        decodeUrl: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">url</span>) </span>&#123;</span><br><span class="line">            url = <span class="hljs-built_in">decodeURIComponent</span>(url);</span><br><span class="line">            <span class="hljs-keyword">var</span> urlObj = <span class="hljs-keyword">this</span>.parseUrl(url), decodedParam = [];</span><br><span class="line">            $.each(urlObj.params, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">key, value</span>) </span>&#123;</span><br><span class="line">                value = <span class="hljs-built_in">decodeURIComponent</span>(value);</span><br><span class="line">                decodedParam.push(key + <span class="hljs-string">"="</span> + value);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="hljs-keyword">var</span> urlPrefix = url.split(<span class="hljs-string">"?"</span>)[<span class="hljs-number">0</span>];</span><br><span class="line">            <span class="hljs-keyword">return</span> urlPrefix + <span class="hljs-string">"?"</span> + decodedParam.join(<span class="hljs-string">"&amp;"</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        parseUrl: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">url</span>) </span>&#123;</span><br><span class="line">            <span class="hljs-keyword">var</span> a = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'a'</span>);</span><br><span class="line">            a.href = url;</span><br><span class="line">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="line">                source: url,</span><br><span class="line">                protocol: a.protocol.replace(<span class="hljs-string">':'</span>, <span class="hljs-string">''</span>),</span><br><span class="line">                host: a.hostname,</span><br><span class="line">                port: a.port,</span><br><span class="line">                query: a.search,</span><br><span class="line">                params: (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                    <span class="hljs-keyword">var</span> ret = &#123;&#125;,</span><br><span class="line">                        seg = a.search.replace(<span class="hljs-regexp">/^\?/</span>, <span class="hljs-string">''</span>).split(<span class="hljs-string">'&amp;'</span>),</span><br><span class="line">                        len = seg.length, i = <span class="hljs-number">0</span>, s;</span><br><span class="line">                    <span class="hljs-keyword">for</span> (; i &lt; len; i++) &#123;</span><br><span class="line">                        <span class="hljs-keyword">if</span> (!seg[i]) &#123;</span><br><span class="line">                            <span class="hljs-keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        s = seg[i].split(<span class="hljs-string">'='</span>);</span><br><span class="line">                        ret[s[<span class="hljs-number">0</span>]] = s[<span class="hljs-number">1</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="hljs-keyword">return</span> ret;</span><br><span class="line">                &#125;)(),</span><br><span class="line">                file: (a.pathname.match(<span class="hljs-regexp">/([^\/?#]+)$/i</span>) || [, <span class="hljs-string">''</span>])[<span class="hljs-number">1</span>],</span><br><span class="line">                hash: a.hash.replace(<span class="hljs-string">'#'</span>, <span class="hljs-string">''</span>),</span><br><span class="line">                path: a.pathname.replace(<span class="hljs-regexp">/^([^\/])/</span>, <span class="hljs-string">'/$1'</span>),</span><br><span class="line">                relative: (a.href.match(<span class="hljs-regexp">/tps?:\/\/[^\/]+(.+)/</span>) || [, <span class="hljs-string">''</span>])[<span class="hljs-number">1</span>],</span><br><span class="line">                segments: a.pathname.replace(<span class="hljs-regexp">/^\//</span>, <span class="hljs-string">''</span>).split(<span class="hljs-string">'/'</span>)</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        replaceParam: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">param, value, url, forceReplace</span>) </span>&#123;</span><br><span class="line">            url = url || location.href;</span><br><span class="line">            <span class="hljs-keyword">var</span> reg = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">"([\\?&amp;]"</span> + param + <span class="hljs-string">"=)[^&amp;#]*"</span>);</span><br><span class="line">            <span class="hljs-keyword">if</span> (!url.match(reg)) &#123;</span><br><span class="line">                <span class="hljs-keyword">return</span> (url.indexOf(<span class="hljs-string">"?"</span>) == <span class="hljs-number">-1</span>) ? (url + <span class="hljs-string">"?"</span> + param + <span class="hljs-string">"="</span> + value) : (url + <span class="hljs-string">"&amp;"</span> + param + <span class="hljs-string">"="</span> + value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">if</span> (forceReplace) &#123;</span><br><span class="line">                <span class="hljs-keyword">return</span> url.replace(reg, <span class="hljs-string">"$1"</span> + value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">return</span> url;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;URL&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://wangytbest.github.io/categories/Javascript/"/>
    
      <category term="util" scheme="http://wangytbest.github.io/categories/Javascript/util/"/>
    
    
  </entry>
  
  <entry>
    <title>localstroge本地缓存</title>
    <link href="http://wangytbest.github.io/2018/05/30/localstroge%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98/"/>
    <id>http://wangytbest.github.io/2018/05/30/localstroge本地缓存/</id>
    <published>2018-05-30T07:01:25.000Z</published>
    <updated>2019-04-09T07:02:46.230Z</updated>
    
    <content type="html"><![CDATA[<p>localStorage设置过期时间<br><a id="more"></a><br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="hljs-string">"localStorage"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">require, exports, module</span>)</span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> cache = <span class="hljs-built_in">require</span>(<span class="hljs-string">"cachev1"</span>).local;</span><br><span class="line">    <span class="hljs-keyword">var</span> <span class="hljs-built_in">Promise</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">"promise.min"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">     * 将过期时间字符串转换成时间戳</span></span><br><span class="line"><span class="hljs-comment">     *  convertExpire("7d")</span></span><br><span class="line"><span class="hljs-comment">     *  convertExpire(3600)  1小时</span></span><br><span class="line"><span class="hljs-comment">     * @param  &#123;String&#125; val  过期时间，格式为`\d+[smhd]`，其中s 表示秒、m 分钟、h 小时、d 天，如 30d   默认是秒</span></span><br><span class="line"><span class="hljs-comment">     * @return &#123;Number&#125;      时间戳（单位s）</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">convertExpire</span>(<span class="hljs-params">val</span>) </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (!val) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">var</span> matches = (<span class="hljs-string">''</span> + val).match(<span class="hljs-regexp">/(\d+)([smhd])/</span>);</span><br><span class="line">        <span class="hljs-keyword">var</span> ms = <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> (matches) &#123;</span><br><span class="line">            <span class="hljs-keyword">switch</span> (matches[<span class="hljs-number">2</span>]) &#123;</span><br><span class="line">                <span class="hljs-keyword">case</span> <span class="hljs-string">'s'</span>:</span><br><span class="line">                    ms = matches[<span class="hljs-number">1</span>];</span><br><span class="line">                    <span class="hljs-keyword">break</span>;</span><br><span class="line">                <span class="hljs-keyword">case</span> <span class="hljs-string">'m'</span>:</span><br><span class="line">                    ms = matches[<span class="hljs-number">1</span>] * <span class="hljs-number">60</span>;</span><br><span class="line">                    <span class="hljs-keyword">break</span>;</span><br><span class="line">                <span class="hljs-keyword">case</span> <span class="hljs-string">'h'</span>:</span><br><span class="line">                    ms = matches[<span class="hljs-number">1</span>] * <span class="hljs-number">60</span> * <span class="hljs-number">60</span>;</span><br><span class="line">                    <span class="hljs-keyword">break</span>;</span><br><span class="line">                <span class="hljs-keyword">case</span> <span class="hljs-string">'d'</span>:</span><br><span class="line">                    ms = matches[<span class="hljs-number">1</span>] * <span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span>&#123;</span><br><span class="line">            ms = val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> ms;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">var</span> timeout = setTimeout;</span><br><span class="line">    <span class="hljs-keyword">var</span> storage = &#123;</span><br><span class="line">        <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">         * 将数据写入本地缓存</span></span><br><span class="line"><span class="hljs-comment">         *</span></span><br><span class="line"><span class="hljs-comment">         * @param  &#123;String&#125;          key      键名</span></span><br><span class="line"><span class="hljs-comment">         * @param  &#123;Object | String&#125; value    数据</span></span><br><span class="line"><span class="hljs-comment">         * @param  &#123;Object&#125;          options  可选项，可传expire 设定数据过期时间，格式参见convertExpire</span></span><br><span class="line"><span class="hljs-comment">         *</span></span><br><span class="line"><span class="hljs-comment">         * @return &#123;Promise&#125;         Promise实例</span></span><br><span class="line"><span class="hljs-comment">         */</span></span><br><span class="line">        <span class="hljs-keyword">set</span>:function(key, value, options) &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>)</span>&#123;</span><br><span class="line">                <span class="hljs-keyword">var</span> expire = convertExpire(<span class="hljs-keyword">typeof</span> options == <span class="hljs-string">'object'</span> &amp;&amp; options.expire ? options.expire : <span class="hljs-string">'7d'</span>);</span><br><span class="line">                timeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                    cache.setItem(key,value,expire,<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">ret</span>) </span>&#123;</span><br><span class="line">                        <span class="hljs-keyword">if</span>(ret==<span class="hljs-number">0</span>) resolve();</span><br><span class="line">                        <span class="hljs-keyword">else</span> reject();</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">         * 获取本地缓存数据，当数据已过期时会被清理掉</span></span><br><span class="line"><span class="hljs-comment">         *</span></span><br><span class="line"><span class="hljs-comment">         * @param  &#123;String&#125;  key         键名</span></span><br><span class="line"><span class="hljs-comment">         * @param  &#123;Mix&#125;     defaultVal  如设置了默认值，则保证不会被reject</span></span><br><span class="line"><span class="hljs-comment">         *</span></span><br><span class="line"><span class="hljs-comment">         * @return &#123;Promise&#125;      Promise实例</span></span><br><span class="line"><span class="hljs-comment">         */</span></span><br><span class="line">        <span class="hljs-keyword">get</span>:function(key, defaultVal) &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>)</span>&#123;</span><br><span class="line">                timeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                    <span class="hljs-keyword">var</span> value = cache.getItem(key);</span><br><span class="line">                    <span class="hljs-keyword">if</span>(value===<span class="hljs-string">""</span>||value===<span class="hljs-literal">null</span>)&#123;</span><br><span class="line">                        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> defaultVal!=<span class="hljs-string">"undefined"</span>)&#123;</span><br><span class="line">                            resolve(defaultVal);</span><br><span class="line">                        &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="line">                            reject();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="hljs-keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    resolve(value);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">         * 移除本地缓存数据</span></span><br><span class="line"><span class="hljs-comment">         */</span></span><br><span class="line">        remove:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">key</span>) </span>&#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>)</span>&#123;</span><br><span class="line">                timeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">                    cache.removeItem(key);</span><br><span class="line">                    resolve();</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">         * 同步地设置本地缓存数据</span></span><br><span class="line"><span class="hljs-comment">         *</span></span><br><span class="line"><span class="hljs-comment">         * @deprecated 此方法只为了暂时兼容旧接口，会极大的影响性，能请勿使用！</span></span><br><span class="line"><span class="hljs-comment">         */</span></span><br><span class="line">        setSync:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">key, value, options</span>) </span>&#123;</span><br><span class="line">            <span class="hljs-keyword">var</span> expire = convertExpire(<span class="hljs-keyword">typeof</span> options == <span class="hljs-string">'object'</span> &amp;&amp; options.expire ? options.expire : <span class="hljs-string">'7d'</span>)</span><br><span class="line">            cache.setItem(key,value,expire);</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">         * 同步地获取本地缓存数据，当数据已过期时会被清理掉</span></span><br><span class="line"><span class="hljs-comment">         *</span></span><br><span class="line"><span class="hljs-comment">         * @deprecated 此方法只为了暂时兼容旧接口，会极大的影响性，能请勿使用！</span></span><br><span class="line"><span class="hljs-comment">         */</span></span><br><span class="line">        getSync:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">key</span>) </span>&#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> cache.getItem(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="hljs-built_in">module</span>.exports = storage;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;localStorage设置过期时间&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://wangytbest.github.io/categories/Javascript/"/>
    
      <category term="util" scheme="http://wangytbest.github.io/categories/Javascript/util/"/>
    
    
  </entry>
  
  <entry>
    <title>时间处理</title>
    <link href="http://wangytbest.github.io/2018/05/30/%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86/"/>
    <id>http://wangytbest.github.io/2018/05/30/时间处理/</id>
    <published>2018-05-30T06:58:34.000Z</published>
    <updated>2019-04-09T06:57:25.715Z</updated>
    
    <content type="html"><![CDATA[<p>时间处理方法</p> <a id="more"></a><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="hljs-string">"date"</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">require,exports,module</span>)</span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> _cacheThisModule_;</span><br><span class="line">    exports.format = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">date,formatStr</span>)</span>&#123;</span><br><span class="line"><span class="hljs-comment">//格式化时间</span></span><br><span class="line"><span class="hljs-keyword">var</span>arrWeek=[<span class="hljs-string">'日'</span>,<span class="hljs-string">'一'</span>,<span class="hljs-string">'二'</span>,<span class="hljs-string">'三'</span>,<span class="hljs-string">'四'</span>,<span class="hljs-string">'五'</span>,<span class="hljs-string">'六'</span>],</span><br><span class="line">str=formatStr</span><br><span class="line">.replace(<span class="hljs-regexp">/yyyy|YYYY/</span>,date.getFullYear())</span><br><span class="line">.replace(<span class="hljs-regexp">/yy|YY/</span>,$addZero(date.getFullYear() % <span class="hljs-number">100</span>,<span class="hljs-number">2</span>))</span><br><span class="line">.replace(<span class="hljs-regexp">/mm|MM/</span>,$addZero(date.getMonth()+<span class="hljs-number">1</span>,<span class="hljs-number">2</span>))</span><br><span class="line">.replace(<span class="hljs-regexp">/m|M/g</span>,date.getMonth()+<span class="hljs-number">1</span>)</span><br><span class="line">.replace(<span class="hljs-regexp">/dd|DD/</span>,$addZero(date.getDate(),<span class="hljs-number">2</span>))</span><br><span class="line">.replace(<span class="hljs-regexp">/d|D/g</span>,date.getDate())</span><br><span class="line">.replace(<span class="hljs-regexp">/hh|HH/</span>,$addZero(date.getHours(),<span class="hljs-number">2</span>))</span><br><span class="line">.replace(<span class="hljs-regexp">/h|H/g</span>,date.getHours())</span><br><span class="line">.replace(<span class="hljs-regexp">/ii|II/</span>,$addZero(date.getMinutes(),<span class="hljs-number">2</span>))</span><br><span class="line">.replace(<span class="hljs-regexp">/i|I/g</span>,date.getMinutes())</span><br><span class="line">.replace(<span class="hljs-regexp">/ss|SS/</span>,$addZero(date.getSeconds(),<span class="hljs-number">2</span>))</span><br><span class="line">.replace(<span class="hljs-regexp">/s|S/g</span>,date.getSeconds())</span><br><span class="line">.replace(<span class="hljs-regexp">/w/g</span>,date.getDay())</span><br><span class="line">.replace(<span class="hljs-regexp">/W/g</span>,arrWeek[date.getDay()]); </span><br><span class="line"><span class="hljs-keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.getTimeDistance = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">ts</span>)</span>&#123;</span><br><span class="line"><span class="hljs-comment">//根据时间差计算剩余的时间，返回[天，小时，分，秒]</span></span><br><span class="line"><span class="hljs-keyword">var</span> timeLeft=[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>];<span class="hljs-comment">//结构：天、小时、分、秒</span></span><br><span class="line">timeLeft[<span class="hljs-number">0</span>]=(ts&gt;<span class="hljs-number">86400</span>)?<span class="hljs-built_in">parseInt</span>(ts/<span class="hljs-number">86400</span>):<span class="hljs-number">0</span>;</span><br><span class="line">ts=ts - timeLeft[<span class="hljs-number">0</span>] * <span class="hljs-number">86400</span>;</span><br><span class="line">timeLeft[<span class="hljs-number">1</span>]=(ts&gt;<span class="hljs-number">3600</span>)?<span class="hljs-built_in">parseInt</span>(ts/<span class="hljs-number">3600</span>):<span class="hljs-number">0</span>;</span><br><span class="line">ts=ts - timeLeft[<span class="hljs-number">1</span>] * <span class="hljs-number">3600</span>;</span><br><span class="line">timeLeft[<span class="hljs-number">2</span>]=(ts&gt;<span class="hljs-number">60</span>)?<span class="hljs-built_in">parseInt</span>(ts/<span class="hljs-number">60</span>):<span class="hljs-number">0</span>;</span><br><span class="line">timeLeft[<span class="hljs-number">3</span>]=ts - timeLeft[<span class="hljs-number">2</span>] * <span class="hljs-number">60</span>;</span><br><span class="line"><span class="hljs-keyword">return</span> timeLeft;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">exports.getTimeInterval = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">st,et</span>)</span>&#123;</span><br><span class="line"><span class="hljs-comment">//返回两个时间之间的间隔的描述字符串</span></span><br><span class="line"><span class="hljs-keyword">var</span> dateLeft = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> hourLeft = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> minuteLeft = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> secondLeft = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> timeLeft=[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>];<span class="hljs-comment">//结构：天、小时、分、秒</span></span><br><span class="line"><span class="hljs-keyword">var</span> timeStr=<span class="hljs-string">""</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> ts=(et&gt;st)?<span class="hljs-built_in">parseInt</span>((et-st)/<span class="hljs-number">1000</span>):<span class="hljs-number">0</span>;</span><br><span class="line">timeLeft[<span class="hljs-number">0</span>]=(ts&gt;<span class="hljs-number">86400</span>)?<span class="hljs-built_in">parseInt</span>(ts/<span class="hljs-number">86400</span>):<span class="hljs-number">0</span>;</span><br><span class="line">ts=ts - timeLeft[<span class="hljs-number">0</span>] * <span class="hljs-number">86400</span>;</span><br><span class="line">timeLeft[<span class="hljs-number">1</span>]=(ts&gt;<span class="hljs-number">3600</span>)?<span class="hljs-built_in">parseInt</span>(ts/<span class="hljs-number">3600</span>):<span class="hljs-number">0</span>;</span><br><span class="line">ts=ts - timeLeft[<span class="hljs-number">1</span>] * <span class="hljs-number">3600</span>;</span><br><span class="line">timeLeft[<span class="hljs-number">2</span>]=(ts&gt;<span class="hljs-number">60</span>)?<span class="hljs-built_in">parseInt</span>(ts/<span class="hljs-number">60</span>):<span class="hljs-number">0</span>;</span><br><span class="line">timeLeft[<span class="hljs-number">3</span>]=ts - timeLeft[<span class="hljs-number">2</span>] * <span class="hljs-number">60</span>;</span><br><span class="line">timeStr=(timeLeft[<span class="hljs-number">0</span>]&gt;<span class="hljs-number">0</span>)?timeLeft[<span class="hljs-number">0</span>]+<span class="hljs-string">"天"</span>:<span class="hljs-string">""</span>;</span><br><span class="line">timeStr+=(timeLeft[<span class="hljs-number">0</span>]&lt;=<span class="hljs-number">0</span> &amp;&amp; timeLeft[<span class="hljs-number">1</span>]&lt;=<span class="hljs-number">0</span>)?<span class="hljs-string">""</span>:(timeLeft[<span class="hljs-number">1</span>]+<span class="hljs-string">"小时"</span>);</span><br><span class="line">timeStr+=(timeLeft[<span class="hljs-number">0</span>]&lt;=<span class="hljs-number">0</span> &amp;&amp; timeLeft[<span class="hljs-number">1</span>]&lt;=<span class="hljs-number">0</span> &amp;&amp; timeLeft[<span class="hljs-number">2</span>]&lt;=<span class="hljs-number">0</span>)?<span class="hljs-string">""</span>:(timeLeft[<span class="hljs-number">2</span>]+<span class="hljs-string">"分钟"</span>);</span><br><span class="line">timeStr+=(timeLeft[<span class="hljs-number">0</span>]&lt;=<span class="hljs-number">0</span> &amp;&amp; timeLeft[<span class="hljs-number">1</span>]&lt;=<span class="hljs-number">0</span> &amp;&amp; timeLeft[<span class="hljs-number">2</span>]&lt;=<span class="hljs-number">0</span> &amp;&amp; timeLeft[<span class="hljs-number">3</span>]&lt;=<span class="hljs-number">0</span>)?<span class="hljs-string">""</span>:timeLeft[<span class="hljs-number">3</span>]+<span class="hljs-string">"秒"</span>;</span><br><span class="line"><span class="hljs-keyword">return</span> timeStr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">$addZero</span>(<span class="hljs-params">v,size</span>)</span>&#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>,len=size-(v+<span class="hljs-string">""</span>).length;i&lt;len;i++)&#123;</span><br><span class="line">v=<span class="hljs-string">"0"</span>+v;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-keyword">return</span> v+<span class="hljs-string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.getServerTime = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">url</span>) </span>&#123;</span><br><span class="line"><span class="hljs-keyword">var</span> sysTime = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'SYSTIME'</span>);</span><br><span class="line"><span class="hljs-keyword">if</span>(sysTime)&#123;</span><br><span class="line"><span class="hljs-keyword">var</span> ts = sysTime.value.substring(<span class="hljs-number">0</span>, <span class="hljs-number">19</span>).split(<span class="hljs-string">'-'</span>),</span><br><span class="line">dObj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(ts[<span class="hljs-number">0</span>], <span class="hljs-built_in">parseInt</span>(ts[<span class="hljs-number">1</span>], <span class="hljs-number">10</span>) - <span class="hljs-number">1</span>, ts[<span class="hljs-number">2</span>], ts[<span class="hljs-number">3</span>], ts[<span class="hljs-number">4</span>], ts[<span class="hljs-number">5</span>]);</span><br><span class="line"><span class="hljs-keyword">return</span> dObj;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="hljs-keyword">var</span> xhr = $xhrMaker(),</span><br><span class="line">    url = url || <span class="hljs-string">"http://"</span> + <span class="hljs-built_in">window</span>.location.hostname+<span class="hljs-string">"/favicon.ico"</span>;</span><br><span class="line"><span class="hljs-keyword">try</span>&#123;</span><br><span class="line">xhr.open(<span class="hljs-string">"HEAD"</span>, url, <span class="hljs-literal">false</span>);</span><br><span class="line">xhr.send();</span><br><span class="line">&#125;<span class="hljs-keyword">catch</span>(e)&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();</span><br><span class="line">&#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(xhr.getResponseHeader(<span class="hljs-string">"Date"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">$xhrMaker</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line"><span class="hljs-keyword">var</span> xhr;</span><br><span class="line"><span class="hljs-keyword">try</span>&#123;<span class="hljs-comment">// Firefox, Opera 8.0+, Safari</span></span><br><span class="line">xhr=<span class="hljs-keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125;<span class="hljs-keyword">catch</span>(e)&#123;<span class="hljs-comment">//Internet Explorer</span></span><br><span class="line"><span class="hljs-keyword">try</span>&#123;</span><br><span class="line">xhr=<span class="hljs-keyword">new</span> ActiveXObject(<span class="hljs-string">"Msxml2.XMLHTTP"</span>);</span><br><span class="line">&#125;<span class="hljs-keyword">catch</span>(e)&#123;</span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line">xhr=<span class="hljs-keyword">new</span> ActiveXObject(<span class="hljs-string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">&#125;<span class="hljs-keyword">catch</span> (e)&#123;</span><br><span class="line">xhr=<span class="hljs-literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-keyword">return</span> xhr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;时间处理方法&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://wangytbest.github.io/categories/Javascript/"/>
    
      <category term="util" scheme="http://wangytbest.github.io/categories/Javascript/util/"/>
    
    
  </entry>
  
</feed>
